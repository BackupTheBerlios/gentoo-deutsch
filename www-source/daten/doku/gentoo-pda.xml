<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE guide SYSTEM "/dtd/guide.dtd">

<!-- English CVS Version: 1.10 -->

<guide link="/doc/en/gentoo-pda.xml">
  <title>Gentoo Linux PDA/PIM Leitfaden</title>
  <author title="Author"><!-- zhen@gentoo.org -->
    John P. Davis
  </author>
  <author title="Contributor">Steven Hay</author>
  <author title="Editor">
    <mail link="swift@gentoo.org">Sven Vermeulen</mail>
  </author>
  <author title="Translator">
    <mail link="js@ameds.de">Jens Schittenhelm</mail>
  </author>
  <abstract> Dieser Leitfaden soll bei der Konfiguration und
den Gebrauch von PDAs unter Gentoo Linux helfen.
</abstract>

<license/>

<version>2.1</version>
<date>September 15, 2003</date>
<chapter>
<title>PDA-unabhängiges Setup</title>
<section>
      <title>Konfiguration der Verbindung</title>
 <body>
	  
<p>
Bevor überhaupt irgendwelches Informationsmanagement mit dem PDA 
durchgeführt werden kann, muss dieser erst mit Ihrem Rechner 
kommunizieren können.
</p>
	  
</body>
</section>
<section>
	  <title>USB Verbindung</title>
<body>

<p>
Zunächst sollten Sie überprüfen, ob der Kernel die USB-Hardware
sauber unterstützt. Sollte dies nicht der Fall sein, müssen zuerst
die entsprechenden Treiber installiert werden. Dieser Leitfaden
geht davon aus, daß Sie sich mit den Grundlagen der Konfiguration
eines Kernels auskennen.
</p>

<p>
Sollten Sie die Kernel-Quellen noch nicht auf Ihrem Rechner haben, ist 
dies eine gute Gelegenheit dazu. Wir werden hier nicht auf die
unterschiedlichen Kernel eingehen, die von Gentoo angeboten werden.
Informationen hierzu finden Sie im
<uri link="http://www.gentoo.org/doc/de/gentoo-x86-install.xml">Installationshandbuch</uri>.
</p>
        
<pre caption="Notwendige USB Kernel Optionen">
# <c>cd /usr/src/linux</c>
# <c>make menuconfig</c>
</pre>

<p> Hier ist eine Liste aller Optionen, die im Kernel aktiv sein sollten:
<ul><li>USB support (CONFIG_USB)</li>
<li>Preliminary USB Device Filesystem (CONFIG_USB_DEVICEFS)</li>
<li>Der entsprechende Controller - UHCI, oder OHCI (CONFIG_USB_UHCI, oder CONFIG_USB_OHCI)</li>
<li>USB Serial Converter support (CONFIG_USB_SERIAL)</li>
<li>USB Handspring Visor Driver (CONFIG_USB_SERIAL_VISOR) (Sub-Option des Menu Serial Converter)
[Nur notwendig, wenn Sie einen Handspring verwenden]</li></ul>
</p>

<note>Wenn möglich, sollten Sie diese als Module kompilieren und zu
<path> /etc/modules.autoload</path> hinzufügen, sodaß sie nach jedem
Systemstart geladen werden
</note>

      </body>
    </section>
    <section>
      <title>Serielle Verbindung</title>
      <body>

<p>
Wir gehen davon aus, dass der serielle Anschluß des PDA Cradles
in den ersten seriellen Port
(/dev/ttyS0, oder /dev/tts/0 laut &quot;devfs&quot; Namensgebung)
gesteckt wird.
</p>

<pre caption="Hinzufügen eines seriellen Gerätes">
# <c>groupadd serial</c>
# <c>chown root.serial /dev/tts/0</c>
# <c>chmod g+rw /dev/tts/0</c>
# <c>ls -l /dev/tts/0</c>
# crw-rw----    1 root     serial     4,  64 Dec 31  1969 /dev/tts/0
# <c>ln -s /dev/tts/0 /dev/pilot</c>
# <c>nano -w /etc/group</c> <comment>(Fügen sie die entsprechenden User zur Gruppe serial hinzu)</comment>
</pre>

<p>
Wir haben eine Gruppe namens &quot;serial&quot; dem System hinzugefügt, und Sie sollten
alle Benutzer, die Zugriff auf den seriellen Port haben dürfen (d.h. alle Palm Pilot User), dieser
Gruppe hinzufügen. Die Gruppe serial hat &quot;rw&quot; Erlaubnis für den <path>/dev/tts/0</path>
Pfad und für viele Programme haben wir einen Symlink von <path>/dev/pilot</path> nach 
<path>/dev/tts/0</path> angelegt. Dank der Einstellungen von devfs unter Gentoo bleiben
diese Änderungen auch nach einem Reboot erhalten.
</p>

<note>
Users mit pre-rc6-r13 können entweder <path>sys-apps/baselayout</path>
aktualisieren und <path>sys-fs/devfsd</path> emergen (wichtig: alle
&quot;._cfg*&quot; Dateien in <path>/etc</path> müssen aktualisiert werden)
oder tragen dann die entsprechenden Permissions selbst in <path>/etc/devfsd.conf</path>
ein.
</note>

      </body>
    </section>
    <section>
      <title>Neustart von devfsd</title>
      <body>

<p>
 Nun müssen Sie den <e>devfsd</e> Daemon neu starten.
Sollte Ihre Konfigurationsdatei Fehler enthalten, müssen Sie
den Daemon von Hand manuell neu starten, weil er bei
Problemen anhalten wird.
</p>

<pre caption="Neustart von devfsd">
# <i>killall -HUP devfsd</i>
</pre>

</body>
</section>

<section>
<title>Sharp Zaurus (SL5000/SL5500) USB Verbindung</title>
<body>

<p>
Der Zaurus besitzt die praktische Möglichkeit, das Gerät mit Ihrem Computer so zu verbinden, als wäre es
ein weiteres Gerät im Netzwerk, ohne dabei eine weitere Netzwerkkarte (NIC) erfoderlich zu machen. Alles
was Sie brauchen, ist das Zaurus USB-Cradle und das  <i>usbd</i> Kernelmodul.
</p>

<note>
Die meisten Informationen sind von <uri>http://www.zauruszone.com/howtos/lc_generic.shtml</uri>
entnommen worden. An dieser Stelle möchte ich den Entwicklern von Sharp für Ihre Bereitschaft, mit der 
Open Source Community zusammenzuarbeiten danken.
</note>

<p>
Als erstes muss der Kernel gepatcht werden. Der <i>usbd</i> Treiber ist eine Patch-Datei, die gegen den 
aktuellen Kernel-Verzeichnisbaum gepacht wird und dann in der Kernel Konfiguration aktiviert werden kann.
</p>

<pre caption="Herunterladen und Installieren des usbd Kernel Patches">
# <c>cd /usr/src</c>
# <c>wget http://www.zauruszone.com/howtos/downloads/usbdnet-2.4.18-patch.gz</c>
<comment>Patch für kernel 2.4.18</comment>
# <c>wget http://www.zauruszone.com/howtos/downloads/usbdnet-2.4.19-patch.gz</c>
<comment>Patch für kernel 2.4.19</comment>
# <c>wget http://www.zauruszone.com/howtos/downloads/usbdnet-2.4.20-patch.gz</c>
<comment>Patch f+r kernel 2.4.20</comment>

<comment>Nun sollten Sie Ihren Kernel patchen, wobei  der entsprechende 2.4.x mit Ihrer 
Kernel-Versionnummer übereinstimmen muss.</comment>
# <c>zcat usbdnet-2.4.x.patch.gz | patch -p0</c>
</pre>

<p>
Sobald Sie den Kernel gepatcht haben, können Sie Ihren Kernel neu konfigurieren:
</p>

<pre caption="KernelKConfiguration">
<comment>Im <path>/usr/src/linux</path> Verzeichnis:</comment>
# <c>make menuconfig</c>
In "Code maturity level options", wählen Sie "Prompt for development and/or incomplete code/drivers"
In "USB support", Sektion "USB Network adaptors", wählen Sie  (als Modul) "USBD Network (Encapsulated) Host-to-Host Link (EXPERIMENTAL)"
Dann tragen Sie <i>04dd in USBD Network idVendor</i> undnd <i>8004 in USBD Network idProduct</i> ein.
</pre>

<p>
Es spielt keine Rolle, ob Sie das <i>usbd</i> als Modul oder direkt in den
Kernel kompiliert haben. Wenn Sie es als Modul kompilieren, sollten Sie
sicherstellen, dass es nach einem Reboot auch wieder geladen wird.
Des weiteren sollten Sie sicherstellen, dass die notwendigen USB-Informationen
(wie oben beschrieben) im Kernel enthalten sind.
</p>

<p>
Nachdem Ihr Kernel konfiguriert wurde und Sie neu gebootet haben,
sollten Sie nun prüfen, ob der Patch auch funktioniert.
</p>
 
<p>
Schalten Sie den Zaurus ein, setzen Sie ihn in das Cradle und drücken den
Sync-Knopf. Wenn Sie <path>/var/log/messages</path> betrachten, sollte
eine Nachricht ähnlich dieser auftreten:
</p>

<pre caption="Ausgabe von /var/log/messages">
# <c>tail -f /var/log/messages</c>
<comment>Inhalt:</comment>
hub.c: USB new device connect on bus1/1, assigned device number 38
usb.c: USB device 38 (vend/prod 0x4dd/0x8004) is not claimed by any active driver.
v0.4b sl@lineo.com, tbr@lineo.com
usbdnet.c: v0.4b sl@lineo.com, tbr@lineo.com
usbdnet.c: USB Host to Device Network - for Linux USB Devices using MDLM/CDC
usb.c: registered new driver usbdnet
</pre>

<p>Sollte bis hierher alles funktinieren, wird es Zeit den Netzwerktreiber zu laden</p>

<pre caption="Laden des USB Netwerkgerätes">
# <c>ifconfig -a</c>
</pre>

<p>Es sollte ein Adapter mit dem Namen <i>usb0</i> auf der Liste auftauchen.</p>

<p>
Nun richten wir das Netzwerk auf dem Zaurus ein. USB-Netzwerk ähnelt PPP, da beide 
geräte auf jder Seite eine IP Adresse erhalten. Die IP-Adresse des Zaurus kann über
das "Network Setup Tool" gesetzt werden. Standardmäßig ist dies 192.168.129.201.
Sollten Sie diese Einstellung geändert haben, müssen Sie natürlich die entsprechende
IP Adresse angeben, wenn Sie den Zaurus wie in unserem Beispiel anpingen.
</p>

<p>
Wenn Sie den Zaurus in das Cradle setzen und eine andere Schnitstelle als usb0
erstellt wird, sollten Sie alle usb0 Bezeichnungen in unserem Howto durch dieses 
entsprechende Interface ersetzen. Konfigurieren Sie das Interface mit folgenden
Befehlen: 
</p>

<pre caption="Konfiguration des Zaurus">
<comment>Dies geben Sie an der Kommandozeile Ihres Desktop-Rechners ein.</comment>
# <c>ifconfig usb0 192.168.129.1 netmask 255.255.255.255 up </c>
# <c>route add -host 192.168.129.201 usb0 </c>
</pre>

<p>
Nun pingen Sie den Zaurus, <c>ping 192.168.129.201</c>, wenn Sie eine Antwort erhalten,
haben Sie die Verbindung erfolgreich hergestellt.
</p>

<note>
Nit den oben beschriebenen Schritten erhalten Sie eine funktionierende Sync-Verbindung zu
Ihrem Zaurus. Wollen Sie vom Zaurus aus via USB-Cradle mit dem Internet verbinden, sollten
Sie die Anleitungen auf der 
<uri link="http://www.zauruszone.com/howtos/lc_generic.shtml">Sharp Zaurus Developer</uri> 
Webseite befolgen.
</note>

</body>
</section>
	
    <section>
	<title>Verschiedenes</title>
      <body>
<p>
bevor Sie ein Programm zur Verwendung mit ihrem PDA kompilieren, sollten Sie die 
<e>pda</e> USE Variable zu <path>/etc/make.conf</path> hinzufügen. Damit
stellen Sie sicher, dass alle Programme mit der entsprechenden PDA Unterstützung
(falls vorhanden) kompiliert werden.
</p>

<pre caption="Anpassen von /etc/make.conf">
# <c>vim /etc/make.conf</c>
<comment>Schauen Sie nach dieser Zeile</comment>
USE=&quot;use1 use2 etc <e>pda</e>&quot;
</pre>

<p>
Verwenden Sie einen  Palm/Handspring, sollten Sie gleich die entsprechenden
Symlinks setzen:
</p>

<pre caption="Erstellen der Symlinks">
# <c>ln -s /dev/usb/tts/1 /dev/palm</c>
# <c>ln -s /dev/usb/tts/1 /dev/pilot</c>
</pre>

     </body>
    </section>
  </chapter>
  <chapter>
    <title>Handspring/Palm Syncronisation</title>
    <section>
      <title>Allgemeine Informationen</title>
      <body>

<p>You will need software to synchronize the data on your PDA.
So far, we have setup the hardware side of the house, now its time for
the (hopefully) easier software side.  There are two major categories
for syncing software; some are rather low-level and simply perform the
synchronization download, others are more robust palm environments to
edit and view the data on your palmtop.</p>
      </body>
    </section>
    <section>
      <title>Coldsync</title>
      <body>
        <p>Coldsync is considered a <i>low-level</i> program, because it
doesn't do anything fancy like some of the ones covered later.  This
may or may not be what you are looking for.  Coldsync can be found at
<uri>http://www.coldsync.org/</uri>It was written as a replacement for
pilot-link.  To install this program, do the following:</p>
        <pre caption="Installing ColdSync">
# <c>emerge coldsync</c>
</pre>
        <p>Now, after making sure all of your modules are loaded, press
the sync button on the cradle and within a few seconds, execute
coldsync with proper options as a user this time:</p>
        <pre caption="Using ColdSync">
# <c>mkdir ~/palmbackup/</c>
<comment>press the sync button</comment>
# <c>coldsync -p /dev/usb/tts/1 -mb ~/palmbackup/</c>
</pre>
      </body>
    </section>
    <section>
      <title>Pilot-link</title>
      <body>
        <p>Pilot-Link can be found at
<uri>http://www.gnu-designs.com/pilot-link</uri>. This utility is beyond the
scope of this tutorial because I chose not to use this program
directly.  However, I've read that the execution command is
something like this:</p>
        <pre caption="Using Pilot-Link">
# <c>mkdir ~/palmbackup/</c>
<comment>press the sync button</comment>
# <c>pilot-xfer -p /dev/usb/tts/1 -b ~/palmbackup/</c>
</pre>
      </body>
    </section>
    <section>
      <title>Higher-Level Syncing Software</title>
      <body>
        <p>There are a few Palm desktop equivalents. I will go over how to use
JPilot, which uses the pilot-link libraries.  You can try them out at
your own pleasure:
<ul><li><uri>http://www.moshpit.org/pilotmgr/</uri>Pilotmanager</li><li><uri>http://www.jpilot.org/</uri>J-Pilot</li><li><uri>http://www.slac.com/pilone/kpilot_home/</uri>KPilot (KDE)</li><li><uri>http://www.gnome.org/projects/gnome-pilot/</uri>Gnome-Pilot (GNOME)</li></ul>
</p>
      </body>
    </section>
    <section>
      <title>J-Pilot</title>
      <body>
        <p> J-Pilot is easy.  Emerge it and run it, play around with it.  To
install, type:</p>
        <pre caption="Installing JPilot">
# <c>emerge jpilot</c>
</pre>
        <p>Now as a user, go ahead and sync your palm first, then run the
software: </p>
        <pre caption="Syncing your PDA">
# <c>jpilot-sync</c>
# <c>jpilot</c>
</pre>
        <note>If syncing doesn't work, look at the error message; you
may need to make a symlink, set your permissions properly in devfsd,
or pass an argument.  See the manpage.
</note>
      </body>
    </section>
    <section>
      <title>Smooth, Sexy Automation</title>
      <body>
        <p>Now you should go and look at your devfsd configuration file
again.  If you hadn't guessed by, this is how
you get the PDA to sync automatically when you press the sync button.
When that device shows up, you can setup devfsd to automatically
execute something.  Below, I have an example setup for user YOU:</p>
        <pre caption="Editing /etc/devfsd.conf">
#configure USB  added by YOU!
REGISTER        ^usb            PERMISSIONS     0.0     0777
REGISTER        ^usb/tts        PERMISSIONS     0.0     0777
<comment>Use this if you are using jpilot to sync</comment>
REGISTER        ^usb/tts/1      EXECUTE       /bin/su YOU -c	&quot;/usr/bin/jpilot -sync&quot;
<comment>Use this if you are using coldsync to sync</comment>
REGISTER       ^usb/tts/1       EXECUTE       /bin/su YOU -c	/usr/local/bin/sync-coldsync &amp;
</pre>

<p>
If you are using coldsync to sync, you have to create a small script
called <path>/usr/local/bin/sync-coldsync</path> with the following
content:
</p>

<pre caption = "/usr/local/bin/sync-coldsync">
#!/bin/sh

/usr/bin/coldsync -p /dev/usb/tts/ -mb $HOME/palmbackup
</pre>

<note>This option is not availible if you are syncing via serial since serial is always "on".
USB is detected differently than serial. You may try, but this will not work with serial.
</note>

        <note>The daemon is run as root. Notice that it uses su
to change to the person who owns the pilot before syncing, and doesn't
require a password to do so.
</note>
      </body>
    </section>
  </chapter>
  <chapter>
    <title>Final Notes</title>
    <section>
      <title>References</title>
      <body>
        <p>Additional info:
<ul>
<li><uri>http://www.linuxpda.com/visor/howto/current/t1.html</uri> Handspring-Visor with Linux mini-HOWTO</li>
<li><uri>http://www.linux-usb.org/USB-guide/book1.html</uri> Linux USB Guide</li>
<li><uri>http://www.zauruszone.com/howtos/lc_generic.shtml</uri> Sharp Zaurus Developer Website</li>
</ul>
</p>
      </body>
    </section>
  </chapter>
</guide>

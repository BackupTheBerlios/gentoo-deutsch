<?xml version="1.0"?>
<?xml-stylesheet href="/xsl/guide.xsl" type="text/xsl"?>
<guide link = "/doc/en/vi-guide.xml">
<title>Python lernen -- die "Spickzettel"-Methode</title>
<author title="Author"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author"><mail link="stocke2@gentoo.org">Eric Stockbridge</mail></author>
<author title="Übersetzung"><mail link="beejay@berlios.de">Benjamin Judas</mail></author>

<abstract>Dieser Leitfade soll Ihnen beibringen, wie man einen Spickzettel benutzen kann, um
das Lernen von vi zu beschleunigen. Dieses ist der erste Leitfaden für vi, der sich an Anfänger
richtet catering to beginners.</abstract>

<version>1.1</version>

<date>21 Apr 2003</date>

<chapter>
<title>Und los geht's</title>

<section>
<title>Einführung</title>
<body>
	<p>
	Dieses Tutorial wird Ihnen zeigen, wie man den mächtigen visuellen Editor vi benutzt.
	Anhand einer speziellen beschleunigten "Spickzettel"-Methode, versucht dieses Tutorial
	Sie zu einem fortgeschrittenen vi-user zu machen, und das ohne viel Zeit in Anspruch
	zu nehmen. In diesem vi-Tutorial werden Sie lernen sich innerhalb von Texten zu bewegen,
	Text zu bearbeiten, den insert-mode zu benutzen, Text zu kopieren und wieder einzufügen,
	und natürlich solch wichtige vim-Erweiterungen wie den Visual-Mode und Multi-Window-Editing
	</p>

	<p>
	Wenn Sie vi nicht kennen oder Ihnen das Arbeiten damit unbequem erscheint, dann können Sie
	dieses Tutorial dazu benutzen, um Ihr Arbeiten mit einem der beliebtesten und mächtigsten
	Editoren im Linux/UNIX-Sektor zu beschleunigen.
	</p>

</body>
</section>

<section>
<title>Über den Leitfaden</title>
<title>vi lernen -- beschleunigt</title>
<body>
	<p>
	Es gibt eine Sache im Speziellen, die es erschwert, vi zu lernen -- vi hat unglaublich viele Kommandos.
	Um vi also effektiv nutzen zu können, müssen Sie sich einige davon merken. Dies kann eine lange Zeit
	in Anspruch nehmen, und eines der Ziele dieses Tutorials ist eben nicht besonders viel Zeit zu beanspruchen.
	Für uns ist das zu Beginn eine grosse Herausforderung : Wie kann ich Ihnen helfen, diese Kommandos innerhalb
	kurzer Zeit im Kopf zu haben ?
	</p>

	<p>
	Um dieser Herausforderung entgegenzutreten während wir durch dieses Tutorial voranschreiten, werden wir
	uns Stückchen für Stückchen einen Spickzettel zusammenstellen. Dieser Zettel wird alle wichtigen vi-
	Kommandos enthalten. Nachdem Sie dieses Tutorial abgeschlossen haben, wird es Ihnen möglich sein auf diesen
	Spickzettel zurückzugreifen, wenn Sie ein bestimmtes Kommando vergessen haben. Nach einiger Zeit werden sich
	die Kommandos in Ihrem Kopf festgesetzt haben, und sie werden immer unabhängiger von diesem Spickzettel werden.
	Mit der Spickzettel-Methode ist es möglich, vi schneller zu lernen als jemals zuvor.
	</p>
</body>
</section>

<section>
<title>Der Lernprozess</title>
<body>

	<p>
	In diesem Leitfaden werde ich einige Methoden benutzen um Ihnen beim Lernen zu helfen.
	Zuallererst beschreibe ich, wie ein bestimmtes Kommando funktioniert. Dann werde ich Sie auffordern,
	einmal selbst in vi dieses Kommando auszuprobieren (zur Übung), und dann werde ich Sie auffordern, das
	Kommando Ihrem Spickzettel hinzuzufügen. Wenn Sie vi schnell lernen möchten ist es wichtig, das Sie jeden
	dieser Schritte auch durchführen. Das Kommando auszuprobieren und dann auf dem Spickzettel zu vermerken wird
	Ihnen helfen, sich das Kommando zu behalten.
	</p>
</body>
</section>

<section>
<title>Einführung in vim</title>
<body>

	<p>
	Es gibt viele Versionen von vi, und ich werde Ihnen zeigen, wie man eine Version namens "vim"
	benutzt. vim ist sehr beliebt und besitzt einige Erweiterungen, die vi viel interessanter machen
	(wann immer ich ein vim-spezifisches Kommando benutze, wenn werde ich es anzeigen). Wenn Sie vim installieren
	möchten, dann können Sie es von <uri href="http://www.vim.org">http://www.vim.org</uri> herunterladen.
	Zusätzlich zu erweiterten Kommandozeilen-vi, kommt auch gvim mit auf den Rechner, einen netten grafischen Editor,
	der so eingestellt werden kann, dass er die ausgezeichnete GTK+ GUI-Bibliothek benutzt. Hier ein gvim-Screenshot von
	meinem System:
	</p>

	<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vishot.png" short="screenshot" caption="VIM screenshot"/>

	<p>
	Wenn Sie ein vi-Neuling sind, dann versuchen Sie, gvim auf Ihrem System zu Laufen
	zu bekommen. Von einer GUI aus sind die Dinge etwas einfacher für Anfänger.
	</p>

</body>
</section>
</chapter>

<chapter>
<title>Erste Schritte</title>

<section>
<title>Eine Datei benutzen</title>
<body>
	<p>
	Bevor Sie vi benutzen um Dateien zu bearbeiten, müssen Sie ersteinmal wissen, wie Sie
	sich mit vi innerhalb des Textes bewegen können. vi hat eine Menge von Bewegungs-Kommandos,
	und wir werden uns viele von diesen ansehen. Für diesen teil des Tutorials suchen Sie sich
	bitte eine unwichtige Textdatei und öffnen diese mit vi, indem Sie folgendes am Kommandoprompt
	Ihrer Shell eingeben:
	</p>
	<pre>
		$ vi meinedatei.txt
	</pre>
	<p>
	Wenn Sie vim installiert haben, dann geben sie "vim meinedatei.txt" ein. Wenn Sie die
	Benutzung von gvim bevorzugen, dann geben Sie bitte "gvim meinedatei.txt" ein. meinedatei.txt
	ist durch den Namen einer einfachen Textdatei auf Ihrem System zu ersetzen.
	</p>
</body>
</section>

<section>
<title>vi intern</title>
<body>
	<p>
	Nachdem vi geladen ist, sollten Sie einen teil der Textdatei auf dem Bildschirm sehen.
	Herzlichen Glückwunsch! - Sie befinden sich nun in vi. Im Gegensatz zu anderen Editoren,
	befindet sich vi nach dem Start in einem speziellen sog. "Command-Mode". Das heisst, dass wenn
	Sie nun "l" auf Ihrer Tastatur drücken, sie den Cursor einen Zeichen nach rechts bewegen, anstatt
	den Buchstaben "l" in den Text einzufügen. Im Command-Mode werden die Buchstaben auf Ihrer Tastatur
	dazu benutzt, Kommandos an vi zu senden anstatt Buchstaben in den Text einzufügen. Die essentiellsten
	aller Kommandos sind die zur Bewegung des Cursors. Lassen Sie uns einige ansehen
	</p>
</body>
</section>
</chapter>


<chapter>
<title>Im Text bewegen</title>

<section>
<title>Mit vi im Text bewegen, Teil 1</title>
<body>
	<p>
	Im Command-Mode können Sie die <c>h</c>,<c>j</c>,<c>k</c> und <c>l</c> Tasten benutzen, um den Cursor nach
	links, unten, oben und rechts zu bewegen. Wenn Sie eine moderne Version von vi benutzen, dann können Sie außerdem
	auch die Pfeiltasten zu diesem Zweck benutzen. Die <c>h</c>,<c>j</c>,<c>k</c> und <c>l</c> sind recht nützlich,
	denn wenn Sie sich an diese gewöhnt haben, dann können Sie sich innerhalb der Datei bewegen ohne Ihre Finger vom
	Hauptfeld der Tastatur nehmen zu müssen. Veruschen Sie <c>h</c>,<c>j</c>,<c>k</c> und <c>l</c> (und die Pfeiltasten)
	zu benutzen um sich innerhalb des Textes zu bewegen. Versuchen Sie <c>h</c> zu benutzen um an den Beginn einer Zeile
	zu springen. Beachten Sie bitte, dass vi es nicht erlaubt, zum Ende der vorherigen Zeile zu springen, wenn Sie sich am
	Beginn einer Zeile befinden und dann <c>h</c> drücken. Das selbe gilt für das Springen auf die nächste Zeile wenn Sie sich
	am Ende einer Zeile befinden.
	</p>
</body>
</section>

<section>
<title>Mit vi im Text bewegen, Teil 2</title>
<body>
	<p>
	vi bietet spezielle Abkürzungen um zum Anfang oder Ende einer zeile zu springen. Sie können <c>0</c> (Null) drücken,
	um zum ersten Zeichen in einer Zeile zu springen, und sie können <c>$</c> benutzen, um zum letzten Zeichen
	in einer Zeile zu springen. Probieren Sie die Kommandos aus und sehen Sie was passiert. Da vi so viele nützliche
	Bewegungs-Kommandos beherrscht, ist er der ideale "Pager" (wie "less" oder "more"). vi als Pager zu benutzen wird
	Ihnen ausserdem helfen, die Bewegungs-Kommandos schneller zu lernen.
	</p>

	<p>
	Sie können auch <c>&lt;CTR&gt;F</c> und <c>&lt;CTR&gt;B</c> benutzen, um sich seitenweise vorwärts und rückwärts zu
	bewegen. Moderne Versionen von vi (wie vim) erlauben es auch BildAuf und BildAb für diesen Zweck zu benutzen.
	</p>
</body>
</section>

<section>
<title>Wortsprünge, Teil 1</title>
<body>
	<p>
	vi erlaubt es auch, den Cursor wortweise links oder rechts zu bewegen. Um zum <i>ersten</i> Zeichen des nächsten Wortes
	zu gehen, drücken Sie <c>w</c>. Um zum <i>letzten</i> Zeichen des nächsten Wortes zu gehen, drücken Sie <c>e</c>. Um zum ersten
	Buchstaben des <i>vorherigen</i> Wortes zu gelangen, drücken Sie <c>b</c>. Probieren Sie es aus!
	</p>
</body>
</section>

<section>
<title>Wortsprünge, Teil 2</title>
<body>
	<p>
	Nachdem Sie nun ein bisschen mit den Kommandos zur wortweisen Bewegung herumgespielt haben,
	haben Sie vielleicht festgestellt, daß vi Wörter wie "foo-bar-oni" als fünf seperate Wörter
	ansieht. Dies ist so, weil vi von Hause aus Wörter anhand von Leer- <i>oder</i> sog. Delimiterzeichen
	trennt. Aus diesem Grund wird foo-bar-oni als fünf Wörter angesehen : "foo","-","bar","-" und "oni".
	</p>
	<p>
	Manchmal ist es genau das, was man möchte, und manchmal kann man dieses Feature überhaupt nicht gebrauchen.
	Glücklicherweise versteht vi auch das Konzept von "bigword". vi trennt bigwords anhand von <i>Leerzeichen oder
	Zeilenumbrüchen</i>. Dies bedeutet, dass foo-bar-oni zwar als 5 Wörter angesehen wird aber nur als ein bigword.
	</p>
</body>
</section>


<section>
<title>Wortsprünge, Teil 3</title>
<body>
	<p>
	Um zum nächsten und vorherigen Bigword zu springen, können Sie ein grossgeschriebenes Wortbewegungskommando
	benutzen. Benutzen Sie <c>W</c> um zum ersten Zeichen des nächsten Bigwords zu springen, <c>E</c> um
	zum letzten Zeichen des nächsten Bigwords zu springen und <c>B</c> um zum ersten Zeichen des vorhergehenden
	Bigwords zu springen. Probieren Sie es aus und vergleichen Sie die entsprechenden Wort- und Bigwordbewegungskommandos
	bis Sie die Unterschiede verstehen.
	</p>
</body>
</section>

<section>
<title>Grössere Sprünge</title>
<body>
	<p>
	Wir müssen noch ein paar Kommandos mehr behandeln, bevor wir unseren Spickzettel zusammenstellen können.
	Sie können die <c>(</c> und <c>)</c> benutzen um zum Anfang des vorhergehenden und des nächsten Satzes zu springen.
	Zusätzlich dazu können Sie <c>{</c> oder <c>}</c> benutzen, um zum Anfang des aktuellen bzw. des nächsten Absatzes zu springen.
	Auch hier ist wiedereinmal ausprobieren angesagt.
	</p>
</body>
</section>

</chapter>


<chapter>
<title>Beenden</title>

<section>
<title>Beenden</title>

<body>
	<p>
	Wir haben die grundsätzlichen Bewegungskommandos behandelt, aber es gibt noch weitere Kommandos die Sie
	kennen müssen. Die Eingabe <c>:q</c> beendet vi. Sollte dies nicht funktionieren, dann haben Sie vielleicht
	die Datei geändert. Um vi nun zu beenden und die evtl. gemachten Änderungen zu verwerfen, müssen Sie <c>:q!</c>
	eingeben. Sie sollten nun wieder zurück auf Ihrer Shell sein.
	</p>
	<p>
	In vi ist jedes mit einem ":" beginnenden Kommandos ein sogenanntes <i>ex-mode</i> Kommando. Der Grund hierfür ist,
	daß vi einen nicht visuellen Editor mit dem Namen <e>ex</e> eingebaut hat. Er kann ähnlich wie sed dazu benutzt werden
	um zeilenbasierte Bearbeitungsfunktionen durchzuführen. Desweiteren kann er auch dazu benutzt werden um vi zu beenden -
	 wie wir eben gerade gesehen haben. Sollten Sie jemals die Taste <c>Q</c> drücken, während Sie sich im Kommandomodus
	befinden, dann wird vi sofort in den ex Modus schalten. Wenn dies passiert, wird Ihnen ein : Prompt präsentiert, das
	Drücken von Enter wird den ganzen Bildschirm nach oben rollen. Um wieder in den guten alten vi-Modus zurückzukommen, geben
	Sie einfach nur vi ein und drücken Enter.
	</p>
</body>
</section>
</chapter>

<chapter>
<title>Der Spickzettel</title>
<section>

<title>Die Anfänge des Spickzettels</title>
<body>
	<p>
	Wir haben einige Kommandos behandelt und nun ist es Zeit, diese auf unseren Spickzettel zu übertragen.
	Für den Spickzettel brauchen Sie ein US Letter oder A4 Blatt (wir werden einige Informationen auf diesem
	Blatt vermerken!). Hier ist ein Bild meines Spickzettels, nachdem ich alle Kommandos aufgeschrieben habe,
	die wir bis hierhin behandelt haben. Versuchen Sie bitte, meinem Layout zu folgen, sodass alles auf ein
	Blatt Papier passt.
	</p>

	<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-first.png" short="First part of the cheat sheet" caption="Cheat Sheet"/>
</body>

</section>

<section>
<title>Vielseitiger vi</title>

<body>
	<p>
	Lassen Sie uns mit unserem Kommandoschnelldurchlauf fortfahren. Im Kommandomodus können
	Sie zu einer bestimmten Zeile springen, indem Sie <c>G</c> verwenden. Um zur ersten Zeile
	in einer Datei zu springen, geben Sie <c>1G</c> ein. Bitte beachten Sie dass grosse G !
	</p>
	<p>
	Wenn Sie zur nächsten Erscheinung eines bestimmten Textmusters springen möchten, geben
	Sie <c>/&lt;regexp&gt;</c> ein und drücken Sie anschliessend <c>Enter</c>. Ersetzen Sie
	&lt;regexp&gt; mit dem Regulären Ausdruck nach dem Sie suchen. Wenn Sie nicht wissen,
	wie man reguläre Ausdrücke benutzt, dann haben Sie keine Angst : Die Eingabe von <c>/foo</c>
	wird zum nächsten Auftauchen von <i>foo</i> springen. Das einzige wo Sie aufpassen müssen
	sind die speziellen Zeichen <i>^</i>, <i>.</i>, <i>$</i> oder <i>\</i>. Setzen Sie diesen
	Zeichen einen Backslash voran (<i>\</i>) und es sollte funktionieren. Zum Beispiel wird
	<c>/foo\.gif</c> zum nächsten Auftauchen von von "<i>foo.gif</i>" springen.
	</p>
	<p>
	Um die Suche vorwärts Richtung fortzusetzen, drücken Sie <c>n</c> auf der Tastatur. Um rückwärts zu suchen
	drücken Sie <c>N</c>. Wie immer sollten Sie diese Kommandos in Ihrer vi-Umgebung testen. Sie können auch <c>//</c>
	eingeben, um die letzte Suche zu wiederholen.
	</p>
</body>
</section>
</chapter>


<chapter>
<title>Saving and Editing</title>
<section>
<title>Save and save as...</title>
<body>
<p>We've covered how you can use the <i>ex</i> command <c>:q</c> to quit from vi.  If you want to save your
changes, type <c>:w</c>.  If you want to save your changes to another file, type <c>:w filename.txt</c> to 
save as <e>filename.txt</e>.  If you want to save and quit, type <c>:x</c> or <c>:wq</c>.</p>
<p>In vim (and other advanced vi editors, like elvis)<c>:w</c>, you can have multiple buffers open at once.  To open a file into a new window, type <c>:sp filename.txt</c>.  <e>filename.txt</e> will appear open for editing in a new split window.  To switch between windows, type <c>&lt;CTR&gt;w&lt;CTR&gt;w</c> (control-w twice).  Any <c>:q</c>, <c>:q!</c>, <c>:w</c> and <c>:x</c> commands that you enter will only be applied to the currently-active window.</p>
</body>
</section>

<section>
<title>Simple edits</title>
<body>
<p>Now, it's time to start learning some of the simple editing commands.  The commands that
we'll cover here are considered "simple" because the commands keep you in command mode.  The
more complex editing commands automatically put you into insert mode -- a mode that allows
you to enter literal data from the keyboard.  We'll cover those in a bit.</p>
<p>For now, try moving over some characters and hitting <c>x</c> repeatedly.  You'll see that <c>x</c>
will delete the current character under the cursor.  Now, move to the middle of the paragraph
somewhere in your text file, and hit <c>J</c> (capitalized).  You'll see that the <c>J</c> command tells
vi to join the next line to the end of the current line.  Now, move over a character and hit
<c>r</c>, and then type in a new character; you'll see that the original character has been replaced. 
Finally, move to any line in the file and
type <c>dd</c>.  You'll see that <c>dd</c> deletes the current line of text.</p>

</body>
</section>
<section>
<title>Repeating and deleting</title>
<body>
	<p>You can repeat any editing command by hitting the <c>.</c> key.  If you experiment, you'll see that
	typing <c>dd...</c> will delete 4 lines, and <c>J......</c> will join four lines.  As usual, vi provides with
another handy shortcut.
</p>
<p>To delete text, you can also use the <c>d</c> command combined with any movement command.  For example,
	<c>dw</c> will delete from the current position to the beginning of the next word; <c>d)</c> will delete up until the
	end of the next sentence, and <c>d}</c> will delete the remainder of the paragraph.  Experiment with the
	<c>d</c> command and the other editing commands until you're comfortable with them.</p>
</body>
</section>
<section>
<title>Undo!</title>
<body>
<p>Now that we're experimenting with deletion, it would be a good time to learn how to undo any changes.
	By pressing <c>u</c>, the original version of vi allowed you to undo the last edit only.  However, modern versions
	of vi like vim will allow you to repeatedly press <c>u</c> to continue to undo changes to your file.  Try combining
	some <c>d</c> and <c>u</c> commands together.
</p>
</body>
</section>

<section>
<title>Updating the cheat sheet</title>
<body>
<p>Time to update the cheat sheet!  After adding all the commands we've covered so far, your 
cheat sheet should look like this:</p>

	<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-edit.png" short="Cheat sheet" caption="Cheat sheet with editing commands"/>

</body>
</section>
</chapter>
<chapter>
<title>Insert mode</title>
<section>
<title>Insert mode</title>

<body>
<p>So far, we've covered how to move around in vi, perform file i/o, and perform basic editing
operations.  However, I still haven't shown you how to actually type in free-form text!  This
was intentional, because vi's insert mode is a bit complicated at first.  However, after you 
become comfortable with insert mode, its complexity (and flexibility) will become an asset.
</p>
<p>In vi insert mode, you'll be able to enter text directly to the screen just like you can in many
other visual editors.  Once you've entered your modifications, you can hit escape to return to 
command mode.  You can enter insert mode by pressing <c>i</c> or <c>a</c>.  If you press <c>i</c>, your text will be <e>inserted</e>
before the current character, and if you hit <c>a</c>, your text will be <e>appended</e> after the current character.
Remember, after you enter your text, hit <c>&lt;ESC&gt;</c> to return to command mode.</p>
</body>
</section>
<section>
<title>Benefits of insert mode</title>
<body>
	<p>Go ahead and try using the <c>a</c> and <c>i</c> commands.  Hit either <c>a</c> or <c>i</c>, type some text, and then hit
		escape to get back to command mode.  After hitting <c>a</c> or <c>i</c>, try hitting <c>&lt;ENTER&gt;</c>, and see what happens.
		Try using the arrow keys and the <c>&lt;DEL&gt;</c> key to get a feel for how insert mode works.  By using
the arrow keys and <c>&lt;DEL&gt;</c> key, you can perform significant editing steps without repeatedly entering
and leaving insert mode</p>
</body>
</section>
<section>
<title>Insert options</title>
<body>
	<p>Here are some other handy ways to enter insert mode.  Press <c>A</c> (captial) to begin appending
		to the <e>end</e> of the current line, regardless of your current position on the line.  Likewise, press
		<c>I</c> (capital) to begin inserting text at the <e>beginning</e> of the current line.  Press <c>o</c> to create
			a new blank line below the current line into which you can insert text, and press <c>O</c> (capital) to
create a new line above the current line.  To replace the entire current line with a new line,
press <c>cc</c>.  To replace everything from the current position to the end of the line, type <c>c$</c>.  To replace
everything from the current position to the beginning of the line, type <c>c0</c>.</p>
<p>In addition to performing a special operation, every one of these commands will put you
	into insert mode.  After typing in your text, hit <c>&lt;ESC&gt;</c> to return to command mode.
</p>

</body>
</section>
<section>
<title>Changing text</title>
<body>
	<p>We've used the <c>c</c> (change) command a little bit so far when we typed <c>cc</c>, <c>c0</c> and <c>c$</c>.  <c>cc</c> is a special
				form of the change command, similar to <c>dd</c>.  the <c>c0</c> and <c>c$</c> commands are examples of using the change
				command in combination with a movement command.  In this form, <c>c</c> works similarly to <c>d</c>, except that it 
leaves you in insert mode so that you can enter replacement text for the deleted region.  Try combining some
movement commands with <c>c</c> and test them out on your file (hint: <c>cW</c>, <c>ce</c>, <c>c(</c> .)
</p>

</body>
</section>
</chapter>
<chapter>
<title>Compound Commands</title>
<section>
<title>Compound commands</title>
<body>
	<p>vi <e>really</e> becomes powerful when you start using compound ("combo") commands, like <c>d{</c> and <c>cw</c>.  
In addition to these commands, you can also combine a number with any movement command, such as
<c>3w</c>, which will tell vi to jump three words to the right.  Here are some more movement "combo" command
examples: <c>12b</c>, <c>4j</c>.</p>
<p>vi, in addition to allowing (number)(movement command) combinations, also allows <c>d</c> or <c>c</c>
	to be combined with a number or movement command.  So, <c>d3w</c> will delete the next three words, <c>d2j</c> will
	delete the current and next two lines, etc.  Test out some <c>c</c> and <c>d</c> combo moves to get a feel for
how powerful and concise vi editing can be.  Once these commands are second-nature, you'll be able
to edit files at blazing speed.</p>

</body>
</section>
<section>
<title>Updating the cheat sheet</title>
<body>
<p>Time to update the cheat sheet again.  Here's what it looks like so far:</p>
<p>
	<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-compound.png" short="Cheat Sheet" caption="Cheat sheet with compound commands"/>

</p>
</body>
</section>
<section>
<title>Productivity features</title>

<body>
<p>So far, we've covered how to move, save and quit, perform simple edits
and deletions, and use insert mode.  With everything listed on the cheat
sheet so far, you should be able to use vi to perform almost any task.</p>
<p>However, vi also has many more powerful commands.  In this section, you'll
	learn how to <e>cut</e>, <e>copy</e> and <e>paste</e>, <e>search</e> and <e>replace</e>, and use <e>autoindent</e>
features.  These commands will help make vi more fun and productive.</p>

</body>
</section>
<section>
<title>Visual mode</title>
<body>
<p>The best way to cut and paste is to use visual mode, a special mode that
has been added to modern versions of vi, like vim and elvis.  You can think
of visual mode as a "highlight text" mode.  Once the text is highlighted,
it can be copied or deleted, and then pasted.  If you are using gvim, you 
can highlight by simply dragging the left mouse button over a particular
region:</p>
<p>
	<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vihighlight.png" short="Highlighted text" caption="VIM with highlighted text"/>

</p>
</body>
</section>
<section>
<title></title>
<body>

	<p>In addition, you can also enter visual mode by hitting <c>v</c> (this may be your
only option if you are using vi from the console.)  Then, by moving the cursor
using movement commands (typically the arrow keys), you'll be able to highlight
a region of text.  Once highlighted, we are ready to cut or copy the text.
</p>

<p>If you're copying the text, hit <c>y</c> (which stands for "yank").  If you're cutting
	the text, hit <c>d</c>.  You'll be placed back in command mode.  Now, move to the position
	where you'd like to insert the cut or copied text, and hit <c>P</c> to insert after the cursor, 
	or <c>p</c> to insert before the cursor.  Voila, the cut/copy and paste is complete!
Test out several copy/cut and paste operations before advancing to the next section.
</p>

</body>
</section>
<section>
<title>Replacing text</title>
<body>
	<p>To replace patterns of text, we use <e>ex</e> mode.  If you'd like to replace the first pattern
		that appears on the current line, type <c>:s/&lt;regexp&gt;/&lt;replacement&gt;/</c> and hit <c>&lt;ENTER&gt;</c>, where &lt;regexp&gt; 
is the pattern you'd like to match and &lt;replacement&gt; is the replacement string.  To replace all
matches on the current line, type <c>:s/&lt;regexp&gt;/&lt;replacement&gt;/g</c> and hit enter.  To replace every 
occurence of this pattern in your file (normally what you want), type <c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/g</c>.
If you'd like to do a global replace, but have vi prompt you for each change, type 
<c>:%s/&lt;regexp&gt;/&lt;replacement&gt;/gc</c> (stands for "confirm") and hit <c>&lt;ENTER&gt;</c>.</p>

</body>
</section>
<section>
<title>Indentation</title>
<body>
<p>vi supports autoindentation, for when you are editing source code.  Most modern versions
of vi (like vim) will auto-enable autoindent mode when you are editing a source file (like a .c
file, for example).  When autoindent is enabled, you can use <c>&lt;CTR&gt;d</c> (control-d) to move one indent
level to the left, and <c>&lt;CTR&gt;t</c> (control-t) to move one indent level to the right.  If autoindent
wasn't enabled automatically, you can manually enable it by typing in the <e>ex</e> command <c>:set</c> autoindent.
You can also tell vi to set the tab size to your favorite setting by using the <c>:set tabstop</c> command;
<c>:set tabstop=4</c> is quite popular.</p>

</body>
</section>
<section>
<title>Our final cheat sheet</title>
<body>
<p>Well, we've reached the end of the vi tutorial!  After adding all the advanced editing commands
to your cheat sheet, it should look like this:</p>
<p>
	<figure link="http://www.ibiblio.org/pub/Linux/distributions/gentoo/images/vicheat-final.png" short="Cheat Sheet" caption="Final cheet sheet"/>

</p>

<p>Keep your cheat sheet handy, and begin using vi to edit files and compose emails.  Refer to the
cheat sheet when needed; you'll find that within the week, you'll have nearly all the commands
memorized and your vi productivity will shoot through the roof!</p>

</body>
</section>
<section>
<title>Resources</title>
<body>
<p>Here are some resources you may find helpful as you continue to learn more about vi:</p>
<ul>
<li><uri link="http://www.thomer.com/thomer/vi/vi.html">The vi Lovers Home Page</uri>, an excellent resource for all
things vi.</li>
<li><uri link="http://www.vim.org">The vim homepage</uri> is the place to go for all your vim needs.</li>
<li>If you're looking for a good, old-fashioned book, <uri link="http://www.oreilly.com/catalog/vi6/">Learning the vi Editor, 6th Edition</uri> would be an excellent choice.  Contains good coverage of vi and vi clones.</li>
</ul>
</body>
</section>
</chapter>
</guide>

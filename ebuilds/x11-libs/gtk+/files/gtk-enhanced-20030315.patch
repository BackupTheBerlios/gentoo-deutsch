--- gtk+-2.2.1-original/gtk/gtkfilesel.c	Thu Jan 30 21:49:14 2003
+++ gtk+-2.2.1/gtk/gtkfilesel.c	Sat Mar 15 18:10:05 2003
@@ -78,6 +78,10 @@
 #include "gtkmessagedialog.h"
 #include "gtkdnd.h"
 #include "gtkeventbox.h"
+#include "gtktoolbar.h"
+#include "gtkimage.h"
+#include "gtktogglebutton.h"
+#include "gtkarrow.h"
 
 #define WANT_HPANED 1
 #include "gtkhpaned.h"
@@ -408,12 +412,113 @@
 static void gtk_file_selection_update_history_menu (GtkFileSelection       *fs,
 						    gchar                  *current_dir);
 
+static void gtk_file_selection_back (GtkWidget *widget, gpointer data);
+static void gtk_file_selection_up (GtkWidget *widget, gpointer data);
+static void gtk_file_selection_refresh (GtkWidget *widget, gpointer data);
+static void gtk_file_selection_home (GtkWidget *widget, gpointer data);
 static void gtk_file_selection_create_dir  (GtkWidget *widget, gpointer data);
 static void gtk_file_selection_delete_file (GtkWidget *widget, gpointer data);
 static void gtk_file_selection_rename_file (GtkWidget *widget, gpointer data);
 
 static void free_selected_names (GPtrArray *names);
 
+static void reload_bookmarks (GtkWidget *bookmarks_button, GtkWidget *fs);
+
+static const guint8 new_folder_icon[] = 
+{ ""
+  /* Pixbuf magic (0x47646b50) */
+  "GdkP"
+  /* length: header (24) + pixel_data (1692) */
+  "\0\0\6\264"
+  /* pixdata_type (0x2010002) */
+  "\2\1\0\2"
+  /* rowstride (96) */
+  "\0\0\0`"
+  /* width (24) */
+  "\0\0\0\30"
+  /* height (24) */
+  "\0\0\0\30"
+  /* pixel_data: */
+  "\236\0\0\0\0\5\25\14\4fF0\34\3776&\24\245\0\0\0i\0\0\0\25\223\0\0\0\0"
+  "\10B)\21\344\320\213E\377\306\201>\377\231g5\377\\=\37\332)\33\15\321"
+  "\17\7\1;\0\0\0/\217\0\0\0\0\12\0\0\0b\221]*\377\316{.\377\300j\37\377"
+  "\306s(\377\317}2\377\300y5\377\224`-\377M,\16\355\22\12\3\243\215\0\0"
+  "\0\0\14\0\0\0^\31\15\1\310\331\2077\377\276e\25\377\274a\21\377\273a"
+  "\21\377\272a\20\377\272_\17\377\277a\17\377\323x$\377\207P\33\377\0\0"
+  "\0G\213\0\0\0\0\17\0\0\0\35eed\332\313\271\246\377\317\216R\377\276k"
+  "\40\377\264V\5\377\263R\1\377\262R\1\377\262Q\1\377\264X\12\377\303w"
+  "3\377\251c\40\377\5\10\5\362\0\0\0\300\0\0\0H\211\0\0\0\0\22\6\6\6v\251"
+  "\247\245\377\355\352\343\377\341\331\312\377\336\312\264\377\322\253"
+  "\211\377\275xB\377\260Y\31\377\257X\26\377\324\253\210\377\332\322\303"
+  "\377\205\215d\377C]A\3776C5\377\24\26\24\377\16\17\16\261\6\7\6""8\0"
+  "\0\0\32\206\0\0\0\0\24""111\377\327\325\320\377\346\342\330\377\336\330"
+  "\311\377\335\330\311\377\335\327\310\377\344\337\324\377\344\332\316"
+  "\377\351\342\330\377\343\335\322\377\254\266\243\377i\207g\377~\227}"
+  "\377q~h\377\226\230\211\377\237\240\230\377ssp\377A@@\377\0\0\0\203\0"
+  "\0\0i\203\0\0\0\0\26\0\0\0""3vus\377\351\345\335\377\343\336\321\377"
+  "\335\327\310\377\335\326\307\377\334\325\306\377\332\324\304\377\332"
+  "\323\303\377\332\323\302\377\307\306\265\377\221\243\215\377\212\235"
+  "\210\377kxf\377\245\242\222\377\311\302\260\377\321\312\270\377\322\313"
+  "\270\377\326\321\305\377\303\300\266\377\221\220\214\373(''\353\202\0"
+  "\0\0\0\177\5\5\5\231\313\311\303\377\347\343\331\377\337\331\314\377"
+  "\334\326\306\377\334\325\305\377\332\324\304\377\331\322\302\377\331"
+  "\321\300\377\333\323\274\377\230\250\214\377d\200b\377cva\377\220\227"
+  "\203\377\267\261\240\377\320\311\266\377\317\307\263\377\316\306\262"
+  "\377\315\305\257\377\314\304\260\377\272\263\241\377,*&\377\0\0\0\0\0"
+  "\0\0\35=<<\323\354\351\341\377\344\337\324\377\334\326\306\377\333\325"
+  "\305\377\332\324\303\377\331\322\302\377\330\321\301\377\334\325\272"
+  "\377\355\347\237\377\306\315\204\377\200\232c\377\\xU\377\253\246\225"
+  "\377\311\302\256\377\317\307\264\377\316\306\262\377\314\304\257\377"
+  "\313\303\255\377\313\302\255\377\217\207t\377\4\4\3\251\0\0\0\0\31\31"
+  "\31""3\220\216\212\377\347\343\330\377\340\333\315\377\333\325\305\377"
+  "\331\323\303\377\331\321\301\377\330\321\300\377\327\320\276\377\351"
+  "\342\247\377\226\236m\377\250\261\216\377\330\326\227\377\345\341\245"
+  "\377\302\272\221\377\312\302\256\377\316\306\261\377\314\304\257\377"
+  "\313\302\255\377\312\301\253\377\304\273\244\377GB8\377\0\0\0\241\0\0"
+  "\0\0,,+\255\311\307\301\377\344\337\324\377\334\326\305\377\331\323\303"
+  "\377\331\321\301\377\327\320\277\377\326\320\276\377\337\330\264\377"
+  "\327\324\221\377VjK\377OjI\377v\213m\377\343\336\246\377\254\240z\377"
+  "\277\267\244\377\314\304\256\377\313\302\255\377\311\301\253\377\310"
+  "\277\251\377\271\257\230\377vpb\377-+&\377\0\0\0\77[ZY\353\350\345\334"
+  "\377\337\332\314\377\331\322\302\377\331\321\301\377\327\320\277\377"
+  "\326\317\276\377\326\316\274\377\360\350\241\377\254\263\177\377n\200"
+  "S\377\207\217a\377\210\222y\377\341\325\211\377\245\236\215\377\307\276"
+  "\252\377\313\302\254\377\311\300\252\377\310\277\251\377\306\275\247"
+  "\377\237\225}\377\235\226\204\377EB:\377\17\17\17f\255\253\250\377\353"
+  "\347\340\377\336\331\313\377\332\323\303\377\327\320\276\377\326\317"
+  "\276\377\325\315\274\377\324\314\271\377\36\305\300\227\377\277\277\206"
+  "\377\325\314\221\377wzL\377\323\321\244\377\300\263w\377\271\261\236"
+  "\377\312\301\254\377\310\277\252\377\310\276\250\377\306\275\247\377"
+  "\303\271\242\377\224\213t\377\215\207x\377\34\33\30\377320\347\320\315"
+  "\305\377\351\345\335\377\343\335\322\377\341\333\317\377\336\331\313"
+  "\377\327\320\277\377\324\314\272\377\322\313\270\377\235\242\215\377"
+  "H[@\377IS4\377\245\240_\377\335\322\210\377\252\237{\377\202\310\277"
+  "\252\377&\307\276\250\377\305\274\246\377\304\272\244\377\262\247\214"
+  "\377\203|l\377b_T\377\25\24\22~\31\27\25\353\177xk\373\300\271\250\377"
+  "\322\313\272\377\335\327\312\377\341\334\320\377\337\333\315\377\333"
+  "\325\307\377\326\317\300\377\221\233\210\377UkP\377AW<\377X[I\377\242"
+  "\231x\377\262\251\224\377\310\277\251\377\307\276\250\377\305\274\246"
+  "\377\304\271\243\377\301\267\237\377\236\224{\377\206\200r\37775/\373"
+  "\4\4\3^\0\0\0\0\0\0\0i\32\27\22\315TOC\377\220\210v\377\310\300\255\377"
+  "\331\322\304\377\202\336\331\315\377\16\226\237\223\377w\207s\377ds_"
+  "\377\210\205u\377\262\252\227\377\304\273\245\377\306\275\246\377\305"
+  "\274\245\377\303\271\243\377\302\270\240\377\272\257\226\377xp]\377q"
+  "la\377\35\34\31\314\203\0\0\0\0\25\0\0\0\20\2\2\2V\15\14\12\300+'\40"
+  "\377sl\\\377\242\231\206\377\313\303\261\377pwk\377kxg\377nxk\377\257"
+  "\251\234\377\307\277\254\377\306\275\250\377\304\272\244\377\303\271"
+  "\241\377\302\270\240\377\300\266\236\377\252\237\206\377}vf\377WTJ\377"
+  "\36\35\31C\205\0\0\0\0\23\0\0\0\16\0\0\0H\6\5\4\204\36\34\26\345ID8\377"
+  "PQD\3778B5\377>G<\377\261\254\241\377\326\317\302\377\322\313\272\377"
+  "\312\302\256\377\304\272\243\377\300\266\235\377\276\263\233\377\223"
+  "\212q\377}wj\377*($\362\11\10\7,\210\0\0\0\0\17\0\0\0\30\0\0\0v\5\5\4"
+  "\377\24\26\20\377\30\32\23\377}wh\377\303\274\251\377\322\315\276\377"
+  "\323\315\276\377\317\311\270\377\307\277\253\377\264\251\217\377\207"
+  "\177j\377ql`\377\37\35\32\231\213\0\0\0\0\15\0\0\0I\0\0\0\266\1\1\1\377"
+  "\15\14\12\377A;0\377yr^\377\255\245\215\377\302\273\250\377\307\300\254"
+  "\377\251\237\203\377rk\\\377]YO\377\2\2\2b\214\0\0\0\0\1\0\0\0\14\202"
+  "\0\0\0;\10\0\0\0Y\15\13\11\3210-%\344_XH\377\212\200j\377\212~f\377v"
+  "qc\37731+\377\233\0\0\0\0"};
+
 #ifndef G_PLATFORM_WIN32
 
 #define compare_utf8_filenames(a, b) strcmp(a, b)
@@ -641,10 +746,287 @@
   gtk_widget_grab_default (widget);
   return FALSE;
 }
+
+static void
+popup_deactivate (GtkMenuShell *menu,
+		  gpointer button)
+{
+  g_object_set (button, "active", FALSE, NULL);
+}
+
+static void
+back_menu_activate (GtkWidget *item,
+		    gpointer dp)
+{
+  GtkWidget *fs;
+  GList *nav_history;
+  gint i, l, d;
+  gchar *dir;
+
+  fs = GTK_WIDGET (g_object_get_data (G_OBJECT (item), "fs"));
+  nav_history = g_object_get_data (G_OBJECT (fs), "__nav_history");
+  l = (gint) g_list_length (nav_history);
+  d = GPOINTER_TO_INT (dp);
+  dir = g_strdup_printf ("%s/", (gchar *) g_list_nth_data (nav_history, d));
+
+  for (i = l - 1; i >= d; i--)
+    {
+      GList *nth = g_list_nth (nav_history, i);
+      g_free (nth->data);
+      nav_history = g_list_remove_link (nav_history, nth);
+    }
+  g_object_set_data (G_OBJECT (fs), "__nav_history", nav_history);
+  gtk_file_selection_populate (GTK_FILE_SELECTION (fs), dir, FALSE, FALSE);
+  g_free (dir);
+}
+
+static void
+update_nav_history_popup (GtkWidget *fs)
+{
+  GList *nav_history;
+  GtkWidget *back_dropdown;
+  GtkWidget *menu;
+  guint i, l;
+
+  nav_history = g_object_get_data (G_OBJECT (fs), "__nav_history");
+  back_dropdown = g_object_get_data (G_OBJECT (fs), "__back_dropdown");
+  menu = g_object_get_data (G_OBJECT (back_dropdown), "menu");
+
+  if (menu) gtk_widget_destroy (menu);
+  menu = gtk_menu_new ();
+  l = g_list_length (nav_history);
+  for (i = l - 1; i > 0; i--)
+    {
+      GtkWidget *item;
+
+      item = gtk_menu_item_new_with_label ((gchar *) g_list_nth_data (nav_history,
+					   i - 1));
+      gtk_menu_shell_append (GTK_MENU_SHELL (menu), item);
+      g_object_set_data (G_OBJECT (item), "fs", fs);
+      g_signal_connect (item, "activate", G_CALLBACK (back_menu_activate),
+			GINT_TO_POINTER ((gint) (i - 1)));
+    }
+  gtk_widget_show_all (menu);
+  g_object_set_data (G_OBJECT (back_dropdown), "menu", menu);
+
+  g_signal_connect (menu, "deactivate", G_CALLBACK (popup_deactivate),
+		    back_dropdown);
+}
+
+static void
+back_popup_pos (GtkMenu *menu,
+		gint *x,
+		gint *y,
+		gboolean push_in,
+		GtkWidget *button)
+{
+  gdk_window_get_origin (button->window, x, y);
+  *x += button->allocation.x;
+  *y += button->allocation.y + button->requisition.height - 1;
+}
+
+static gboolean
+back_menu (GtkWidget *button,
+	   GdkEventButton *event,
+	   gpointer data)
+{
+  GtkWidget *menu;
+
+  if (event->button != 1) return FALSE;
+  g_object_set (button, "active", TRUE, NULL);
+  menu = g_object_get_data (G_OBJECT (button), "menu");
+  gtk_menu_popup (GTK_MENU (menu), NULL, NULL,
+		  (GtkMenuPositionFunc) back_popup_pos, button,
+		  1, event->time);
+  return TRUE;
+}
+
+static void
+bookmarks_item_clicked (GtkWidget *widget,
+			gchar *dir)
+{
+  GtkFileSelection *fs = GTK_FILE_SELECTION (g_object_get_data (G_OBJECT (widget), "fs"));
+  gchar *realDir;
+
+  realDir = g_strdup_printf ("%s/", dir);
+  gtk_file_selection_populate (fs, realDir, FALSE, FALSE);
+  g_free (realDir);
+}
+
+static void
+bookmarks_popup_pos (GtkMenu *menu,
+		     gint *x,
+		     gint *y,
+		     gboolean push_in,
+		     GtkWidget *button)
+{
+  gdk_window_get_origin (button->window, x, y);
+  *x += button->allocation.x;
+  *y += button->allocation.y + button->requisition.height - 1;
+}
+
+static gboolean
+bookmarks_popup (GtkWidget *widget,
+		 GdkEventButton *event,
+		 GtkMenu *menu)
+{
+  if (event->button != 1) return FALSE;
+  g_object_set (widget, "active", TRUE, NULL);
+  gtk_menu_popup (menu, NULL, NULL,
+		  (GtkMenuPositionFunc) bookmarks_popup_pos, widget,
+		  1, event->time);
+  return TRUE;
+}
+
+static void
+bookmarks_add (GtkWidget *item, GtkWidget *bookmarks_button)
+{
+  GtkWidget *fs = gtk_widget_get_toplevel (bookmarks_button);
+  gchar *filename;
+  GIOChannel *io;
+
+  filename = g_strdup_printf ("%s/.gtk-bookmarks", g_get_home_dir ());
+  io = g_io_channel_new_file (filename, "a", NULL);
+  if (io)
+    {
+      GList *nav_history;
+      gchar *dir;
+
+      nav_history = g_object_get_data (G_OBJECT (fs), "__nav_history");
+      dir = (gchar *) g_list_last (nav_history)->data;
+      g_io_channel_write_chars (io, dir, strlen (dir), NULL, NULL);
+      g_io_channel_write_chars (io, "\n", strlen ("\n"), NULL, NULL);
+      g_io_channel_shutdown (io, TRUE, NULL);
+      g_io_channel_unref (io);
+
+      reload_bookmarks (bookmarks_button, fs);
+    }
+  else
+    {
+      GtkWidget *dialog;
+
+      dialog = gtk_message_dialog_new (GTK_WINDOW (fs),
+			      GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL,
+			      GTK_MESSAGE_ERROR,
+			      GTK_BUTTONS_OK,
+			      "Unable to write to %s", filename);
+      g_signal_connect (dialog, "response", G_CALLBACK (gtk_widget_destroy), NULL);
+      gtk_widget_show (dialog);
+    }
+  g_free (filename);
+}
+
+static void
+bookmarks_edit (GtkWidget *item,
+		GtkWidget *bookmarks_button)
+{
+  GtkWidget *fs = gtk_widget_get_toplevel (bookmarks_button);
+  GtkWidget *dialog;
+  gchar *filename;
+
+  filename = g_strdup_printf ("%s/.gtk-bookmarks", g_get_home_dir ());
+  dialog = gtk_message_dialog_new (GTK_WINDOW (fs),
+			      GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL,
+			      GTK_MESSAGE_INFO,
+			      GTK_BUTTONS_OK,
+			      "The bookmark editor hasn't been implemented yet.\n"
+			      "Please open your favorite text editor and edit:\n"
+			      "%s", filename);
+  gtk_container_set_border_width (GTK_CONTAINER (dialog), 8);
+  g_signal_connect (dialog, "response", G_CALLBACK (gtk_widget_destroy), NULL);
+  gtk_widget_show (dialog);
+  g_free (filename);
+}
+
+static void
+reload_bookmarks (GtkWidget *bookmarks_button, GtkWidget *fs)
+{
+  GtkWidget *menu, *add, *edit;
+  GtkTooltips *tips = NULL;
+  gchar *filename;
+  GIOChannel *io;
+  gulong signal;
+
+  /* Destroy the previous menu */
+  menu = g_object_get_data (G_OBJECT (fs), "__bookmarks");
+  if (menu)
+      gtk_widget_destroy (menu);
+  signal = (gulong) GPOINTER_TO_INT (g_object_get_data (G_OBJECT (fs), "__bookmarks_signal"));
+  if (signal > 0)
+      g_signal_handler_disconnect (bookmarks_button, signal);
+
+
+  /* Create the menu */
+  menu = gtk_menu_new ();
+  gtk_menu_set_title (GTK_MENU (menu), _("Bookmarks"));
+  add = gtk_menu_item_new_with_mnemonic (_("_Add to bookmarks"));
+  edit = gtk_menu_item_new_with_mnemonic (_("_Edit bookmarks..."));
+  gtk_menu_shell_append (GTK_MENU_SHELL (menu), add);
+  gtk_menu_shell_append (GTK_MENU_SHELL (menu), edit);
+
+  g_signal_connect (add, "activate", G_CALLBACK (bookmarks_add),
+		    bookmarks_button);
+  g_signal_connect (edit, "activate", G_CALLBACK (bookmarks_edit),
+		    bookmarks_button);
+
+  tips = gtk_tooltips_new ();
+  g_signal_connect_swapped (menu, "destroy", G_CALLBACK (gtk_object_destroy), tips);
+
+  /* Load the bookmark file */
+  filename = g_strdup_printf ("%s/.gtk-bookmarks", g_get_home_dir ());
+  io = g_io_channel_new_file (filename, "r", NULL);
+  if (io)
+    {
+      gchar *dir;
+      gsize term;
+
+      gtk_menu_shell_append (GTK_MENU_SHELL (menu),
+			     gtk_menu_item_new ());
+      while (g_io_channel_read_line (io, &dir, NULL, &term, NULL) == G_IO_STATUS_NORMAL)
+        {
+	  GtkWidget *item;
+
+	  if (dir[strlen (dir) - 1] == 10)
+	      dir[strlen (dir) - 1] = 0;
+          if (strlen (dir) == 0)
+            {
+	      g_free (dir);
+	      continue;
+            }
+
+	  item = gtk_menu_item_new_with_label (g_basename (dir));
+	  gtk_tooltips_set_tip (tips, item, dir, NULL);
+	  g_object_set_data (G_OBJECT (item), "fs", fs);
+	  g_signal_connect (item, "activate", G_CALLBACK (bookmarks_item_clicked),
+			    dir);
+	  g_signal_connect_swapped (item, "destroy", G_CALLBACK (g_free), dir);
+	  gtk_menu_shell_append (GTK_MENU_SHELL (menu), item);
+        }
+
+      g_io_channel_shutdown (io, TRUE, NULL);
+      g_io_channel_unref (io);
+    }
+  g_free (filename);
+
+
+  gtk_widget_show_all (menu);
+  signal = g_signal_connect (bookmarks_button, "button-press-event",
+			     G_CALLBACK (bookmarks_popup), menu);
+  g_signal_connect (menu, "deactivate", G_CALLBACK (popup_deactivate),
+		    bookmarks_button);
+  g_object_set_data (G_OBJECT (fs), "__bookmarks", menu);
+  g_object_set_data (G_OBJECT (fs), "__bookmarks_signal", GINT_TO_POINTER ((int) signal));
+}
      
 static void
 gtk_file_selection_init (GtkFileSelection *filesel)
 {
+  GtkWidget *toolbar;
+  GtkWidget *back;
+  GtkWidget *back_dropdown;
+  GtkWidget *back_dropdown_arrow;
+  GtkWidget *bookmarks;
+  GtkWidget *bookmarks_icon;
   GtkWidget *entry_vbox;
   GtkWidget *label;
   GtkWidget *list_hbox, *list_container;
@@ -652,11 +1034,11 @@
   GtkWidget *pulldown_hbox;
   GtkWidget *scrolled_win;
   GtkWidget *eventbox;
-  GtkWidget *spacer;
   GtkDialog *dialog;
 
   GtkListStore *model;
   GtkTreeViewColumn *column;
+  GParamSpec *action_area_border;
   
   gtk_widget_push_composite_child ();
 
@@ -666,17 +1048,69 @@
 
   /* The dialog-sized vertical box  */
   filesel->main_vbox = dialog->vbox;
-  gtk_container_set_border_width (GTK_CONTAINER (filesel), 10);
+  gtk_box_set_spacing (GTK_BOX (dialog->vbox), 12);
+  gtk_container_set_border_width (GTK_CONTAINER (filesel), 12);
+
+  /* The toolbar */
+  toolbar = gtk_toolbar_new ();
+  gtk_toolbar_set_style (GTK_TOOLBAR (toolbar), GTK_TOOLBAR_ICONS);
+  g_object_set_data (G_OBJECT (filesel), "__toolbar", toolbar);
+  gtk_box_pack_start (GTK_BOX (filesel->main_vbox), toolbar,
+		      FALSE, FALSE, 0);
+
+  back = gtk_toolbar_insert_stock (GTK_TOOLBAR (toolbar),
+				   GTK_STOCK_GO_BACK,
+				   _("Go to the previous visited location"), NULL,
+				   G_CALLBACK (gtk_file_selection_back), filesel, -1);
+  g_object_set_data (G_OBJECT (filesel), "__back", back);
+
+  back_dropdown = gtk_toggle_button_new ();
+  gtk_button_set_relief (GTK_BUTTON (back_dropdown), GTK_RELIEF_NONE);
+  GTK_WIDGET_UNSET_FLAGS (back_dropdown, GTK_CAN_FOCUS);
+  back_dropdown_arrow = gtk_arrow_new (GTK_ARROW_DOWN, GTK_SHADOW_IN);
+  gtk_widget_set_size_request (back_dropdown_arrow, 10, 24);
+  gtk_container_add (GTK_CONTAINER (back_dropdown), back_dropdown_arrow);
+  gtk_toolbar_append_widget (GTK_TOOLBAR (toolbar), back_dropdown, NULL, NULL);
+  g_object_set_data (G_OBJECT (filesel), "__back_dropdown", back_dropdown);
+  g_signal_connect (back_dropdown, "button-press-event",
+		    G_CALLBACK (back_menu), NULL);
+
+  gtk_toolbar_insert_stock (GTK_TOOLBAR (toolbar),
+			   GTK_STOCK_GO_UP,
+			   _("Go to the parent directory"), NULL,
+			   G_CALLBACK (gtk_file_selection_up), filesel, -1);
+  gtk_toolbar_insert_stock (GTK_TOOLBAR (toolbar),
+			   GTK_STOCK_REFRESH,
+			   _("Display the latest contents of the current location"), NULL,
+			   G_CALLBACK (gtk_file_selection_refresh), filesel, -1);
+  gtk_toolbar_insert_space (GTK_TOOLBAR (toolbar), -1);
+  gtk_toolbar_insert_stock (GTK_TOOLBAR (toolbar),
+			   GTK_STOCK_HOME,
+			   _("Go to the home location"), NULL,
+			   G_CALLBACK (gtk_file_selection_home), filesel, -1);
+  bookmarks = gtk_toggle_button_new ();
+  gtk_button_set_relief (GTK_BUTTON (bookmarks), GTK_RELIEF_NONE);
+  GTK_WIDGET_UNSET_FLAGS (bookmarks, GTK_CAN_FOCUS);
+  bookmarks_icon = gtk_image_new_from_stock (GTK_STOCK_JUMP_TO, GTK_ICON_SIZE_LARGE_TOOLBAR);
+  gtk_container_add (GTK_CONTAINER (bookmarks), bookmarks_icon);
+  gtk_toolbar_append_widget (GTK_TOOLBAR (toolbar), bookmarks, _("Bookmarks"), NULL);
+
+  gtk_toolbar_insert_space (GTK_TOOLBAR (toolbar), -1);
+
+  gtk_widget_realize (bookmarks);
+  reload_bookmarks (bookmarks, GTK_WIDGET (filesel));
+
 
   /* The horizontal box containing create, rename etc. buttons */
   filesel->button_area = gtk_hbutton_box_new ();
   gtk_button_box_set_layout (GTK_BUTTON_BOX (filesel->button_area), GTK_BUTTONBOX_START);
   gtk_box_set_spacing (GTK_BOX (filesel->button_area), 0);
-  gtk_box_pack_start (GTK_BOX (filesel->main_vbox), filesel->button_area, 
-		      FALSE, FALSE, 0);
+  gtk_toolbar_append_widget (GTK_TOOLBAR (toolbar), filesel->button_area, NULL, NULL);
   gtk_widget_show (filesel->button_area);
-  
+  gtk_widget_show_all (toolbar);
+
   gtk_file_selection_show_fileop_buttons (filesel);
+  gtk_container_set_border_width (GTK_CONTAINER (dialog), 12);
 
   /* hbox for pulldown menu */
   pulldown_hbox = gtk_hbox_new (TRUE, 5);
@@ -690,13 +1124,8 @@
 		      FALSE, FALSE, 0);
     
   /*  The horizontal box containing the directory and file listboxes  */
-
-  spacer = gtk_hbox_new (FALSE, 0);
-  gtk_widget_set_size_request (spacer, -1, 5);
-  gtk_box_pack_start (GTK_BOX (filesel->main_vbox), spacer, FALSE, FALSE, 0);
-  gtk_widget_show (spacer);
   
-  list_hbox = gtk_hbox_new (FALSE, 5);
+  list_hbox = gtk_hbox_new (FALSE, 6);
   gtk_box_pack_start (GTK_BOX (filesel->main_vbox), list_hbox, TRUE, TRUE, 0);
   gtk_widget_show (list_hbox);
   if (WANT_HPANED)
@@ -707,11 +1136,6 @@
 				   NULL);
   else
     list_container = list_hbox;
-
-  spacer = gtk_hbox_new (FALSE, 0);
-  gtk_widget_set_size_request (spacer, -1, 5);
-  gtk_box_pack_start (GTK_BOX (filesel->main_vbox), spacer, FALSE, FALSE, 0);  
-  gtk_widget_show (spacer);
   
   /* The directories list */
 
@@ -793,6 +1217,10 @@
   
   /*  The OK/Cancel button area */
   confirm_area = dialog->action_area;
+  action_area_border = gtk_widget_class_find_style_property (
+				GTK_WIDGET_GET_CLASS (dialog),
+				"action_area_border");
+  G_PARAM_SPEC_INT (action_area_border)->default_value = 0;  
 
   /*  The Cancel button  */
   filesel->cancel_button = gtk_dialog_add_button (dialog,
@@ -854,6 +1282,7 @@
   gtk_widget_grab_focus (filesel->selection_entry);
 
   gtk_widget_pop_composite_child ();
+  gtk_file_selection_update_fileops (filesel);
 }
 
 static gchar *
@@ -1099,39 +1528,46 @@
 void
 gtk_file_selection_show_fileop_buttons (GtkFileSelection *filesel)
 {
+  GtkToolbar *toolbar;
+
   g_return_if_fail (GTK_IS_FILE_SELECTION (filesel));
-    
+
+  toolbar = GTK_TOOLBAR (g_object_get_data (G_OBJECT (filesel),
+			 "__toolbar"));
+
   /* delete, create directory, and rename */
   if (!filesel->fileop_c_dir) 
     {
-      filesel->fileop_c_dir = gtk_button_new_with_mnemonic (_("_New Folder"));
-      g_signal_connect (filesel->fileop_c_dir, "clicked",
-			G_CALLBACK (gtk_file_selection_create_dir),
-			filesel);
-      gtk_box_pack_start (GTK_BOX (filesel->button_area), 
-			  filesel->fileop_c_dir, TRUE, TRUE, 0);
+      GdkPixbuf *icon;
+
+      icon = gdk_pixbuf_new_from_inline (sizeof (new_folder_icon),
+					 (const guint8 *) new_folder_icon,
+					 FALSE, NULL);
+      filesel->fileop_c_dir = gtk_toolbar_append_item (toolbar,
+			_("New Folder"),
+			_("Create a new empty folder inside this folder"), NULL,
+			gtk_image_new_from_pixbuf (icon),
+			G_CALLBACK (gtk_file_selection_create_dir), filesel);
       gtk_widget_show (filesel->fileop_c_dir);
     }
 	
   if (!filesel->fileop_del_file) 
     {
-      filesel->fileop_del_file = gtk_button_new_with_mnemonic (_("De_lete File"));
-      g_signal_connect (filesel->fileop_del_file, "clicked",
-			G_CALLBACK (gtk_file_selection_delete_file),
-			filesel);
-      gtk_box_pack_start (GTK_BOX (filesel->button_area), 
-			  filesel->fileop_del_file, TRUE, TRUE, 0);
+      filesel->fileop_del_file = gtk_toolbar_insert_stock (toolbar,
+      			"gtk-delete",
+			"Delete selected item", NULL,
+      			G_CALLBACK (gtk_file_selection_delete_file), filesel,
+			-1);
       gtk_widget_show (filesel->fileop_del_file);
     }
 
   if (!filesel->fileop_ren_file)
     {
-      filesel->fileop_ren_file = gtk_button_new_with_mnemonic (_("_Rename File"));
-      g_signal_connect (filesel->fileop_ren_file, "clicked",
-			G_CALLBACK (gtk_file_selection_rename_file),
-			filesel);
-      gtk_box_pack_start (GTK_BOX (filesel->button_area), 
-			  filesel->fileop_ren_file, TRUE, TRUE, 0);
+      filesel->fileop_ren_file = gtk_toolbar_append_item (toolbar,
+      			_("Rename"), _("Rename selected file"), NULL,
+      			gtk_image_new_from_stock ("gtk-convert",
+				gtk_toolbar_get_icon_size (toolbar)),
+			G_CALLBACK (gtk_file_selection_rename_file), filesel);
       gtk_widget_show (filesel->fileop_ren_file);
     }
   
@@ -1144,7 +1580,7 @@
 gtk_file_selection_hide_fileop_buttons (GtkFileSelection *filesel)
 {
   g_return_if_fail (GTK_IS_FILE_SELECTION (filesel));
-    
+  
   if (filesel->fileop_ren_file)
     {
       gtk_widget_destroy (filesel->fileop_ren_file);
@@ -1274,7 +1710,7 @@
 gtk_file_selection_destroy (GtkObject *object)
 {
   GtkFileSelection *filesel;
-  GList *list;
+  GList *list, *nav_history;
   HistoryCallbackArg *callback_arg;
   
   g_return_if_fail (GTK_IS_FILE_SELECTION (object));
@@ -1319,6 +1755,10 @@
       filesel->last_selected = NULL;
     }
 
+  nav_history = g_object_get_data (G_OBJECT (filesel), "__nav_history");
+  g_list_free (nav_history);
+  g_object_set_data (G_OBJECT (filesel), "__nav_history", NULL);
+
   GTK_OBJECT_CLASS (parent_class)->destroy (object);
 }
 
@@ -1399,6 +1839,56 @@
 }
 
 static void
+gtk_file_selection_back (GtkWidget *widget,
+			 gpointer data)
+{
+  GtkFileSelection *fs = data;
+  GList *nav_history;
+  gchar *last_dir;
+  guint l;
+
+  nav_history = g_object_get_data (G_OBJECT (fs), "__nav_history");
+  l = g_list_length (nav_history);
+  if (l >= 2)
+    {
+      last_dir = g_strdup_printf ("%s/", (gchar *) g_list_nth_data (nav_history, l - 2));
+      g_free (g_list_nth_data (nav_history, l - 1));
+      g_free (g_list_nth_data (nav_history, l - 2));
+      nav_history = g_list_remove_link (nav_history, g_list_nth (nav_history, l - 1));
+      nav_history = g_list_remove_link (nav_history, g_list_nth (nav_history, l - 2));
+
+      g_object_set_data (G_OBJECT (fs), "__nav_history", nav_history);
+      gtk_file_selection_populate (fs, last_dir, FALSE, FALSE);
+      g_free (last_dir);
+      update_nav_history_popup (GTK_WIDGET (fs));
+    }
+}
+
+static void
+gtk_file_selection_up (GtkWidget *widget,
+			 gpointer data)
+{
+  GtkFileSelection *fs = data;
+  gtk_file_selection_populate (fs, "../", FALSE, FALSE);
+}
+
+static void
+gtk_file_selection_refresh (GtkWidget *widget,
+			    gpointer data)
+{
+  GtkFileSelection *fs = data;
+  gtk_file_selection_populate (fs, "./", FALSE, FALSE);
+}
+
+static void
+gtk_file_selection_home (GtkWidget *widget,
+			 gpointer data)
+{
+  GtkFileSelection *fs = data;
+  gtk_file_selection_populate (fs, "~/", FALSE, FALSE);
+}
+
+static void
 gtk_file_selection_create_dir_confirmed (GtkWidget *widget,
 					 gpointer   data)
 {
@@ -1454,6 +1944,7 @@
   GtkWidget *label;
   GtkWidget *dialog;
   GtkWidget *vbox;
+  GtkWidget *spacer;
   GtkWidget *button;
 
   g_return_if_fail (GTK_IS_FILE_SELECTION (fs));
@@ -1470,6 +1961,7 @@
   gtk_window_set_title (GTK_WINDOW (dialog), _("New Folder"));
   gtk_window_set_position (GTK_WINDOW (dialog), GTK_WIN_POS_MOUSE);
   gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (fs));
+  gtk_container_set_border_width (GTK_CONTAINER (dialog), 12);
 
   /* If file dialog is grabbed, grab option dialog */
   /* When option dialog is closed, file dialog will be grabbed again */
@@ -1477,7 +1969,6 @@
       gtk_window_set_modal (GTK_WINDOW (dialog), TRUE);
 
   vbox = gtk_vbox_new (FALSE, 0);
-  gtk_container_set_border_width (GTK_CONTAINER (vbox), 8);
   gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->vbox), vbox,
 		     FALSE, FALSE, 0);
   gtk_widget_show( vbox);
@@ -1491,9 +1982,14 @@
   fs->fileop_entry = gtk_entry_new ();
   gtk_label_set_mnemonic_widget (GTK_LABEL (label), fs->fileop_entry);
   gtk_box_pack_start (GTK_BOX (vbox), fs->fileop_entry, 
-		      TRUE, TRUE, 5);
+		      TRUE, TRUE, 0);
   GTK_WIDGET_SET_FLAGS (fs->fileop_entry, GTK_CAN_DEFAULT);
   gtk_widget_show (fs->fileop_entry);
+
+  spacer = gtk_hbox_new (FALSE, 0);
+  gtk_widget_set_size_request (spacer, -1, 12);
+  gtk_box_pack_start (GTK_BOX (vbox), spacer, FALSE, FALSE, 0);
+  gtk_widget_show (spacer);
   
   /* buttons */
   button = gtk_button_new_from_stock (GTK_STOCK_CANCEL);
@@ -1516,12 +2012,15 @@
   g_signal_connect (fs->fileop_entry, "changed",
                     G_CALLBACK (gtk_file_selection_fileop_entry_changed),
 		    button);
+  g_signal_connect_swapped (fs->fileop_entry, "activate",
+			    G_CALLBACK (gtk_button_clicked),
+			    button);
 
   gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->action_area),
 		     button, TRUE, TRUE, 0);
   GTK_WIDGET_SET_FLAGS (button, GTK_CAN_DEFAULT);
   gtk_widget_show (button);
-  
+
   gtk_widget_show (dialog);
 }
 
@@ -1618,6 +2117,8 @@
 		    fs);
   gtk_window_set_title (GTK_WINDOW (dialog), _("Delete File"));
   gtk_window_set_position (GTK_WINDOW (dialog), GTK_WIN_POS_MOUSE);
+  gtk_container_set_border_width (GTK_CONTAINER (dialog), 12);
+  gtk_box_set_spacing (GTK_BOX (GTK_DIALOG (dialog)->vbox), 12);
   
   /* buttons */
   gtk_dialog_add_buttons (GTK_DIALOG (dialog),
@@ -1717,6 +2218,7 @@
   GtkWidget *label;
   GtkWidget *dialog;
   GtkWidget *vbox;
+  GtkWidget *spacer;
   GtkWidget *button;
   gchar *buf;
   
@@ -1738,6 +2240,7 @@
   gtk_window_set_title (GTK_WINDOW (dialog), _("Rename File"));
   gtk_window_set_position (GTK_WINDOW (dialog), GTK_WIN_POS_MOUSE);
   gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (fs));
+  gtk_container_set_border_width (GTK_CONTAINER (dialog), 12);  
 
   /* If file dialog is grabbed, grab option dialog */
   /* When option dialog  closed, file dialog will be grabbed again */
@@ -1745,7 +2248,7 @@
     gtk_window_set_modal (GTK_WINDOW (dialog), TRUE);
   
   vbox = gtk_vbox_new (FALSE, 0);
-  gtk_container_set_border_width (GTK_CONTAINER (vbox), 8);
+  gtk_container_set_border_width (GTK_CONTAINER (vbox), 0);
   gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->vbox), vbox,
 		      FALSE, FALSE, 0);
   gtk_widget_show(vbox);
@@ -1753,7 +2256,7 @@
   buf = g_strdup_printf (_("Rename file \"%s\" to:"), fs->fileop_file);
   label = gtk_label_new (buf);
   gtk_misc_set_alignment (GTK_MISC (label), 0.0, 0.0);
-  gtk_box_pack_start (GTK_BOX (vbox), label, FALSE, FALSE, 5);
+  gtk_box_pack_start (GTK_BOX (vbox), label, FALSE, FALSE, 0);
   gtk_widget_show (label);
   g_free (buf);
 
@@ -1768,6 +2271,11 @@
   gtk_editable_select_region (GTK_EDITABLE (fs->fileop_entry),
 			      0, strlen (fs->fileop_file));
 
+  spacer = gtk_hbox_new (FALSE, 0);
+  gtk_widget_set_size_request (spacer, -1, 12);
+  gtk_box_pack_start (GTK_BOX (vbox), spacer, FALSE, FALSE, 0);
+  gtk_widget_show (spacer);
+
   /* buttons */
   button = gtk_button_new_from_stock (GTK_STOCK_CANCEL);
   g_signal_connect_swapped (button, "clicked",
@@ -1788,6 +2296,9 @@
   g_signal_connect (fs->fileop_entry, "changed",
 		    G_CALLBACK (gtk_file_selection_fileop_entry_changed),
 		    button);
+  g_signal_connect_swapped (fs->fileop_entry, "activate",
+			    G_CALLBACK (gtk_button_clicked),
+			    button);
 
   gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->action_area),
 		      button, TRUE, TRUE, 0);
@@ -1898,8 +2409,8 @@
 {
   HistoryCallbackArg *callback_arg;
   GtkWidget *menu_item;
-  GList *list;
-  gchar *current_dir;
+  GList *list, *nav_history;
+  gchar *current_dir, *last_dir;
   gint dir_len;
   gint i;
   
@@ -1971,6 +2482,14 @@
   gtk_option_menu_set_menu (GTK_OPTION_MENU (fs->history_pulldown), 
 			    fs->history_menu);
   g_free (current_dir);
+
+  nav_history = g_object_get_data (G_OBJECT (fs), "__nav_history");
+  if (nav_history)
+      last_dir = (gchar *) g_list_last (nav_history)->data;
+  if (!nav_history || strcmp (last_dir, current_directory) != 0)
+      nav_history = g_list_append (nav_history, g_strdup (current_directory));
+  g_object_set_data (G_OBJECT (fs), "__nav_history", nav_history);
+  update_nav_history_popup (GTK_WIDGET (fs));
 }
 
 static gchar *
@@ -2127,12 +2646,6 @@
   gtk_list_store_clear (dir_model);
   gtk_list_store_clear (file_model);
 
-  /* Set the dir list to include ./ and ../ */
-  gtk_list_store_append (dir_model, &iter);
-  gtk_list_store_set (dir_model, &iter, DIR_COLUMN, "." G_DIR_SEPARATOR_S, -1);
-  gtk_list_store_append (dir_model, &iter);
-  gtk_list_store_set (dir_model, &iter, DIR_COLUMN, ".." G_DIR_SEPARATOR_S, -1);
-
   while (poss)
     {
       if (cmpl_is_a_completion (poss))
@@ -2229,7 +2742,15 @@
 
       if (fs->history_pulldown) 
 	{
+	  GList *nav_history;
+	  GtkWidget *back_button;
+
 	  gtk_file_selection_update_history_menu (fs, cmpl_reference_position (cmpl_state));
+	  nav_history = g_object_get_data (G_OBJECT (fs), "__nav_history");
+	  back_button = GTK_WIDGET (g_object_get_data (G_OBJECT (fs), "__back"));
+	  gtk_widget_set_sensitive (back_button, g_list_length (nav_history) >= 2);
+	  back_button = GTK_WIDGET (g_object_get_data (G_OBJECT (fs), "__back_dropdown"));
+	  gtk_widget_set_sensitive (back_button, g_list_length (nav_history) >= 2);
 	}
       
     }
--- gtk+-2.2.1-original/gtk/gtktoolbar.c	Thu Jan 30 22:56:36 2003
+++ gtk+-2.2.1/gtk/gtktoolbar.c	Wed Mar 12 17:58:55 2003
@@ -42,7 +42,7 @@
 #include "gtkmarshalers.h"
 
 
-#define DEFAULT_IPADDING 0
+#define DEFAULT_IPADDING 1
 #define DEFAULT_SPACE_SIZE  5
 #define DEFAULT_SPACE_STYLE GTK_TOOLBAR_SPACE_LINE
 
@@ -284,7 +284,7 @@
                                                               _("Shadow type"),
                                                               _("Style of bevel around the toolbar"),
                                                               GTK_TYPE_SHADOW_TYPE,
-                                                              GTK_SHADOW_OUT,
+                                                              GTK_SHADOW_NONE,
                                                               G_PARAM_READABLE));
 
   gtk_settings_install_property (g_param_spec_enum ("gtk-toolbar-style",

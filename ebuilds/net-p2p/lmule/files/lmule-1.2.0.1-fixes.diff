diff -Naurp lmule-1.2.0.1/src/BaseClient.cpp lmule/src/BaseClient.cpp
--- lmule-1.2.0.1/src/BaseClient.cpp	2003-04-11 01:31:19.000000000 +0200
+++ lmule/src/BaseClient.cpp	2003-04-25 05:19:38.000000000 +0200
@@ -235,22 +235,30 @@ void CUpDownClient::ProcessHelloTypePack
 	data->Read(&m_nUserPort,2); // hmm clientport is sent twice - why?
 	uint32	tagcount;
 	data->Read(&tagcount,4);
-	for (int i = 0;i != tagcount; i++){
-		CTag* temptag = new CTag(data);
-		switch(temptag->tag->specialtag){
-			case CT_NAME:
-				if (m_pszUsername)
-					delete[] m_pszUsername;
-				m_pszUsername = nstrdup(temptag->tag->stringvalue);
-				break;
-			case CT_VERSION:
-				m_nClientVersion = temptag->tag->intvalue;
-				break;
-			case CT_PORT:
-				m_nUserPort = temptag->tag->intvalue;
-				break;
+
+/* 
+It seems that sometimes tagcount can return negative value, causing endless loop 
+here. This check should avoid it. 
+*/
+
+	if ((tagcount>0) && (tagcount<1000)) {
+		for (int i = 0;i != tagcount; i++){
+			CTag* temptag = new CTag(data);
+			switch(temptag->tag->specialtag){
+				case CT_NAME:
+					if (m_pszUsername)
+						delete[] m_pszUsername;
+					m_pszUsername = nstrdup(temptag->tag->stringvalue);
+					break;
+				case CT_VERSION:
+					m_nClientVersion = temptag->tag->intvalue;
+					break;
+				case CT_PORT:
+					m_nUserPort = temptag->tag->intvalue;
+					break;
+			}
+			delete temptag;
 		}
-		delete temptag;
 	}
 	data->Read(&m_dwServerIP,4);
 	data->Read(&m_nServerPort,2);
diff -Naurp lmule-1.2.0.1/src/DownloadListCtrl.cpp lmule/src/DownloadListCtrl.cpp
--- lmule-1.2.0.1/src/DownloadListCtrl.cpp	2003-04-21 07:44:54.000000000 +0200
+++ lmule/src/DownloadListCtrl.cpp	2003-04-21 22:06:09.000000000 +0200
@@ -96,7 +96,7 @@ END_EVENT_TABLE()
 }
 
 //IMPLEMENT_DYNAMIC(CDownloadListCtrl, CListBox)
-CDownloadListCtrl::CDownloadListCtrl() 
+CDownloadListCtrl::CDownloadListCtrl()
   : m_ImageList(170,16)
 {
 	//m_ImageList=new wxImageList(colWidth,16);
@@ -138,7 +138,7 @@ void CDownloadListCtrl::InitSort()
   int sortItem = theApp.glob_prefs->GetColumnSortItem(CPreferences::tableDownload);
   bool sortAscending = theApp.glob_prefs->GetColumnSortAscending(CPreferences::tableDownload);
   SetSortArrow(sortItem, sortAscending);
-  SortItems(SortProc, sortItem + (sortAscending ? 0:10));	
+  SortItems(SortProc, sortItem + (sortAscending ? 0:100));	
 }
 
 CDownloadListCtrl::~CDownloadListCtrl(){
diff -Naurp lmule-1.2.0.1/src/EMSocket.cpp lmule/src/EMSocket.cpp
--- lmule-1.2.0.1/src/EMSocket.cpp	2003-03-17 23:29:01.000000000 +0100
+++ lmule/src/EMSocket.cpp	2003-04-25 12:45:24.000000000 +0200
@@ -453,12 +453,10 @@ int CEMSocket::Send(char* lpBuf,int nBuf
     if (tosend > MAXFRAGSIZE)
       tosend = MAXFRAGSIZE;
     assert (tosend != 0);
-    if(Ok()) {
-      signal(SIGPIPE,SIG_IGN);
-      wxSocketBase::Write(sendbuffer+sent,tosend);
-    } else {
-      return -1;
-    }
+    
+    signal(SIGPIPE,SIG_IGN);
+    wxSocketBase::Write(sendbuffer+sent,tosend);
+
     uint32 result=LastCount();
     //if (result == (uint32)-1){
     if(Error()) {
@@ -480,6 +478,7 @@ int CEMSocket::Send(char* lpBuf,int nBuf
       sendblen = 0;
       break;
     }
+
   }
   return 0;
 }
diff -Naurp lmule-1.2.0.1/src/SearchList.cpp lmule/src/SearchList.cpp
--- lmule-1.2.0.1/src/SearchList.cpp	2003-04-10 23:58:23.000000000 +0200
+++ lmule/src/SearchList.cpp	2003-04-25 12:27:52.000000000 +0200
@@ -22,30 +22,45 @@
 
 #include "wx/xrc/xmlres.h"
 #include "wx/xrc/xh_all.h"
+// This is a global variable for checking if packets are OK or not.
+int packetcheck;
 
 CSearchFile::CSearchFile(CFile* in_data,uint32 nSearchID){
-	
+
 	m_nSearchID = nSearchID;
 	in_data->Read(&m_abyFileHash,16);
 	in_data->Read(&clientip,4);
 	in_data->Read(&clientport,2);
 	uint32 tagcount;
 	in_data->Read(&tagcount,4);
-	for (int i = 0;i != tagcount; i++){
-		CTag* toadd = new CTag(in_data);
-		taglist.Add(toadd);
+/*
+For some reason, sometimes (on some certain search queries like 'crack' 'pgp'
+'cdrwin' 'C#' 'windows' etc, tagcount returned a buggy (HUGE) value, causing endless loop
+here. Therefore adding check to assure tagcount is >0 and <10 before entering this loop.
+*/
+//	printf("DEBUG: TagCount: %u IP: %d.%d.%d.%d PORT: %d\n",tagcount, clientip[0], clientip[1], clientip[2], clientip[3], clientport);
+	if ((tagcount>0) && (tagcount<10)) {
+//		printf("---- Packet OK ---- Tagcount: %u\n", tagcount);
+		for (int i=0; i<tagcount; i++){
+			CTag* toadd = new CTag(in_data);
+			taglist.Add(toadd);
+		}
+		int iSize = 2;
+		char* tempName = GetStrTagValue(FT_FILENAME);
+		if( tempName != NULL && (strlen(tempName)>0) )
+			iSize = (int)strlen(tempName)+1;
+		m_pszFileName = new char[iSize];
+		if (tempName == NULL)
+			strcpy(m_pszFileName,"?");
+		else
+			strcpy(m_pszFileName,tempName);
+		m_nFileSize = GetIntTagValue(FT_FILESIZE);
+		packetcheck=TRUE;
+	}
+	else {
+		packetcheck=FALSE;
+//		printf("######## Buggy packet! ######## Tagcount:%u\n",tagcount);
 	}
-
-	int iSize = 2;
-	char* tempName = GetStrTagValue(FT_FILENAME);
-	if( tempName != NULL && (strlen(tempName)>0) )
-		iSize = (int)strlen(tempName)+1;
-	m_pszFileName = new char[iSize];
-	if (tempName == NULL)
-		strcpy(m_pszFileName,"?");
-	else
-		strcpy(m_pszFileName,tempName);
-	m_nFileSize = GetIntTagValue(FT_FILESIZE);
 }
 
 CSearchFile::~CSearchFile(){
@@ -65,7 +80,7 @@ uint32 CSearchFile::GetIntTagValue(uint8
 char* CSearchFile::GetStrTagValue(uint8 tagname){
 	for (int i = 0; i != taglist.GetSize(); i++){
 		if (taglist[i]->tag->specialtag == tagname)
-			return taglist[i]->tag->stringvalue;			
+			return taglist[i]->tag->stringvalue;
 	}
 	return 0;
 }
@@ -163,18 +178,19 @@ uint16 CSearchList::ProcessSearchanswer(
 	if (Sender)
 		theApp.emuledlg->searchwnd.CreateNewTab(CString(Sender->GetUserName()),(uint32)Sender);
 #endif
-
 	uint32 results;
 	packet->Read(&results,4);
-
 	uint32 mySearchID=( (Sender != NULL)? (uint32)Sender : m_nCurrentSearch);
 	foundFilesCount.SetAt(mySearchID,0);
-
 	for (int i = 0; i != results; i++){
 		CSearchFile* toadd = new CSearchFile(packet, mySearchID);
-		AddToList(toadd, (Sender != NULL) );
+		if (packetcheck) { // Make sure the packet is legal.
+			AddToList(toadd, (Sender != NULL) );
+		} else {
+//			printf("And it sure was a buggy packet!\n");
+		}
 	}
-	
+
 	packet->Close();
 	delete packet;
 	return GetResultCount();
@@ -197,7 +213,7 @@ bool CSearchList::AddToList(CSearchFile*
   if(nb->GetPageCount()>0) {
     int tabCounter=-1;
     for(tabCounter=0;tabCounter<nb->GetPageCount();tabCounter++) {
-      if(nb->GetUserData(tabCounter)==toadd->GetSearchID()) 
+      if(nb->GetUserData(tabCounter)==toadd->GetSearchID())
 	break;
     }
     if(tabCounter>=0) {
diff -Naurp lmule-1.2.0.1/src/TransferWnd.cpp lmule/src/TransferWnd.cpp
--- lmule-1.2.0.1/src/TransferWnd.cpp	2003-03-04 20:13:07.000000000 +0100
+++ lmule/src/TransferWnd.cpp	2003-04-24 16:39:37.000000000 +0200
@@ -47,10 +47,10 @@ CTransferWnd::CTransferWnd(wxWindow* pPa
   wxSplitterWindow* split=(wxSplitterWindow*)FindWindow("splitterWnd");
 
   wxPanel* subContent1=new wxPanel(split,-1);
-  subContent1->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW));
+  subContent1->SetBackgroundColour(GetColour(wxSYS_COLOUR_WINDOW));
   wxSizer* subC1=transferTopPane(subContent1,TRUE);
   wxPanel* subContent2=new wxPanel(split,-1);
-  subContent2->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW));
+  subContent2->SetBackgroundColour(GetColour(wxSYS_COLOUR_WINDOW));
   wxSizer* subC2=transferBottomPane(subContent2,FALSE);
 
   split->SplitHorizontally(subContent1,subContent2);
diff -Naurp lmule-1.2.0.1/src/muuli_wdr.cpp lmule/src/muuli_wdr.cpp
--- lmule-1.2.0.1/src/muuli_wdr.cpp	2003-04-21 07:10:00.000000000 +0200
+++ lmule/src/muuli_wdr.cpp	2003-04-25 12:42:12.000000000 +0200
@@ -58,7 +58,7 @@ wxSizer *muleDlg( wxWindow *parent, bool
 
     wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );
 
-    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("eMule Version 0.22b ready"), wxDefaultPosition, wxSize(217,-1), wxST_NO_AUTORESIZE );
+    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("eMule Version 0.26d ready"), wxDefaultPosition, wxSize(217,-1), wxST_NO_AUTORESIZE );
     item5->SetName( "infoLabel" );
     item4->Add( item5, 1, wxALIGN_CENTRE|wxLEFT, 5 );
 
@@ -201,7 +201,7 @@ wxSizer *serverListDlg( wxWindow *parent
     wxStaticBox *item27 = new wxStaticBox( parent, -1, _("Update server.met from URL") );
     wxStaticBoxSizer *item26 = new wxStaticBoxSizer( item27, wxVERTICAL );
 
-    wxTextCtrl *item28 = new wxTextCtrl( parent, ID_TEXTCTRL, "http://schnellsuche.dynserv.com/server.met/6qigs5o8y/server.met", wxDefaultPosition, wxSize(80,-1), 0 );
+    wxTextCtrl *item28 = new wxTextCtrl( parent, ID_TEXTCTRL, "http://ocbmaurice.dyndns.org/pl/slist.pl/server.met?download/server-max.met", wxDefaultPosition, wxSize(80,-1), 0 );
     item28->SetName( "serverlistURL" );
     item26->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );
 
diff -Naurp lmule-1.2.0.1/src/PartFile.cpp lmule/src/PartFile.cpp
--- lmule-1.2.0.1/src/PartFile.cpp	2003/04/21 05:38:15	1.21
+++ lmule/src/PartFile.cpp	2003/04/23 23:40:17	1.22
@@ -1785,7 +1785,7 @@
 	space = 0;
 	space = GetFreeDiskSpaceX(theApp.glob_prefs->GetTempDir());
 #endif
-	return !( GetPartCount() < 5 || !IsMovie() || ( !IsComplete(0,(PARTSIZE*2)-1) || !IsComplete(PARTSIZE*(GetPartCount()-2),GetFileSize()-1)));
+	return (IsMovie() && IsComplete(0, PARTSIZE));
 }
 
 void CPartFile::UpdateAvailablePartsCount(){
diff -Naurp lmule-1.2.0.1/src/SearchDlg.cpp lmule/src/SearchDlg.cpp
--- lmule-1.2.0.1/src/SearchDlg.cpp	2003/04/14 11:29:40	1.21
+++ lmule/src/SearchDlg.cpp	2003/04/26 02:32:31	1.22
@@ -364,6 +364,8 @@
 typedef void (CSearchListCtrl::*slistFunc)(wxListEvent&);
  
 void CSearchDlg::OnBnClickedStarts(wxEvent& ev){
+// Just in case, abort previous global search.
+  OnBnClickedCancels(nullEvent);
   wxTextCtrl* ctl=XRCCTRL(*this,"IDC_ELINK",wxTextCtrl);
   if(ctl->GetLineText(0).Length()) {
     wxString strlink=ctl->GetLineText(0);

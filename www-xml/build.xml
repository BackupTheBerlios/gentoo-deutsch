<?xml version='1.0'?>

<!DOCTYPE guide SYSTEM "../www-xsl/guide.dtd">


<guide link="/doc/build.html">
<title>Anleitung zur Gentoo Linux 1.2 Installation</title>
<author title="Chief Architect"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Author">Chris Houser</author>
<author title="Author"><mail link="jerry@gentoo.org">Jerry Alexandratos</mail></author>
<author title="Ghost"><mail link="g2boojum@gentoo.org">Grant Goodyear</mail></author>
<author title="&#xDC;bersetzer"><mail link="mgreiner@berlios.de">Markus Greiner</mail></author>

<abstract>Diese Anleitung f&#xFC;hrt Sie schrittweise durch den Gentoo Linux 1.2 Installationsprozess 
f&#xFC;r die x86 Prozessorarchitektur (AMD, Intel). Die Gentoo Linux Installation unterst&#xFC;tzt 
verschiedene Installationsarten, abh&#xE4;ngig davon wieviel des Systems von Grund auf installiert werden soll.
</abstract>

<version>1.51</version>
<date>15 Juli 2002</date>

<chapter>
<title>&#xDC;ber die Installation</title>
<section>
<body>

<p>Die neue Boot CD startet von fast jedem modernen IDE CD-ROM Laufwerk, sowie von vielen 
SCSI CD-ROMs. Die CD-ROM unterst&#xFC;tzt IDE Controller (eingebaut im Kernel) sowie alle 
SCSI Ger&#xE4;te (vorhanden als Module). Zus&#xE4;tzlich stellt sie Module f&#xFC;r
buchst&#xE4;blich jede Netzwerkkarte zur Verf&#xFC;gung die Linux unterst&#xFC;tzt, 
sowie Tools die es erm&#xF6;glichen das Netzwerk zu konfigurieren und ausgehende 
<c>ssh</c> Verbindungen zum Dateidownload aufzubauen.</p>

<p> Um von der "Build" CD zu installieren, wird ein 486+ Prozessor ben&#xF6;tigt und 
idealerweise mindestens 64 Megabyte RAM. (Gentoo Linux konnte erfolgreich mit 
64 MB RAM +  64 MB Swap installiert werden, aber die Installation unter diesen Bedingungen 
war extrem langsam.) Um die Installation zu starten, laden Sie zuerst eines unserer 
CD ISO Images von <uri>http://www.ibiblio.org/gentoo/releases/build/</uri>. Im Augenblick 
haben wir zwei CDs verf&#xFC;gbar. Unsere erste CD ist 
<uri link="http://www.ibiblio.org/gentoo/releases/build/1.2/gentoo-ix86-1.2.iso">
gentoo-ix86-1.2.iso</uri>.Dieses Image ist recht klein (16Mb) und enth&#xE4;lt ein minimales 
"chrootf&#xE4;higes" <!-- Ich probier es mal damit (JS) -->
Image (<path>stage1-ix86-1.2.tbz2</path>) -- alles was Sie ben&#xF6;tigen um ein
Gentoo Linux System von Grund auf aufzubauen. (Die Quelldateien werden dabei 
automatisch aus dem Internet geladen.) Unsere zweite CD ist 
<uri link="http://www.ibiblio.org/gentoo/releases/build/1.2/gentoo-i686-1.2.iso">
gentoo-i686-1.2.iso</uri>. Dieses Image ist etwas gr&#xF6;&#xDF;er (100+Mb) -- Es
enth&#xE4;lt das gleiche Material wie auf unserem 16Mb Image, <e>plus</e> einem 
vorkompiliertem i686 Basissystem (<path>stage3-i686-1.2.tbz2</path>) 
sowie ein zum Teil kompiliertes <!-- nicht so gut. Alternativen?? damit ?? (JS) mit s ists ok :-) (MG)-->
i686 Basissystem (<path>stage2-i686-1.2.tbz2</path>) in TAR-Archiven.
Die beiden neuen TAR-Archive ben&#xF6;tigen einen Pentium Pro oder besser (K6 geht nicht). 
Wenn Sie ein i686+ System verwenden und nicht alles von Grund auf kompilieren wollen, 
k&#xF6;nnen diese die Installation deutlich beschleunigen.
</p>

<p>Jetzt lassen Sie uns kurz den den Installationsprozess skizzieren. Sie erstellen die Partitionen,
erzeugen die Dateisysteme und entpacken entweder das <e>stage1</e>, <e>stage2</e> oder <e>stage3</e> 
Archiv. Wenn Sie das <e>stage2</e> oder <e>stage3</e> Archiv verwenden m&#xFC;ssen Sie alle n&#xF6;tigen Schritte 
unternehmen um Ihr System auf den Stand des <e>stage3</e> Archivs zu bringen. Wenn Sie <e>stage3</e>
erreicht haben k&#xF6;nnen Sie das System konfigurieren (die Konfigurationsdateien anpassen, einen Bootloader 
installieren, usw.) und in ein voll funktionsf&#xE4;higes Gentoo Linux booten.
Abh&#xE4;ngig von der gew&#xE4;hlten  Installationsstufe von der Sie starten, 
hier die ben&#xF6;tigten Schritte:
</p>


<table>
<tr><th>stage Archiv</th><th>Installationsanforderungen</th></tr>
<tr><ti>1</ti><ti>Einrichten von Partition und Dateisystem, emerge rsync, bootstrap, emerge system, emerge linux sources, abschliessende Konfiguration</ti></tr>
<tr><ti>2</ti><ti>Einrichten von Partition und Dateisystem, emerge rsync, emerge system, emerge linux sources, abschliessende Konfiguration</ti></tr>
<tr><ti>3</ti><ti>Einrichten von Partition und Dateisystem, emerge rsync (optional), abschliessende Konfiguration</ti></tr>
</table>

</body>
</section>
</chapter>
<chapter>
<title>Booten</title>
<section>
<body>

<p>Wenn Sie sich f&#xFC;r eine CD entschieden haben, booten Sie damit. Sie werden von
einem Haufen Text und einem <c>boot:</c> Prompt am unteren Bildschirmrand 
begr&#xFC;&#xDF;t. Dr&#xFC;cken Sie an diesem Prompt <e>enter</e> und Linux wird von der CD
geladen.</p>


<p>Als n&#xE4;chstes werden Sie mit einer kleinen Liste von verf&#xFC;gbaren Befehlen auf der 
Boot-CD begr&#xFC;&#xDF;t. Dies beinhaltet <c>nano</c> (einen Klon des Editors <c>pico</c>) und
die Anleitung zur Netzwerkkonfiguration. Danach werden Sie nach Ihrem bevorzugtem
Keyboard Layout befragt, gefolgt von der automatischen Erkennung der PCI Ger&#xE4;te. W&#xE4;hrend
der Ger&#xE4;teerkennung werden alle passenden Kernelmodule f&#xFC;r PCI SCSI Controller und
Netzwerkkarten geladen. Wenn Sie danach <e>Enter</e> dr&#xFC;cken kommen Sie in eine
minimale Linux Umgebung. Sie sollten nun ein root Prompt ("<c>#</c>") auf der
aktuellen Konsole haben. Durch dr&#xFC;cken von Alt-F2, Alt-F3, usw. gefolgt von
einem <e>Enter</e>  k&#xF6;nnen Sie weitere Konsolen aktivieren.</p>


</body>
</section>
</chapter>

<chapter>
<title>Laden der Kernel Module</title>
<section>
<body>

<p>Sie sind jetzt fast soweit, dass Sie mit der Installation anfangen k&#xF6;nnen. 
Sie m&#xFC;ssen aber noch daf&#xFC;r sorgen, dass der Kernel auch die Netzwerkkarte 
erkennt. Eventuell m&#xFC;ssen auch noch SCSI Module geladen werden die nicht
automatisch erkannt wurden. Um eine Liste aller verf&#xFC;gbaren Netzwerkkartenmodule
anzuzeigen, geben Sie <c>ls /lib/modules/*/kernel/drivers/net/*</c> ein.
Um ein bestimmtes Modul zu laden, tippen Sie: </p>

<pre>
# <i>modprobe pcnet32</i>
	<comment>(Ersetzen Sie pcnet32 durch das Modul Ihrer NIC)</comment>
</pre>

<p>Wenn Sie nun auch noch auf SCSI Hardware zugreifen m&#xF6;chten die nicht automatisch
erkannt wurde, m&#xFC;ssen Sie das passende Modul aus /lib/modules laden. 
Verwenden Sie dazu <c>modprobe</c>:</p>


<pre>
# <i>modprobe aic7xxx</i>
# <i>modprobe sr_mod</i>
# <i>modprobe sd_mod</i>
</pre>

<p>Mit den oben stehenden Befehlen haben Sie den SCSI Treiber <c>aic7xxx</c> geladen und
sichergestellt das die Unterst&#xFC;tzung f&#xFC;r SCSI CD-ROMS (<c>sr_mod</c>) und Festplatten 
(<c>sd_mod</c>) aktiviert ist.</p>

<note>Version -r10 des ISO Images enth&#xE4;lt jetzt auch <c>hdparm</c>. Wenn eine Ihrer Festplatten
optimiert werden muss, ist nun der richtige Zeitpunkt daf&#xFC;r.</note>
</body>
</section>
</chapter>

<chapter>
<title>PCMCIA Kernel Module laden</title>
<section>
<body>
<p>Wenn Sie eine PCMCIA Netzwerkkarte verwenden, m&#xFC;ssen Sie noch einen
zus&#xE4;tzlichen Dreh anwenden.</p>
<pre>
# <i>insmod pcmcia_core</i>
# <i>insmod i82365</i>
# <i>insmod ds</i>
# <i>cardmgr -f</i>
</pre>

<p>W&#xE4;hrend cardmgr &#xFC;berpr&#xFC;ft welche Hardware vorhanden ist, sollten aus Ihrem
Lautsprecher einige Piepser ert&#xF6;nen und die PCMCIA Netzwerkkarte ihre Arbeit
aufnehmen. Sie k&#xF6;nnen nat&#xFC;rlich die PCMCIA Karte auch nach dem Laden des cardmgr
einstecken.(Technisch gesehen m&#xFC;ssen Sie <i>cardmgr</i> nicht starten wenn Sie
genau wissen welche Module Ihre PCMCIA Karte ben&#xF6;tigt. Aber wenn nicht, versuchen
Sie nicht alle Module zu laden um zu sehen welches passt. Das wird nicht
funktionieren, da sich alle Module laden lassen und darauf warten das eine
passende PCMCIA Karte eingesteckt wird. Au&#xDF;erdem entfernt <c>cardmgr</c> die
Module der Karte wieder wenn sie entnommen wird.)
</p>

</body>
</section>
</chapter>
<chapter>
<title>Konfiguration der Netzwerkanbindung</title>
<section>
<body>

<p>Die neue -r11+ Boot CD erlaubt es nun ein Netzwerk zu konfigurieren damit <c>ssh</c>, 
<c>scp</c> oder <c>wget</c> schon vor der eigentlichen Installation verwendet werden k&#xF6;nnen. Auch
wenn Sie diese Programme jetzt nicht brauchen, sollten Sie nun das Netzwerk konfigurieren. Einmal
konfiguriert kann Portage diese Netzwerkverbindung nutzen wenn Sie sich in der "chroot" Umgebung
befinden. (F&#xFC;r die Gentoo Linux Installation erforderlich.)</p>

</body>
</section>

<section>
<title>DHCP</title>
<body>
<p>Mit DHCP ist die Netzwerkkonfiguration sehr einfach. Wenn Ihr Provider kein DHCP anbietet,
geht es f&#xFC;r Sie bei der statischen Netzwerkkonfiguration weiter.</p>

<pre caption="Netzerk Konfiguration via DHCP">
# <i>dhcpcd eth0</i> 
</pre>
<note>
Einige Provider erwarten das Sie einen Hostnamen &#xFC;bergeben. Um dies zu tun h&#xE4;ngen Sie die 
Option <c>-h meinhostname</c> an das oben stehende Kommando.</note>

<p>Wenn Sie <i>dhcpConfig</i> Warnungen bekommen, keine Panik. Die meisten Meldungen sind 
harmlos. Weiter geht es unten mit dem Test der Netzwerkanbindung.</p>

</body>
</section>
<section>
<title>Statische Konfiguration</title>
<body>
<p>
Sie m&#xFC;ssen Ihre Netzwerkanbindung soweit konfigurieren, dass Sie die ben&#xF6;tigten Quellen 
herunterladen k&#xF6;nnen. Au&#xDF;erdem wird das lokale (localhost) Interface ben&#xF6;tigt. 
Bitte geben Sie dazu folgende Befehle ein und ersetzen $IFACE mit Ihrem Netzwerkinterface 
(typischerweise <c>eth0</c>), $IPNUM mit Ihrer IP Adresse, $BCAST mit Ihrer Broadcast Adresse und 
$NMASK mit Ihrer Netzwerkmaske. Bei dem <c>route</c> Befehl ersetzen Sie $GTWAY durch die IP Adresse 
Ihres "default Gateway".</p>

<pre>
# <i>/sbin/ifconfig $IFACE $IPNUM broadcast $BCAST netmask $NMASK</i>
# <i>/sbin/route add -net default gw $GTWAY netmask 0.0.0.0 metric 1</i>
</pre>
<p>Jetzt m&#xFC;ssen Sie die Datei <path>/etc/resolv.conf</path> erstellen damit die Namensaufl&#xF6;sung 
(Web/FTP Server durch Namen anstatt der IP Adresse finden) funktioniert.</p>

<note>Im Moment ist nur <c>nano</c>, ein kleiner, leicht zu bedienender Editor installiert.
Verwenden Sie <c>nano</c> mit dem Schalter <c>-w</c> um den automatischen Zeilenumbruch 
abzuschalten.</note>

<p>Hier ein Beispiel der Datei /etc/resolv.conf:</p>

<pre caption="/etc/resolv.conf Vorlage">
domain mydomain.com
nameserver 10.0.0.1
nameserver 10.0.0.2
</pre>
<p>Ersetzten Sie <c>10.0.0.1</c> und <c>10.0.0.2</c> mit den IP Adressen Ihres prim&#xE4;ren und
sekund&#xE4;ren DNS Servers.</p>
</body>
</section>
<section>
<title>Test der Netzwerkanbindung</title>
<body>
<p>Da Ihre Netzwerkanbindung jetzt konfiguriert ist sollte das <c>/sbin/ifconfig -a</c> Kommando ergeben,
 das Ihre Netzwerkkarte (hoffentlich) arbeitet (achten Sie auf <e>UP</e> und <e>RUNNING</e> in der Ausgabe).
</p>

<pre caption="/sbin/ifconfig bei einer arbeitenden Netzwerkkarte">
eth0      Link encap:Ethernet  HWaddr 00:50:BA:8F:61:7A
          inet addr:192.168.0.2  Bcast:192.168.0.255  Mask:255.255.255.0
          inet6 addr: fe80::50:ba8f:617a/10 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1498792 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1284980 errors:0 dropped:0 overruns:0 carrier:0
          collisions:1984 txqueuelen:100
          RX bytes:485691215 (463.1 Mb)  TX bytes:123951388 (118.2 Mb)
          Interrupt:11
</pre>
<!--
<note>
If you have a static ppp link, you can !!! do this...!!!
Sollen wir hier eigenmaechtig eine PPPoE Abschnitt einfuegen - In Deutschland ist das ja deutlich
verbereiteter als in den USA (JS) ?
Waere zu Ueberlegen, moechte aber erst den Rest uebersetzen. (MG).
</note>
-->
</body>
</section>
<section>
<title>Das Netzwerk ist jetzt online!</title>
<body>
<p>Der Netzwerkanschluss sollte nun konfiguriert und nutzbar sein. Sie sind nun in der Lage sich via 
<c>ssh</c>, <c>scp</c> und <c>wget</c> mit anderen Rechnern in Ihrem LAN oder im Internet zu
verbinden.</p>
</body>
</section>
</chapter>
<chapter>
<title>Einrichten der Partitionen</title>
<section>
<body>

<p>Nun da der Kernel Netzwerk und Festplatten Kontroller unterst&#xFC;zt, wird es Zeit
die Partitionen f&#xFC;r Gentoo Linux einzurichten.</p>

<p>
Hier nun eine kurzer &#xDC;berblick &#xFC;ber das Standard Layout der Partitionen
bei Gentoo Linux. Sie erzeugen mindestens drei Partitionen: eine Swap
Partition, eine Root Partition (hier liegt der Hauptteil von Gentoo Linux)
und eine spezielle Boot Partition. Die Boot Partition ist dazu bestimmt den
GRUB Bootmanager und den oder die Linux Kernel aufzunehmen. Die Boot Partition
ist ein sicherer Platz um alle zum booten relevanten Dateien abzulegen.
Bei der t&#xE4;glichen Nutzung sollte die Boot Partition <e>nicht gemountet</e>
bleiben. Dies verhindert das der Kernel von GRUB nach einem System Absturz
nicht mehr geladen werden kann (z.B. wegen einem besch&#xE4;digten Dateisystem).
Au&#xDF;erdem verhindert dies das "Henne-Ei-Problem" bei dem GRUB den Kernel
wegen einem kaputten Dateisystem nicht mehr laden kann, Sie aber das Dateisystem
reparieren k&#xF6;nnten, w&#xE4;re es nur m&#xF6;glich zu booten.</p>

<p>Weiter geht es mit den verschiedenen Dateisystemen. Momentan stehen Ihnen
vier Dateisystem zur Verf&#xFC;gung: XFS, ext2, ext3 (Journaling) und ReiserFS.
ext2 ist ein erprobtes Linux Dateisystem, unterst&#xFC;tzt aber kein Journaling.
Das Dateisystem ext3 ist eine Weiterentwicklung von ext2 und unterst&#xFC;tzt
Metadaten Journaling sowie "ordered data writes" <!-- Wie soll man das Uebersetzten ??? -->
und ein effektives Daten Journaling. ReiserFS ist ein B'-tree basiertes 
Dateisystem das eine sehr gute Performance bei der Handhabung kleiner Dateien
verspricht und deutlich performanter (10x-15x) als ext2 und ext3 ist, wenn kleine 
Dateien (kleiner 4k) im Spiel sind. Wie auch immer, momentan empfehlen wir die
Verwendung von ReiserFS, wegen wiederholtem Auftreten von  Dateisystemfehlern in 
der 2.4.x Serie des Kernels, <e>nicht</e>. ReiserFS unterst&#xFC;tzt Metadaten 
Journaling aber kein Daten Journaling. <!-- Was auch immer das heisst :-) -->
XFS ist ein "high-performance, enterprise-class" Dateisystem mit Metadaten
Journaling und wird voll von Gentoo Linux unterst&#xFC;tzt.</p>

<!-- Jetzt ist erst mal Schluss -->
<p>
If
you're looking for the most standard filesystem, use ext2.  If you're looking
for the most rugged journalled filesystem, use ext3.  If you're looking for a
high-performance filesystem with journaling support, use XFS;  both ext3 and XFS are 
mature and refined.  All filesystems except ReiserFS are production-ready.  
Here are our basic recommended filesystem
sizes and types:</p>

  <table>
  <tr>
  	<th>Partition</th>
	<th>Size</th>
	<th>Type</th>
  	<th>example device</th>
  </tr>
  <tr>
  	<ti>boot partition, containing kernel(s) and boot information</ti>
	<ti>100 Megabytes</ti>
	<ti>ext2/3 highly recommended (easiest); if ReiserFS then mount with <c>-o notail</c></ti>
  	<ti>/dev/hda1</ti>
  </tr>
   <tr>
  	<ti>swap partition (no longer a 128 Megabyte limit)</ti>
	<ti>&gt;=2*Amount of RAM in this system is recommended but no longer (as of kernel 2.4.10) required</ti>
	<ti>Linux swap</ti>
  	<ti>/dev/hda2</ti>
  </tr>
  <tr>
  	<ti>root partition, containing main filesystem (/usr, /home, etc)</ti>
	<ti>&gt;=1.5 Gigabytes</ti>
	<ti>XFS, ext3 recommended; ext2 ok</ti>
  	<ti>/dev/hda3</ti>
  </tr>
 </table>

<note>At this point, create your partitions using fdisk.  Note that your partitions
should be of type 82 if swap and 83 for regular filesystems (whether XFS, ReiserFS <e>or</e> ext2).
</note>

<p>Once you've created your partitions using <c>fdisk</c>, it's time to initialize
the filesystems that will be used to house our data.  Initialize swap as follows:</p>
<pre>
# <i>mkswap /dev/hda2</i>
</pre>
<p>You can use the <c>mke2fs</c> command to create ext2 filesystems:</p>
<pre>
# <i>mke2fs /dev/hda1</i>
</pre>
<p>To create an XFS filesystem, use the <c>mkfs.xfs</c> command:</p>
<pre>
# <i>mkfs.xfs /dev/hda3</i>
</pre>
<note>
You may want to add a couple of additional flags to the <c>mkfs.xfs</c> command: <c>-d agcount=3 -l size=32m</c>. 
The <c>-d agcount=3</c> command will lower
the number of allocation groups.  XFS will insist on using at least 1 allocation group per 4 GB of your partition,
so, for example, if you hava a 20 GB partition you will need a minimum agcount of 5.  The <c>-l size=32m</c> command
increases the journal size to 32 Mb, increasing performance.
</note>
<warn>
If you are installing an XFS partition over a previous ReiserFS partition, later attempts to mount may fail without
an explicit <c>mount -t xfs</c>.  The solution is to zero out the partition before creating the XFS filesystem:
<c>dd if=/dev/zero of=/dev/hd<comment>x</comment> bs=1k</c>. 
</warn>
<p>If you'd like to use ext3, you can create ext3 filesystems using <c>mke2fs -j</c>:</p>
<pre>
# <i>mke2fs -j /dev/hda3</i>
</pre>
<p>To create ReiserFS filesystems, use the <c>mkreiserfs</c> command:</p>
<pre>
# <i>mkreiserfs /dev/hda3</i>
</pre>

<warn>Again, we do not recommend ReiserFS at this time.  While ReiserFS has
worked fine for many, filesystem corruption has been too common a problem with
ReiserFS and the 2.4.x series kernels.</warn>

<note>You can find out more about using ext3 under Linux 2.4 at <uri>http://www.zip.com.au/~akpm/linux/ext3/ext3-usage.html</uri>.</note>
</body>
</section>
</chapter>
<chapter>
<title>Mount partitions</title>
<section>
<body>
<p>
Now, we'll activate our new swap, since we may need the additional virtual memory that
provides later:
</p>
<pre>
# <i>swapon /dev/hda2</i>
</pre>
<p>Next, we'll create the <path>/mnt/gentoo</path> and <path>/mnt/gentoo/boot</path> mountpoints,
and we'll mount our filesystems to these mountpoints. 
</p>
<pre>
# <i>mkdir /mnt/gentoo</i>
# <i>mount /dev/hda3 /mnt/gentoo</i>
# <i>mkdir /mnt/gentoo/boot</i>
# <i>mount /dev/hda1 /mnt/gentoo/boot</i>
</pre>
<p>If you are setting up Gentoo
   Linux with a separate <path>/usr</path> or <path>/var</path>, these would get mounted to
   <path>/mnt/gentoo/usr</path> and <path>/mnt/gentoo/var</path>, respectively.
</p>
   <impo>If your <e>boot</e> partition (the one holding the kernel) is ReiserFS, be sure to mount it
   with the <c>-o notail</c> option so GRUB gets properly installed.  Make sure 
   that <c>notail</c> ends up in your new <path>/etc/fstab</path> boot partition entry, too.
   We'll get to that in a bit.</impo>
</body>
</section>
</chapter>

<chapter>
<title>Mounting the CD-ROM</title>
<section>
<body>
<p>Even though we've booted from the CD-ROM, the CD-ROM itself is not mounted under our minimal
Linux boot CD environment.  We'll need to mount it so that we can access the compressed build image
tarball contained on the CD-ROM.  To mount the CD-ROM, one typically types:
</p>
<pre>
# <i>mount /dev/cdroms/cdrom0 /mnt/cdrom -o ro -t iso9660</i>
</pre>
<p>With the CD-ROM mounted, you should be able to see the <c>stage???.tbz2</c> file(s) by typing
<c>ls /mnt/cdrom</c>.</p>
</body>
</section>
</chapter>

<chapter>
    <title>Unpack the stage you want to use</title>
<section>
<body>

<p>Now it's time to extract the compressed stage tarball of your choice to <path>/mnt/gentoo</path>.  Then, we'll <c>chroot</c> over to the new Gentoo Linux build installation. 
</p>

<impo>Be sure to use the <c>p</c> option with <c>tar</c>.  Forgetting to do this will cause certain files to contain incorrect permissions.</impo>

<impo>If you are using the "from scratch, build everything" install method, you will want to use the <path>stage1-ix86-1.2.tbz2</path> image.
If you're using one of our bigger CDs, you'll also have a choice of a stage2 and stage3 image.  These images allow you to save time at the
expense of configurability (we've already chosen compiler optimizations and default USE variables for you.)  The stage3 image now also includes complete linux sources and a Portage tree snapshot, eliminating the need to do an <c>emerge rsync</c> later.
</impo>

<pre>
# <i>cd /mnt/gentoo</i>
# <i>tar -xvjpf /mnt/cdrom/stage?-*.tbz2</i>
# <i>mount -o bind /proc /mnt/gentoo/proc</i>
# <i>cp /etc/resolv.conf /mnt/gentoo/etc/resolv.conf</i>
</pre>

<pre>
# <i>chroot /mnt/gentoo /bin/bash</i>
# <i>env-update</i>
Regenerating /etc/ld.so.cache...
# <i>source /etc/profile</i>
# 
</pre>

<p>After you execute these commands, you'll be "inside" your new Gentoo Linux environment.
</p>

</body>
</section>
</chapter>

<chapter>
<title>Rsync</title>
<section>
<body>
<p>Now, you'll need to run <c>emerge rsync</c>.  If you're using the a Gentoo Linux 1.1+ stage3 tarball,
<c>emerge rsync</c> is now optional as we've included a snapshot of the Portage tree for your convenience. <c>emerge rsync</c> will tell <c>emerge</c> to
connect to rsync.gentoo.org and download the latest version of our Portage ports tree:</p>

<pre>
# <i>emerge rsync</i>
</pre>
<p>The Portage tree will be downloaded; it's about 10Mb in size.</p>
<impo>The address for the rsync server is currently rsync://rsync.gentoo.org/gentoo-portage.
  If you have trouble accessing Gentoo rsync, make sure you're
using this address by setting it as the SYNC variable in your /etc/make.conf.
</impo>
<note>The rsync command can be configured to use an HTTP proxy if you
are behind a firewall.  To configure this item set 
<i>RSYNC_PROXY="hostname:port"</i> in <i>/etc/make.conf</i> or set it as
an environment variable.
</note>

</body>
</section>
</chapter>
<chapter>
<title>Progressing from stage1 to stage2</title>
<section>
<body>

<impo>If you are a stage2 or stage3 tarball, then we've already bootstrapped
for you.  There is no reason for you to bootstrap again, unless you decided to
do an <c>emerge rsync</c> and want to ensure that you have an up-to-the-minute
current Gentoo Linux system.  Most people using stage2 or stage3 tarballs will
<i>not</i> want to bootstrap again, since it can take up to an hour even on
very fast machines.</impo>

<p>Now that you have a working copy of the Portage tree, people using stage1 to
install will need to bootstrap their Gentoo Linux system as follows.  First
edit the file <path>/etc/make.conf</path>.  In this file, you should set your
<c>USE</c> flags, which specify optional functionality that you would like to
be built into packages; generally, the defaults (an <e>empty</e> or unset USE
variable) are fine.  You also should set appropriate <c>CHOST</c>, <c>
CFLAGS</c> and <c>CXXFLAGS</c> settings for the kind of system that you are
creating (commented examples can be found further down in the file.)  If
necessary, you can also set proxy information here if you are behind a
firewall.  </p>

<pre>
# <i>nano -w /etc/make.conf</i> <comment>(Adjust these settings)</comment>
</pre>
<note>
People who need to substantially tweak the build process should take a look at
the <path>/etc/make.globals</path> file.  This file comprises gentoo defaults and
should never be touched.  If the defaults do not suffice, then new values should
be put in <path>/etc/make.conf</path>, as entries in <path>make.conf</path>
<comment>override</comment> the entries in <path>make.globals</path>.  If you're
interested in tweaking USE settings, look in <path>/etc/make.profile/make.defaults</path>.
If you want to turn off any USE settings found here, add an appropriate <c>USE="-foo"</c>
in /etc/make.conf (to turn off the <c>foo</c> USE setting.)
</note>
<p>Now, it's time to start the "bootstrap" process.  This process will last 1-2 hours depending on 
how zippy your machine is; it takes about an hour on my 900Mhz AMD Athlon system.  During this
time, the extracted build image will be prepped for compiling the rest of the system.  The GNU
compiler suite will be built, as well as the GNU C library.  These are time consuming builds and
make up the bulk of the bootstrap process:</p>
<pre>
# <i>cd /usr/portage</i>
# <i>scripts/bootstrap.sh</i>
</pre>
<p>The "bootstrap" process will now begin.</p>
<note>
Portage by default uses <c>/var/tmp</c> during package building, often
using several hundred megabytes of temporary storage. If you would like to
change where Portage stores these temporary files, set a new PORTAGE_TMPDIR <e>before</e>
starting the bootstrap process, as follows:
</note>
<pre>
# <i>export PORTAGE_TMPDIR="/otherdir/tmp"</i>
</pre>
<p>
The 
<c>bootstrap.sh</c> will build <c>binutils</c>, <c>gcc</c>, <c>gettext</c>,
and <c>glibc</c>, rebuilding <c>binutils</c>, <c>gcc</c>, and <c>gettext</c>
after <c>glibc</c> is built.  Needless to say, this process takes a while.
Have a nice nap.  Once this process completes, your system will be in a "stage2" state.
</p>
</body>
</section>
</chapter>
<chapter>
<title>Progressing from stage2 to stage3</title>
<section>
<body>

<p>Once your build image has been bootstrapped and you're at stage2 (again, if you're
using a stage3 tarball than these steps are not required)
it's time to build or install the rest of the base
system as follows:</p>

<pre>
# <i>export CONFIG_PROTECT=""</i>
# <i>emerge --pretend system</i>
	<comment>[lists the packages to be installed]</comment>
# <i>emerge system</i>
</pre>

<note>The <c>export CONFIG_PROTECT=""</c> line ensures that any new scripts
installed to <path>/etc</path> will overwrite the old scripts (stored in
<path>sys-apps/baselayout</path>), bypassing Portage's new config file
management support.  Type <c>emerge --help config</c> for more details.</note>

<p>It's going to take a while
to finish building the entire base system.  Your reward is that it will be
thoroughly optimized for your system.  The drawback is that you have to find a
way to keep yourself occupied for some time to come.  The author suggests "Star
Wars - Super Bombad Racing" for the PS2.  When <c>emerge system</c> completes,
you'll have a stage3 Gentoo Linux system.</p>

</body>
</section>
</chapter>
<chapter>
<title>Final steps: timezone</title>
<section>
<body>

<p>At this point, you should have a stage3 system that's ready for final configuration.  We'll start this process by setting the timezone.  By setting the timezone before building the kernel we ensure that
users get reasonable <c>uname -a</c> output.</p>
<p>Look for your timezone (or GMT if you using Greenwich Mean Time) in <path>/usr/share/zoneinfo</path>.  Then, make a symbolic link by typing:
</p><pre>
# <i>ln -sf /usr/share/zoneinfo/path/to/timezonefile /etc/localtime</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Final steps: kernel and system logger</title>
<section>
<body>
<p>
If you're installing a Gentoo Linux 1.1+ stage3 tarball, we've made things convenient
for you and included recent Linux sources in <path>/usr/src/linux</path>.
Otherwise, you'll need to merge Linux source ebuilds.  Here are the ones we currently
offer:</p>
<table>
<tr><th>ebuild</th><th>description</th></tr>
<tr><ti><path>gentoo-sources</path></ti><ti>Our own performance and functionality-enhanced kernel based on -ac (doesn't include XFS support)</ti></tr>
<tr><ti><path>xfs-sources</path></ti><ti>A snapshot of the SGI XFS CVS Linux source tree; this is the kernel to run if you're using the XFS filesystem</ti></tr>
<tr><ti><path>openmosix-sources</path></ti><ti>A stock Linux kernel source tree patched with support for the GPL <uri link="http://www.openmosix.com">openMosix</uri> load-balancing/clustering technology</ti></tr>
<tr><ti><path>usermode-sources</path></ti><ti>A stock Linux kernel source tree patched with support for User-Mode Linux.  ("Linux inside Linux" technology)</ti></tr>
<tr><ti><path>vanilla-sources</path></ti><ti>A stock Linux kernel source tree, just like you'd get from kernel.org</ti></tr>
</table>

<p>Choose one and then merge as follows:</p>

<pre>
# <i>emerge sys-kernel/gentoo-sources</i>
</pre>

<p>Once you have a Linux kernel source tree available, it's time to compile your own custom kernel:
</p>
<pre>
# <i>cd /usr/src/linux</i>
# <i>make menuconfig</i>
# <i>make dep &amp;&amp; make clean bzImage modules modules_install</i>
# <i>mv /boot/bzImage /boot/bzImage.orig</i> <comment>[if bzImage already exists]</comment>
# <i>cp /usr/src/linux/arch/i386/boot/bzImage /boot</i>
</pre>
<warn>For your kernel to function properly, there are several options that you will
need to ensure are in the kernel proper -- that is, they should <i>be enabled and not
compiled as modules</i>.  You will need to enable the <i>"Code maturity
level options --> Prompt for development and/or incomplete code/drivers"</i>
option to see several of these selections.
Under the "File systems" section, be sure to enable the <i>"Device File System"</i> (note that
you <e>don't</e> need to enable the "/dev/pts file system support" option). You'll also
need to enable the <i>"Virtual Memory Filesystem"</i>.  Be sure to enable "ReiserFS" if you have
any ReiserFS partitions; the same goes for "Ext3".  If you're using XFS, enable the 
"SGI XFS filesystem support"
option.  It's always a good idea to leave ext2
enabled whether you are using it or not.    Also, most people using IDE hard drives will
want to enable the "USE DMA by default" option; otherwise, your IDE drives may perform
very poorly.  Of course, remember to enable "IDE disk" support as well -- otherwise your
kernel won't be able to see your IDE disks.
</warn>
<note>
For those who prefer it, 
it is now possible to install Gentoo Linux with a 2.2 kernel.
Such stability will come at a price: 
you will lose many of the nifty features that
are new to the 2.4 series kernels (such as XFS and tmpfs
filesystems, iptables, and more), although the 2.2 kernel sources can be
patched with Reiserfs and devfs support.  
Gentoo linux bootscripts require either tmpfs or ramdisk support in the kernel, so 
2.2 kernel users need to make sure that ramdisk support is compiled in (ie, not a module).
It is <comment>vital</comment> that a <e>gentoo=notmpfs</e> flag be added to the kernel
line in <path>/boot/grub/menu.lst</path> for the 2.2 kernel so that a ramdisk is mounted
for the bootscripts instead of tmpfs.  If you choose not to use devfs, then
<e>gentoo=notmpfs,nodevfs</e> should be used instead.
</note>

<p>
Your new custom kernel (and modules) are now installed.  Now you need to choose a system
logger that you would like to install.  We offer sysklogd, which is the traditional set
of system logging daemons.  We also have syslog-ng as well as metalog.  Power users seem
to gravitate away from sysklogd (not very good performance) and towards syslog-ng and 
metalog.  If in doubt, you may want to try metalog, since it seems to be quite popular.
To merge your logger of choice, type <e>one</e> of the next three lines:
</p>

<pre>
# <i>emerge sys-apps/sysklogd</i>
# <i>rc-update add sysklogd default</i>
<comment>or</comment>
# <i>emerge app-admin/syslog-ng</i>
# <i>rc-update add syslog-ng default</i>
<comment>or</comment>
# <i>emerge app-admin/metalog</i>
# <i>rc-update add metalog default</i>
</pre>
<warn>
In the case of syslog-ng you need to create 
<path>/etc/syslog-ng/syslog-ng.conf</path>.
See <path>/etc/syslog-ng</path> 
for a sample configuration file.
</warn>
<impo>
Metalog flushes output to the disk in blocks, so messages aren't immediately recorded into
the system logs.  If you are trying to debug a daemon, this performance-enhancing behavior is less than helpful.  When your
Gentoo Linux system is up and running, you can send
metalog a USR1 signal to temporarily turn off this message buffering (meaning that 
<i>tail -f <path>/var/log/everything/current</path></i> will now work 
in real time, as expected), 
and a USR2 signal to turn buffering back on
again. 
</impo>
<p>Now, you may optionally choose a cron package that you'd like to use.  Right now, we offer dcron, fcron and vcron.
If you don't know which one to choose, you might as well grab vcron.  They can be installed as follows:</p>
<pre>
# <i>emerge sys-apps/dcron</i>
# <i>crontab /etc/crontab</i>
<comment>or</comment>
# <i>emerge sys-apps/fcron</i>
# <i>crontab /etc/crontab</i>
<comment>or</comment>
# <i>emerge sys-apps/vcron</i>
</pre>
<p>For more information how how cron works under Gentoo Linux, see <uri link="http://lists.gentoo.org/pipermail/gentoo-announce/2002-April/000151.html">this announcement</uri>.</p>
</body>
</section>
</chapter>
<chapter>
<title>Final steps: install additional packages</title>
<section>
<body>
<p>
You may need to install some additional packages in the Portage tree
if you are using any optional features like XFS or LVM.  If you're
using XFS, you should emerge the <c>xfsprogs</c> ebuild:
</p>
<pre>
# <i>emerge sys-apps/xfsprogs</i>
</pre>
<p>
If you're using LVM, you should emerge the <c>lvm-user</c> ebuild:
</p>
<pre>
# <i>emerge --usepkg sys-apps/lvm-user</i>
</pre>
<p>
If you're a laptop user and wish to use your pcmcia slots on your first
real reboot, you'll want to make sure you install the pcmcia-cs package.
</p>
<pre>
# <i>emerge sys-apps/pcmcia-cs</i>
</pre>
</body>
</section>
</chapter>
<chapter>
<title>Final steps: /etc/fstab</title>
<section>
<body>
<p>Your Gentoo Linux system is almost ready for use.  All we need to do now is configure
a few important system files and install the GRUB boot loader. 
The first file we need to
configure is <path>/etc/fstab</path>.  Remember that you should use
the <c>notail</c> option for your boot partition if you chose to create a ReiserFS filesystem on it.
Remember to specify <c>ext2</c>, <c>ext3</c> or <c>reiserfs</c> filesystem types as appropriate.</p>
<p>Use something like the <path>/etc/fstab</path> listed below, but of course be sure to replace "BOOT",
"ROOT" and "SWAP" with the actual block devices you are using (such as <c>hda1</c>, etc.)</p>
<pre>
<comment>
# /etc/fstab: static file system information.
#
# noatime turns of atimes for increased performance (atimes normally aren't
# needed; notail increases performance of ReiserFS (at the expense of storage
# efficiency).  It's safe to drop the noatime options if you want and to 
# switch between notail and tail freely.

# &lt;fs&gt;           &lt;mountpoint&gt;   &lt;type&gt;   &lt;opts&gt;          &lt;dump/pass&gt;

# NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
</comment>
/dev/BOOT           /boot       ext2	 noauto,noatime	 1 2
/dev/ROOT           /           ext3	 noatime         0 1
/dev/SWAP           none        swap	 sw              0 0
/dev/cdroms/cdrom0  /mnt/cdrom  iso9660	 noauto,ro       0 0
proc                /proc       proc	 defaults        0 0
</pre>

</body>
</section>
<section>
<title>Final steps: set the root password</title>
<body>
<p>Before you forget, set the root password by typing:</p>
<pre>
# <i>passwd</i>
</pre>
</body>
</section>
<section>
<title>Final steps: /etc/hostname</title>
<body>
<p>Edit this file so that it contains your fully-qualified domain name on a single line, i.e. <c>mymachine.mydomain.com</c>.
</p>
</body>
</section>

<section>
<title>Final steps: /etc/hosts</title>
<body>
<p>This file contains a list of ip addresses and their associated hostnames.  It's used by the system to resolve the IP addresses
of any hostnames that may not be in your nameservers.  Here's a template for this file:
</p><pre>
127.0.0.1      localhost
<comment># the next line contains your IP for your local LAN, and your associated machine name</comment>
192.168.1.1    mymachine.mydomain.com	mymachine
</pre>
</body>
</section>

<section>
<title>Final network configuration</title>
<body>
<p>
Add the names of any modules that are necessary for the proper functioning of your system to 
<path>/etc/modules.autoload</path> file (you can also add any options you
need to the same line.) When Gentoo Linux boots, these modules will be automatically
loaded.  Of particular importance is your ethernet card module, if you happened to compile
it as a module:
</p>
<pre caption="/etc/modules.autoload">
3c59x
</pre>
<p>Edit the <path>/etc/conf.d/net</path> script to get your network configured for your
first boot:
</p>
<pre>
# <i>nano -w /etc/conf.d/net</i>
# <i>rc-update add net.eth0 default</i>
</pre>
<p>
If you have multiple network cards you need to create additional <path>net.eth<comment>x</comment></path>
scripts for each one (<comment>x</comment> = 1, 2, ...):
</p>
<pre caption="Multiple network interfaces">
# <i>cd /etc/init.d</i>
# <i>cp net.eth0 net.eth<comment>x</comment></i>
# <i>rc-update add net.eth<comment>x</comment> default</i>
</pre>
<p>
If you have a PCMCIA card installed, have a quick look into 
/etc/init.d/pcmcia to verify that things seem all right for your setup,
then add 
<pre>
depend() {
	need pcmcia
}
</pre>
on top of your <path>/etc/init.d/net.eth<comment>x</comment></path> file, 
for the pcmcia drivers to be autoloaded whenever your network is loaded.
</p>
</body>
</section>

<section>
<title>Final steps: configure basic settings (including the international keymap setting)</title>
<body>
<pre caption="basic configuration">
# <i>nano -w /etc/rc.conf</i>
</pre>
<p>
Follow the directions in the file to configure the basic settings.  
All users will want to make sure that <c>CLOCK</c> is set to his/her
liking.  International keyboard users will want to set the <c>KEYMAP</c>
variable (browse <path>/usr/share/keymaps</path> to see the various
possibilities).
</p>
</body>
</section>

<section>
<title>Final steps: configure GRUB</title>
<body>
<p>
The most critical part of understanding GRUB is getting comfortable with how GRUB refers to hard drives and partitions.
Your Linux partition <path>/dev/hda1</path> is called <path>(hd0,0)</path> under GRUB.  Notice the parenthesis around the hd0,0 - they are required.  
Hard drives count from zero rather than "a", and partitions start at zero rather than one.  So, <path>/dev/hdb3</path> gets translated to <path>(hd1,2)</path>, and <path>/dev/hdd7</path> gets translated to <path>(hd3,6)</path>.  After you've gotten the feel for that, convert your boot and root partition names to the GRUB format and write them down.  Now, it's time to install GRUB.
</p>

<p>The easiest way to install grub is to simply type <c>grub</c> at your chrooted shell prompt:
</p><pre>
# <i>grub</i>
</pre><p>You'll be presented with the <c>grub&gt;</c> grub command-line prompt.  Now, you need to type in the
right commands to install the GRUB boot record onto your hard drive.  In my example configuration,
I want to install the GRUB boot record on my hard drive's MBR (master boot record), so that 
the first thing I see when I turn on the computer is the GRUB prompt.  In my case, the commands
I want to type are:</p>
<pre>grub&gt; <i>root (hd0,0)</i>
grub&gt; <i>setup (hd0)</i>
grub&gt; <i>quit</i>
</pre>

<p>Here's how the two commands work.  The first <c>root ( )</c> command tells GRUB
the location of your boot partition (in our example, <path>/dev/hda1</path> or 
<path>(hd0,0)</path> in GRUB terminology.  Then, the second <c>setup ( )</c> command tells GRUB where to install the
boot record - it will be configure to look for its special files at the <c>root
( )</c> location that you specified.  In my case, I want the boot record on the
MBR of the hard drive, so I simply specify <path>/dev/hda</path> (also known as <path>(hd0)</path>).  If I were using
another boot loader and wanted to set up GRUB as a secondary boot-loader, I
could install GRUB to the boot record of a particular partition.  In that case,
I'd specify a particular partition rather than the entire disk.  Once the GRUB
boot record has been 
successfully installed, you can type <c>quit</c> to quit GRUB.  Gentoo Linux is
installed, but we need to create the <path>/boot/grub/menu.lst</path> file so that
we get a nice GRUB boot menu when the system reboots.  Here's how to do it.</p>

<p>Now, create the menu.lst file (<c>nano -w /boot/grub/menu.lst</c>), and add the following to it:</p>
<pre>
default 0
timeout 30
splashimage=(hd0,0)/boot/grub/splash.xpm.gz

title=My example Gentoo Linux
root (hd0,0) 
kernel /boot/bzImage root=/dev/hda3 

<comment># Below needed only for people who dual-boot</comment>
title=Windows NT Workstation
root (hd0,5) 
chainloader +1
</pre>
<note>
The <path>menu.lst</path> file should end in "lst" as in "list", not "1st" as in "first".  Also, (hd0,0) should be 
written without any spaces inside the parentheses.
</note>
<p>After saving this file, Gentoo Linux installation is complete.  Selecting the first option will
tell GRUB to boot Gentoo Linux without a fuss.  The second part of the menu.lst file is optional, and shows you how to
use GRUB to boot a bootable Windows partition.</p>

<note>Above, <path>(hd0,0)</path> should point to your "boot" partition
(<path>/dev/hda1</path> in our example config) and <path>/dev/hda3</path> should point to
your root filesystem.  <path>(hd0,5)</path> contains the NT boot
loader.</note> <p>Also, if you need to pass any options to the kernel, simply
add them to the end of the <c>kernel</c> command.  We're already passing one option
(<c>root=/dev/hda3</c>), but you can pass others as well.  In particular, you can
turn off devfs by default (not recommended unless you know what you're doing) by
adding the <c>gentoo=nodevfs</c> option to the <c>kernel</c> command.

<note>Unlike in earlier versions of Gentoo Linux, you no longer have to add 
<c>devfs=mount</c> to the end of the <c>kernel</c> line to enable devfs.  In rc6
devfs is enabled by default.
</note>
</p>

</body>
</section>
</chapter>
<chapter>
<title>Installation complete!</title>
<section>
<body>
<p>Now, Gentoo Linux is installed.  The only remaining step is to exit the chrooted shell, safely unmount your partitions
and reboot the system:</p>
<pre>
# <i>exit</i> 
<codenote>This exits the chrooted shell; you can also type <c>^D</c></codenote>
# <i>cd / </i>
# <i>umount /mnt/gentoo/boot</i>
# <i>umount /mnt/gentoo/proc</i>
# <i>umount /mnt/gentoo</i>
# <i>reboot</i>
</pre>
<note>
After rebooting, it is a good idea to run the <c>update-modules</c> command to create
the <path>/etc/modules.conf</path> file.  Instead of modifying this file directly, you should
generally make changes to the files in <path>/etc/modules.d</path>.
</note>
<p>If you have any questions or would like to get involved with Gentoo Linux development, 
consider joining our gentoo-user and gentoo-dev mailing lists
(there's a "click to subscribe" link on our <uri link="http://www.gentoo.org">main page</uri>).
We also have a handy <uri link="/doc/desktop.html">Desktop configuration guide</uri> that will
help you to continue configuring your new Gentoo Linux system, and a useful <uri link="/doc/portage-user.html">Portage user guide</uri>
to help familiarize you with Portage basics.  Enjoy and welcome to Gentoo Linux!</p>
</body>
</section>
</chapter>
</guide>

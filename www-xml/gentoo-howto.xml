<?xml version='1.0'?>
<!DOCTYPE guide SYSTEM "../www-xsl/guide.dtd">


<guide link="/doc/gentoo-howto.html">
<title>Gentoo Linux Entwickler HOWTO</title>
<author title="Autor"><mail link="woodchip@gentoo.org">Donny Davies</mail></author>
<author title="Autor"><mail link="drobbins@gentoo.org">Daniel Robbins</mail></author>
<author title="Autor"><mail link="pete@gentoo.org">Peter Gavin</mail></author>
<author title="&#xDC;bersetzer"><mail link="js@ameds.de">Jens Schittenhelm</mail></author>
<abstract>Dieses Dokument ist eine Beschreibung des Gentoo Portage Systems, es erkl&#xE4;rt wie man neue Pakete erstellt 
und ist quasi als Standard f&#xFC;r die Gentoo entwickler gedacht. Es ist noch in Arbeit und wird konstant aktualisiert und auf 
keinen Fall vollst&#xE4;ndig. </abstract>

<version>1.1.1-de</version>
<date> 24. April 2002</date>

<chapter>
	<title>Der Portage Verzeichnisbaum</title>
	<section>
		<title>Einf&#xFC;hrung</title>
		<body><p>Der Portage Verzeichnisbaum ist normalerweise unter /usr/portage zu finden und ist hierarchisch 
		strukturiert bestehend aus Kategorien gefolgt von Paket-Verzeichnissen. Hier ein Beispiel: Die util-linux-2.11g.ebuild 
		Datei ist unter /usr/portage/sys-apps/util-linux zu finden. In diesem Verzeichnis k&#xF6;nnen sich mehrere verschiedene Versionen 
		neben dem util-linux-2.11g.ebuild befinden. Alle unterschiedelichen Pakete teilen sich unabh&#xE4;ngig von ihrer Version dasselbe 
		kategorie/paket Verzeichnis in /usr/portage. </p></body>
	</section>
	<section>
		<title>Was geh&#xF6;rt nicht in den Portage Verzeichnisbaum?</title>
		<body>
			<p>Generell sollte im Portage Verzeichnis nur die .ebuild Dateien und sehr kleine zugeh&#xF6;rige Dateien wie 
			zum Beispiel Patches oder Beispielskonfigurationen gespeichert werden. Diese Dateien sollten immer unter 
			/usr/portage/kategorie/paket/files abgespeichert werden, um das kategorie/paket Verzeichnis nicht zu 
			un&#xFC;bersichtlich machen. Generell ist es f&#xFC;r Entwickler keine gute Idee Bin&#xE4;rdateien (Nicht-ASCII-Dateien) 
			im CVS abzulegen. Wenn dies dennoch notwenig sein sollte (zum Beispiel eine PNG Grafik aus welchem 
			Grund auch immer), dann sollte sie mit der -kb option in das CVS eingebracht werden:
		<pre caption="Code Auflistung 1">
		# cvs add -kb myphoto.png</pre>
		Die -kb option teilt CVS mit, dass myphoto.png eine Bin&#xE4;rdatei ist und einer besonderen 
		Behandlung bedarf. Zum Beispiel das Zusammenf&#xFC;hren von zwei verschiedenen Bin&#xE4;rdateien wird somit nicht erlaubt, 
		was hier auch naheliegend ist. Wenn wir schon beim Zusammenf&#xFC;hren sind, alle Patches die dem Portage Verzeichnisbaum
		hinzugef&#xFC;gt werden, sollten nicht komprimiert sein. Dies erlaubt dann CVS Ver&#xE4;nderungen einzubringen und die Entwickler 
		von dabei m&#xF6;glicherweise entstehenden Konfliken korrekt zu warnen.</p></body> 	
	</section> 
	<section>
		<title>Das files Verzeichnis</title>
		<body><p>Wie vorher bereits beschrieben, existiert in jedem paket Unterverzeichnis das Verzeichnis files. 
		Alle Patches, Konfigurationsdateien oder andere Dateien, die von diesem Paket gebraucht werden, geh&#xF6;ren 
		hier hinein. Selbst erstellte Patches sollten mit einem Versions-Namen versehen werden, wie zum beispiel 
		meinpaket-1.0-gentoo.diff. Die Gentoo Erweiterung im Namen informiert die Benutzer, dass dieser Patch durch 
		uns, den Gentoo Entwicklern, erstellt wurde und nicht aus einer Mailingliste oder sonst wo gezogen wurde. 
		Auch hier sollten die  diffs nicht komprimiert werden, da CVS mit Bin&#xE4;rdateien nicht so gut umgehen kann.</p></body>
	</section>
</chapter>	

<chapter>
	<title>Die ebuild Skripte</title>
	<section>
	<title>Einf&#xFC;hrung</title>
	<body>
	<p>Die ebuild Skripte sind die Grundlage des gesamten Portage Systems. Sie enthalten die gesamte Information
	zum downloaden, entpacken, kompilieren und installieren des Quellcodes aber auch eventuelle &#xE4;nderungen und 
	Konfigurationen , die vor oder nach der Installation oder beim Entfernen durchgef&#xFC;hrt werden. W&#xE4;hrend das meiste
	von Portage in Python geschrieben ist, sind die ebuilds als bash-Skripte gehalten, da dies das Aufrufen von Befehlszeilen
	wie auf der Kommandozeile erm&#xF6;glicht. Eines der Hauptdesign-Prinzipien der ebuild Skripte ist, dass die darin aufgerufenen
	Befehle denen der Kommandozeil entsprechen, wie wenn der Benutzer das Paket manuell installieren w&#xFC;rde. Aus diesem
	Grund ist die bash-Syntax eine gute Wahl.</p>

	<p>Ebuild Skripte werden durch die <c>ebuild</c> und <c>emerge</c> Befehle ausgef&#xFC;hrt. Man muss sich das 
	<c>ebuild</c> Kommando als einfaches Erstellungswerkzeug vorstellen. Es kann ein ebuild erstellen und installieren, 
	aber mehr auch nicht. Es kontrolliert, ob Abh&#xE4;ngigkeiten erf&#xFC;llt sind, kann diese aber nicht selbst&#xE4;ndig aufl&#xF6;sen. Auf
	der anderen Seite ist <c>emerge</c> als hochspezialisierte Zentrale f&#xFC;r <c>ebuild</c>, welches die M&#xF6;glichkeit 
	besitzt, selbst&#xE4;ndig abh&#xE4;ngige Pakete zu installieren, wenn gew&#xFC;nscht als "was w&#xE4;re wenn..." dem Benutzer anzeigen,
	welche ebuilds eingef&#xFC;hrt <e>w&#xFC;rden</e> und vieles mehr. Allgemein sticht <c>emerge</c> den <c>ebuild</c> Befehl
	in allen Belangen aus, bis auf einen Punkt. Mit <c>ebuild</c> kann der Benutzer inkrementell alle unterschiedlichen
	Bereiche einer Paketinstallation (herunterladen, entpacken, kompilieren, installieren und einf&#xFC;hren) Schritt f&#xFC;r Schritt.  
	ausf&#xFC;hren. F&#xFC;r Entwickler ist dies ein unverzichtbares Werkzeug zum debuggen, da nur so Probleme mit dem ebuild
	auf einen kleinen Bereich des Gesamtprozesses eingegrenzt werden k&#xF6;nnen.</p>
	</body>
</section>

<section>
<title>Die Benennung von  ebuild Dateien</title>
	<body>
	<p>Jeder Ebuild Dateiname besteht aus vier Abschnitten:</p>

	<p>Der erste Abschnitt ist der Paketname, der nur aus Kleinbuchstaben, den Zahlen 0-9 und dem Bindestrich ('-')
	enthalten darf. Beispiele sind: <c>util-linux</c>, <c>sysklogd</c> und <c>glibc</c>.  </p>

	<p>Der zweite Abschnitt ist die Versionsnummer des Paketes, welche normalerweise mit der Versionsnummer des
	Quellcode Tarballs &#xFC;bereinstimmt. Diese besteht normalerweise aus zwei oder drei Nummern, die durch Punkte
	von einander getrennt sind, wie zum Beispiel <c>1.2</c> oder <c>4.5.2</c> (sehr lange, durch Punkte
	voneinander getrennte Nummern werden auch unterst&#xFC;tzt) und darf von einen einfachen Buchstaben auf die letzte
	Zahl gefolgt werden, zum Beispiel: <c>1.4b</c> oder <c>2.6h</c>. Die Paketnummer wird mit der Versionsnummer
	durch einen Bindestrich verbunden: <c>foo-1.0</c>, <c>bar-2.4.6</c>, etc.</p>

	<impo>Wenn Sie mit dem Gedanken spielen, einen angeh&#xE4;ngten Buchstaben in Ihrer Versionsnummer zu verwenden,
	sollten Sie dar&#xFC;ber im klaren sein, dass dieser Buchstabe <e>nicht</e> dazu verwendet werden sollte, einen
	eventuellen Alpha oder Beta Status anzuzeigen, da alphas und betas als <e>prereleases</e> z&#xE4;hlen, angeh&#xE4;ngte
	Buchstaben jedoch als <e>neuere Versionen</e>. Das ist eine grosse Unterscheidung, da Portage die Versionsnummer eines
	ebuilds dazu verwendet, herauszufinden, ob es neuer oder &#xE4;lter ist als ein Paket mit gleichem Namen aus derselben
	Kategorie. Es ist sehr wichtig, dass Versionsnummern glaubw&#xFC;rdig die Version eines Paketes repr&#xE4;sentieren, damit
	Portage seine Abh&#xE4;gikeits-Pr&#xFC;fungen korrekt ausf&#xFC;hrt..</impo>

	<p>Der dritte Abschnitt (optional) enth&#xE4;lt eine spezielle Suffix, entweder <c>_alpha</c>, <c>_beta</c>, <c>_pre</c> oder 
	<c>_rc</c>. Alle diese Suffixe werden durch eine Nummer erg&#xE4;nzt, zum Beispiel <c>linux-2.4.0_pre10</c>. Bei identischen
	Versionsummern geht Portage davon aus, dass <c>_alpha</c> &#xE4;lter als <c>_beta</c> ist, <c>_beta</c> &#xE4;lter als <c>_pre</c>
	und <c>_pre</c> &#xE4;ter als <c>_rc</c> ist.</p>
	<note>Ein <c>_rc</c> Paket ist &#xE4;lter als ein Paket ohne vorausgehende  Suffixe mit Unterstrich (z.B. <c>linux-2.4.0</c>)
	und <c>linux-2.4.0</c> ist &#xE4;lter als ein Paket mit einem Buchstaben Pr&#xE4;fix, hier <c>linux-2.4.0b</c>. Nochmal: Diese 
	Versionsinformationen sind wichtig, da Portage es zur Bestimmung heranzieht, ob ein Paket oder ebuild &#xE4;lter oder j&#xFC;nger ist,
	als ein Paket aus der selben kategorie mit gleichem Namen.</note>

	<p>Der vierte Abschnitt (ebenfalls optional) ist die Gentoo Linux spetzifische <e>Revisionsnummer</e>, welche durch <c>-r#</c>
	angegeben wird, wobei <c>#</c> ein Integer (Zahlenwert) ist, als Beispiel: <c>package-4.5.3-r3</c>. Die Revisionsnummer ist
	unabh&#xE4;ngig von der Versionsnummer des Quellpaketes und kann dazu genutzt werden, die Benutzer davon in kennntnis zu setzen, 
	dass es sich um ein neues bzw. erweiterte Revision eines ebuilds handelt.</p>

	<p>Wenn gr&#xF6;ssere Ver&#xE4;nderungen an einem bestehenden ebuild vorgenommen werden, sollte die Datei vorher kopiert und mit einer
	um 1 erh&#xF6;hten Revisionsnummer abgespeichert werden. Die ersten Fassungen besitzen normalerweise keine Revisionsnummer, z.B.
	<path>package-4.5.3</path>, da sie von Portage so betrachtet werden, als ob sie eine Revisionsnummer von Null haben. Das 
	bedeutet f&#xFC;r die Z&#xE4;hlweise: <c>1.0</c> (erste Version), <c>1.0-r1</c>, <c>1.0-r2</c>, und so weiter.</p>

	<p>Und nat&#xFC;rlich gehen wir davon aus, dass der <e>f&#xFC;nfte</e> Abschnitt der ebuild Bezeichnung nicht vergessen wird,
	es ist die <c>.ebuild</c> Endung.</p>
	</body>
</section>

<section>
	<title>Aufbau einer ebuild Datei</title>
	<body><p>1. Setzen der Variablen:</p>
	<p>Der Anfang jeder ebuild Datei besteht aus einigen Variablen, die wie folgt gesetzt werden k&#xF6;nnen:</p>
	<table>
<tr><ti><c>P</c></ti><ti>Der Name und die Versionsnummer des Paketes, dies muss normalerweise nicht gesetzt werden, da es von Portage durch den Dateinamen bestimmt wird</ti></tr>
<tr><ti><c>A</c></ti><ti>Der Name ohne Pfadangabe von dem Haupt-Quellcode des Paketes</ti></tr>
<tr><ti><c>S</c></ti><ti>Das Quellcode-Verzeichnis f&#xFC;r das Paket, im Normalfall${WORKDIR}/${P}</ti></tr>
<tr><ti><c>DESCRIPTION</c></ti><ti>Eine kurze Beschreibung des Paketes in einem Satz</ti></tr>

<tr><ti><c>SRC_URI</c></ti><ti>the URIs for every source file in your package, separated by whitespace; normally the first one is something like &quot;ftp://ftp.company.com/pub/somepackage/${A}&quot;</ti></tr>
<tr><ti><c>HOMEPAGE</c></ti><ti>your package's homepage</ti></tr>
<tr><ti><c>DEPEND</c></ti><ti>build dependencies; see the section <uri link="#dependencies">Package Dependencies</uri></ti></tr>
<tr><ti><c>RDEPEND</c></ti><ti>runtime dependencies; see the section <uri link="#dependencies">Package Dependencies</uri></ti></tr>
</table>
<p>2. ebuild Functions</p>
<p>There are a number of different functions that you can define in ebuild files that control the building and installation process of your package.</p>
<table>
<tr><ti><c>pkg_setup</c></ti><ti>Use this function to perform any miscellaneous prerequisite tasks.  This might include adding system accounts or checking for an existing configuration file.  This function must return 0 in order for processing to proceed.</ti></tr>
<tr><ti><c>src_unpack</c></ti><ti>Use this function to unpack your sources and run autoconf/automake/etc. if necessary. By default, it unpacks the packages in <c>${A}</c>. The default starting directory is <c>${WORKDIR}</c>.</ti></tr>
<tr><ti><c>src_compile</c></ti><ti>Use this function to configure and build the package. Default starting directory is <c>${S}</c>.</ti></tr>
<tr><ti><c>src_install</c></ti><ti>Use this function install the package to an image in <c>${D}</c>. If your package uses automake, you can do this simply with <c>make DESTDIR=${D} install</c>. <e>Make sure your package installs all its files using <c>${D}</c> as the root!</e></ti></tr>
<tr><ti><c>pkg_preinst</c></ti><ti>The commands in this function are run just prior to merging a package image into the filesystem.</ti></tr>
<tr><ti><c>pkg_postinst</c></ti><ti>The commands in this function are run just following merging a package image into the filesystem.</ti></tr>
<tr><ti><c>pkg_prerm</c></ti><ti>The commands in this function are run just prior to unmerging a package image from the filesystem.</ti></tr>
<tr><ti><c>pkg_postrm</c></ti><ti>The commands in this function are run just following unmerging a package image from the filesystem.</ti></tr>
<tr><ti><c>pkg_config</c></ti><ti>You use this function to setup an initial configuration for the package after it's installed. All paths in this function should be prefixed with ${ROOT}.  This function is <e>only</e> executed if and when the user runs: <c>ebuild /var/db/pkg/${CATEGORY}/${PF}/${PF}.ebuild config</c>.</ti></tr>
</table>
</body>
</section>

<section>
<title>Rules for writing an ebuild File</title>
<body>
<p>Since ebuild files are really just shell scripts, you should
use your editor's shell-script mode for editing them. You should use
proper indentation, using only tab characters -- no spaces. Make sure
you set up your editor to put tabstops at 4 spaces. Always make sure
you use braces around your environment variables; e.g. <c>${P}</c>
instead of just <c>$P</c>.</p>

<p>Long lines are wrapped with ' \', thus:</p>
<pre>
./configure \
	--prefix=/usr || die "configure failed"
</pre>

<p>For further details, refer to <path>skel.ebuild</path> (usually
residing in /usr/portage).</p>

<p>If you're using Vim, you can put the following snippet at the bottom
of your .vimrc to make sure you're using the right settings when editing
 anything Gentoo-related.</p>

<pre>
if (getcwd() =~ 'gentoo-x86\|gentoo-src\|portage')
	set tabstop=4 shiftwidth=4 noexpandtab
endif
</pre>
<p>TODO: add stuff about emacs.</p></body>
</section>

<section>
<title><c>USE</c> Variables</title>

<body>

<p>The purpose of USE variables is to allow you to configure Portage to globally
and automatically enable or disable certain <e>optional build-time</e>
features.  Here's an example.  Let's say you're a GNOME fan, and you'd like any
ebuild that has the option of compiling-in optional GNOME support to do
so.  In this case, you'd add <c>gnome</c> to the <c>USE</c> variable in
<path>/etc/make.conf</path>, and then Portage will automatically add optional
GNOME functionality to packages if it is available.  Likewise, if you don't
want optional GNOME features to be added to your ebuilds if they are available,
simply edit <path>/etc/make.conf</path> and make sure that <c>gnome</c> is
<e>not</e> set in the <c>USE</c> variable.  Gentoo Linux has an almost
overwhelming number of USE options, allowing you to have your system configured
exactly the way you want it.

<note> If you unset a USE variable (for example, removing <c>gnome</c> from
<c>USE</c>), this will only instruct Portage to disable <e>optional</e>
build-time support for GNOME.  However, if you <c>emerge</c> an ebuild that
<e>requires</e> GNOME, the package will obviously have GNOME support enabled, as you
would expect.  This also means that
GNOME will be automatically installed (as a dependency) if it hasn't been already.  That's why
it's always a good idea to do an <c>emerge --pretend</c> before doing the
"real" <c>emerge</c>; that way, you'll always know that you're going to get!
</note>

In your own ebuilds, you can check whether a USE variable is set by using the
<c>use &lt;variable&gt;</c> command. The <c>use</c> command prints out the name
of every variable that is present in both <c>USE</c> and its command line. You
would normally use this command as follows:</p>

<p><c>if [ &quot;`use X`&quot; ]; then commands; fi</c></p>


<p>USE variables can also be used to set dependencies. For example, you may
only want to require a package if a certain USE variable is set. This is done
by using the syntax <c>variable? ( mycat/mypackage-1.0-r1 )</c> in the DEPEND
variable for your ebuild. In this example, <c>mycat/mypackage-1.0-r1</c> will
only be required if <c>variable</c> is present in <c>USE</c></p>

<p>Here's an important tip about how to use <c>USE</c>.  Most of the time,
a package will have a <c>./configure</c> script used to perform configuration
steps.  Generally, if your ebuild uses <c>./configure</c>, any optional build-time
functionality will be enabled or disabled by passing the appropriate arguments to
the <c>./configure</c> command.  Here's the best way to handle this.  First,
find out whether the particular <c>./configure</c> option that you want to add
<c>USE</c> support for is is <e>enabled</e> or <e>disabled</e> by default.  If
it's <e>enabled</e> by default, then do things as follows:</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome || myconf="--disable-gnome"
	use mysql || myconf="${myconf} --disable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
<p>
Above, we only check to see if the <c>gnome</c> and <c>mysql</c> <c>USE</c> variables
are disabled.  The <c>use gnome || </c> part tests whether <c>gnome</c> is in the <c>USE</c>
variable, and if not, then sets <c>myconf="--disable-gnome"</c>.  There's no need to explicitly
enable GNOME or MySQL, since for this package, they are both enabled by
default.  However, if a particular feature is <e>disabled</e> by default, you can
use this approach:</p>
<pre>
DEPEND="gnome? ( &gt;=gnome-base/gnome-1.4 )
	mysql? ( &gt;=dev-db/mysql-3.23.49 )"

src_compile() {
	local myconf
	use gnome &amp;&amp; myconf="--enable-gnome"
	use mysql &amp;&amp; myconf="${myconf} --enable-mysql"

	./configure ${myconf} --prefix=/usr --host=${CHOST} || die
	emake || die
}
</pre>
<p>This time, we only explicitly enable GNOME and MySQL support if it's respective <c>USE</c> variable
has been set.  The <c>use mysql &amp;&amp;</c> part tests whether <c>mysql</c> is in the <c>USE</c>
variable, and if so, then sets <c>myconf="${myconf} --enable-mysql"</c>.</p>

<p>The following USE variables are currently used in Gentoo Linux:</p>

<table>
<tr><th>Variable</th><th>Description</th></tr>
<tr><ti>3dfx</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r 3dfx Grafikkarten zu XFree86 hinzu. Siehe dazu auch: voodoo3.</ti></tr>
<tr><ti>3dnow</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r 3dnow multimedia Processor Instructionen hinzu.</ti></tr>
<tr><ti>aalib</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r media-libs/aalib (ASCI-Graphics Library) hinzu.</ti></tr>
<tr><ti>acl</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r sys-apps/acl (XFS dump/restore utilities) hinzu.</ti></tr>
<tr><ti>afs</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r OpenAFS (Verteiltes Dateisystem) hinzu.</ti></tr>
<tr><ti>alsa</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r media-libs/alsa-lib (Advanced Linux Sound Architecture) hinzu.</ti></tr>
<tr><ti>apm</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r APM (Advanced Power Management) hinzu.</ti></tr>
<tr><ti>arts</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r aRts: dem KDE sound daemon hinzu.</ti></tr>
<tr><ti>atlas</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r atlas anstatt von blas in dev-lang/ hinzu.</ti></tr>
<tr><ti>avi</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r Win32 AVI und avifile (avi Bibliothek) hinzu.</ti></tr>
<tr><ti>berkdb</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r sys-libs/db (Berkeley DB f&#xFC;r MySQL) hinzu.</ti></tr>
<tr><ti>bonobo</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r gnome-base/bonobo (Gnome CORBA Schnittstelle) hinzu.</ti></tr>
<tr><ti>crypt</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r Kryptographie hinzu -- benutzt mcrypt oder gpg wo anwendbar.</ti></tr>
<tr><ti>cups</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r CUPS (Common Unix Printing System) hinzu.</ti></tr>
<tr><ti>dga</ti><ti>F&#xFC;gt DGA Unterst&#xFC;tzung f&#xFC;r Xfree86 hinzu (DGA=Direct Graphic Access).</ti></tr>
<tr><ti>directfb</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r DirectFB layer (Bibliotheken f&#xFC;r FB Ger&#xE4;te) hinzu.</ti></tr>
<tr><ti>doc</ti><ti>Erstellt zus&#xE4;tzliche documentation mittels fe.x und gtk-doc </ti></tr>
<tr><ti>dvd</ti><ti>Unterst&#xFC;tzung f&#xFC;r DVDs</ti></tr>
<tr><ti>encode</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r MEncoder oder LaME encoder, wo m&#xF6;glich, hinzu.</ti></tr>
<tr><ti>esd</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r media-sound/esound (Enlightened Sound Daemon) hinzu.</ti></tr>
<tr><ti>evo</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r evolution in gnumeric hinzu.</ti></tr>
<tr><ti>fbcon</ti><ti>Framebuffer Unterst&#xFC;tzung f&#xFC;r die Konsole, &#xFC;ber den Kernel aktivierbar.</ti></tr>
<tr><ti>flash</ti><ti>Unterst&#xFC;tzung f&#xFC;r Flash Dateien mittels Ming.</ti></tr>
<tr><ti>gb</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r Gnome Basic zu gnumeric hinzu.</ti></tr>
<tr><ti>gd</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r sys-libs/gdbm (GNU database libraries) hinzu.</ti></tr>
<tr><ti>gdbm</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r sys-libs/gdbm (GNU database libraries) hinzu.</ti></tr>
<tr><ti>ggi</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r media-libs/libggi (Nicht-X video api/Treiber) hinzu.</ti></tr>
<tr><ti>ggz</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r die Gnu Gaming Zone (http://ggz.sf.net) hinzu.</ti></tr>
<tr><ti>gif</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r GIF Bilder hinzu.</ti></tr>
<tr><ti>gnome</ti><ti>F&#xFC;gt GNOME Unterst&#xFC;tzung f&#xFC;r das jeweilige Paket hinzu.</ti></tr>
<tr><ti>gphoto2</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r Digitalkameras hinzu.</ti></tr>
<tr><ti>gpm</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r sys-libs/gpm (Maustreiber f&#xFC;r die Konsole)</ti></tr>
<tr><ti>gtk</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r x11-libs/gtk+ (The GIMP Toolkit) hinzu.</ti></tr>
<tr><ti>gtkhtml</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r gnome-extra/gtkhtml hinzu.</ti></tr>
<tr><ti>guile</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r dev-util/guile (ein Scheme Interpreter) hinzu.</ti></tr>
<tr><ti>icc</ti><ti>Benutzt den Intel C++ Compiler, wenn das Paket unterst&#xFC;tzung daf&#xFC;r anbietet.</ti></tr>
<tr><ti>icc-pgo</ti><ti>Erlaubt PGO Datenerstellung bzw. deren Nutzung, wenn icc aktiviert ist.</ti></tr>
<tr><ti>imap</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r IMAP hinzu.</ti></tr>
<tr><ti>imlib</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r media-libs/imlib (Bibliothek zum Laden und Rendern von Bildern) hinzu.</ti></tr>
<tr><ti>innodb</ti><ti>F&#xFC;gt innodb Unterst&#xFC;tzung f&#xFC;r mySQL (transaction support) hinzu.</ti></tr>
<tr><ti>ipv6</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r IP version 6 hinzu.</ti></tr>
<tr><ti>java</ti><ti>F&#xFC;gt Java Unterst&#xFC;tzung hinzu.</ti></tr>
<tr><ti>jpeg</ti><ti>F&#xFC;gt JPEG Unterst&#xFC;tzung hinzu.</ti></tr>
<tr><ti>kde</ti><ti>F&#xFC;gt Unterst&#xFC;tzung f&#xFC;r kde-base/kde (K Desktop Enviroment) hinzu.</ti></tr>
<tr><ti>lcms</ti><ti>Adds lcms support to media-gfx/imagemagick (Color management)</ti></tr>
<tr><ti>ldap</ti><ti>Adds LDAP support (Lightweight Directory Access Protocol)</ti></tr>
<tr><ti>libg++</ti><ti>Adds C++ modules in dev-db/postgresql (libpq++)</ti></tr>
<tr><ti>libgda</ti><ti>Adds GNU Data Access (CORBA wrapper) support for gnumeric</ti></tr>
<tr><ti>libwww</ti><ti>Adds libwww support (General purpose WEB API)</ti></tr>
<tr><ti>matrox</ti><ti>Adds Matrox MGA support to mplayer</ti></tr>
<tr><ti>mikmod</ti><ti>Adds libmikmod support to allow playing of SoundTracker-style music files</ti></tr>
<tr><ti>mmx</ti><ti>Adds support for optimizations for Pentium MMX and Athlon class processors</ti></tr>
<tr><ti>motif</ti><ti>Adds motif support (Open Motif)</ti></tr>
<tr><ti>mozaccess-builtin</ti><ti>Adds text-to-speech and eventually braille support mozilla</ti></tr>
<tr><ti>mozctl</ti><ti>Adds Pango like module to mozilla (???)</ti></tr>
<tr><ti>mozilla</ti><ti>Adds mozilla support</ti></tr>
<tr><ti>mozirc</ti><ti>Adds IRC (Internet Relay Chat) module to mozilla</ti></tr>
<tr><ti>mozxmlterm</ti><ti>Adds Xterm like terminal with XML support to mozilla</ti></tr>
<tr><ti>mpeg</ti><ti>Adds libmpeg3 support to various packages</ti></tr>
<tr><ti>mysql</ti><ti>Adds mySQL support</ti></tr>
<tr><ti>nas</ti><ti>Adds support for network audio sound</ti></tr>
<tr><ti>ncurses</ti><ti>Adds ncurses support (console display library)</ti></tr>
<tr><ti>nls</ti><ti>Adds Native Language Support (using gettext - GNU locale utilities)</ti></tr>
<tr><ti>nocardbus</ti><ti>Disables cardbus support in pcmcia-cs</ti></tr>
<tr><ti>odbc</ti><ti>Adds ODBC Support (Open DataBase Connectivity)</ti></tr>
<tr><ti>oggvorbis</ti><ti>Adds support for the OggVorbis audio encoding</ti></tr>
<tr><ti>opengl</ti><ti>Adds support for OpenGL</ti></tr>
<tr><ti>oss</ti><ti>Adds support for OSS (Open Sound System)</ti></tr>
<tr><ti>pam</ti><ti>Adds support PAM (Pluggable Authentication Modules)</ti></tr>
<tr><ti>pcmcia</ti><ti>Adds support for PCMCIA slots/devices found on laptop computers</ti></tr>
<tr><ti>pda</ti><ti>Adds support for portable devices.</ti></tr>
<tr><ti>pdflib</ti><ti>Adds support for PDF (Portable Document Format)</ti></tr>
<tr><ti>perl</ti><ti>Adds support/bindings for the Perl language</ti></tr>
<tr><ti>pic</ti><ti>Adds PIC support to gcc (???)</ti></tr>
<tr><ti>plotutils</ti><ti>Adds plotutils support to gnuplot (library for 2-D vector graphics)</ti></tr>
<tr><ti>png</ti><ti>Adds support for libpng (PNG images)</ti></tr>
<tr><ti>pnp</ti><ti>Adds support for PNP in pcmcia-cs (Plug-N-Play)</ti></tr>
<tr><ti>postgres</ti><ti>Adds support for the postgresql database</ti></tr>
<tr><ti>python</ti><ti>Adds support/bindings for the Python language</ti></tr>
<tr><ti>qt</ti><ti>Adds support for the Qt library</ti></tr>
<tr><ti>qtmt</ti><ti>Adds support for multithreaded QT</ti></tr>
<tr><ti>quicktime</ti><ti>Adds support for OpenQuickTime</ti></tr>
<tr><ti>readline</ti><ti>enables support for libreadline, a GNU line-editing library that most everyone wants</ti></tr>
<tr><ti>ruby</ti><ti>Adds support/bindings for the Ruby language</ti></tr>
<tr><ti>samba</ti><ti>Adds support for SAMBA</ti></tr>
<tr><ti>sdl</ti><ti>Adds support for Simple Direct Layer (media library)</ti></tr>
<tr><ti>slang</ti><ti>Adds support for the slang text display library (it's like ncurses, but different)</ti></tr>
<tr><ti>slp</ti><ti>Adds Service Locator Protocol support to CUPS</ti></tr>
<tr><ti>snmp</ti><ti>Adds support for the Simple Network Management Protocol if available</ti></tr>
<tr><ti>socks5</ti><ti>Adds support for the socks5 proxy</ti></tr>
<tr><ti>spell</ti><ti>Adds dictionary support</ti></tr>
<tr><ti>sse</ti><ti>fast floating point optimisation for Pentium class chips</ti></tr>
<tr><ti>ssl</ti><ti>Adds support for Secure Socket Layer connections</ti></tr>
<tr><ti>static</ti><ti>Causes things to be statically linked instead of dynamically</ti></tr>
<tr><ti>svga</ti><ti>Adds support for SVGAlib (graphics library)</ti></tr>
<tr><ti>tcltk</ti><ti>Support for Tcl and/or Tk</ti></tr>
<tr><ti>tcpd</ti><ti>Adds support for TCP wrappers</ti></tr>
<tr><ti>tetex</ti><ti>Adds support for teTeX</ti></tr>
<tr><ti>tiff</ti><ti>Adds support for the tiff image format</ti></tr>
<tr><ti>truetype</ti><ti>Adds support for FreeType and/or FreeType2 fonts</ti></tr>
<tr><ti>trusted</ti><ti>Builds trusting versions of the pcmcia-cs programs</ti></tr>
<tr><ti>voodoo3</ti><ti>Adds support for 3Dfx's Voodoo3 video chipset, else defaults to Voodoo4/5 support if not in USE</ti></tr>
<tr><ti>X</ti><ti>Adds support for XFree86</ti></tr>
<tr><ti>xface</ti><ti>Adds xface support -- only in use for sylpheed and sylpheed-claws</ti></tr>
<tr><ti>xml</ti><ti>Check/Support flag for XML library (version 1)</ti></tr>
<tr><ti>xml2</ti><ti>Check/Support flag for XML library (version 2)</ti></tr>
<tr><ti>xmms</ti><ti>Check/Support for XMMS (X MultiMedia System) player</ti></tr>
<tr><ti>xv</ti><ti>Adds in optional support for the Xvideo extension (an X API for video playback)</ti></tr>
<tr><ti>zeo</ti><ti>Adds support for Zope Enterprise Objects</ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Filesystem Locations</title>

<section>
<title>Introduction to the FHS</title>
<body>
<p>The filesystem layout standards used in Gentoo Linux closely follow the FHS,
short for <e>Filesystem Hierarchy Standard</e>. A simplified
description of the standard is given here; for a complete
specification go to <uri>http://www.pathname.com/fhs/</uri>.</p>
<note> The <path>/opt</path> hierarchy is addressed in section 3.12 of the FHS.
Section 4.4 deals with the <path>/usr/X11R6</path> directory.  KDE and GNOME are
not specifically addressed, and are in fact not even mentioned in the current
version of the FHS.
</note>
</body>
</section>

<section>
<title>How to fit your packages into the filesystem</title>
<body><p>Usually, if the package uses autoconf and automake, the
default installation destinations are mostly correct, with a few exceptions:</p>
<ul>

<li>If you're installing a program into <path>/bin</path>, <path>/sbin</path>,
<path>/usr/bin</path> or <path>/usr/sbin</path>, then the program's
corresponding man page should be installed into the <path>/usr/share/man</path>
tree.  This can often be accomplished by specifying a  <c>./configure
--mandir=/usr/share/man</c> in the ebuild.</li>

<li>GNU info files should always be installed to <path>/usr/share/info</path>,
<e>even if the info files are about X11, GNOME or KDE-specific programs or
tools</e>.  Make a note: <path>/usr/share/info</path> is the <e>only</e>
official location for GNU info files.  Since most <c>./configure</c> scripts
default to installing GNU info files in <c>/usr/info</c>, it's often necessary
to call <c>./configure</c> with the <c>--infodir=/usr/share/info</c> argument.</li>

<li>Documentation files are installed in <path>/usr/share/doc</path>, into a
subdirectory reflecting the name, version and revision of the particular
program. This applies to all programs: GNOME, KDE, X11 and console alike.
However, some programs may install additional documentation and support files
into a <path>/usr/share</path> hierarchy for their own purposes.
</li>

<li>X11-specific programs and libraries should always be installed into <path>/usr</path>, not
directly into <path>/usr/X11R6</path>.  We reserve the <path>/usr/X11R6</path> hierarchy for
the X Window System, Version 11 Release 6 <e>itself</e>.  This is perhaps a more to-the-letter
interpretation of the FHS than some other distributions have made.</li>

<li>GNOME and KDE programs, similarly, should always be installed into
<path>/usr</path>.</li>

</ul>
<impo> Some distributions choose to install GNOME and KDE into <path>/opt</path>. There
exists no standard for these desktop environments in terms of where to actually install
their files. In the interests of simplicity and consistency, we elect to install all
KDE and GNOME packages into the <path>/usr</path> hierarchy.</impo>

<p>In general, you should have ebuilds install their files into the <path>/usr</path>
tree.  <e>Some</e> programs can be compiled and linked with or without GNOME, KDE and X11 libraries,
which can cause confusion.  Our solution is to install everything into <path>/usr</path>
which avoids ambiguity and needless complexity for ebuild authors.  The location in which to
install a program's files should <e>not</e> depend on the presence or abscence of specific
<c>USE</c> variables.  Therefore, the ebuilds in the portage tree <e>almost always</e>
install into the <path>/usr</path> hierarchy exclusively.</p>

<note>The <path>/opt</path> directory is reserved in Gentoo Linux for binary-only packages.
Examples include mozilla-bin, acroread, netscape and realplayer.  Packages that get
installed here will usually require a <path>/etc/env.d/foo</path> stub file.  This is
so that paths and additional variables can be included into the environment.</note>

</body>
</section>
</chapter>

<chapter>
<title>The Portage scripts and utilities</title>

<section>
<title>Public scripts</title>
<body><p>These are scripts used by the system-administrator to install and remove packages, and maintain the package database.</p>
<p><c>ebuild</c> is the main engine of the Portage system; it performs all major tasks such as unpacking, compiling, installing, merging, and unmerging packages. It is called using the command: <c>ebuild path/to/package.ebuild command</c>. The commands available are:</p>
<table>
<tr><th>Command</th><th>Description</th><th>Related <c>ebuild</c> Function</th></tr>
<tr><ti>*<c>setup</c></ti><ti>performs any miscellaneous commands required before the ebuild can proceed</ti><ti><c>pkg_setup</c></ti></tr>
<tr><ti><c>depend</c></ti><ti>displays the dependencies required to build the package</ti><ti>n/a</ti></tr>
<tr><ti><c>check</c></ti><ti>checks that the package dependencies are fulfilled</ti><ti>n/a</ti></tr>
<tr><ti><c>rcheck</c></ti><ti>checks that the package runtime dependencies are fulfilled</ti><ti>n/a</ti></tr>
<tr><ti><c>merge</c></ti><ti>unpacks, compiles, installs, and merges the package into your filesystem</ti><ti>n/a</ti></tr>
<tr><ti>*<c>qmerge</c></ti><ti>merges the package into your filesystem, assuming that the the unpack, compile, and install stages have already been executed</ti><ti>n/a</ti></tr>
<tr><ti>*<c>unpack</c></ti><ti>unpacks the source tarballs into the work directory</ti><ti><c>src_unpack</c></ti></tr>
<tr><ti>*<c>compile</c></ti><ti>compiles the package</ti><ti><c>src_compile</c></ti></tr>
<tr><ti><c>rpm</c></ti><ti>creates an RPM from the package</ti><ti>n/a</ti></tr>
<tr><ti><c>package</c></ti><ti>creates a Gentoo <c>tbz2</c> package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>prerm</c></ti><ti>executes the pre-removal stage of the package</ti><ti><c>pkg_prerm</c></ti></tr>
<tr><ti>*<c>postrm</c></ti><ti>executes the post-removal stage of the package</ti><ti><c>pkg_postrm</c></ti></tr>
<tr><ti>*<c>preinst</c></ti><ti>executes the pre-installation stage of the package</ti><ti><c>pkg_preinst</c></ti></tr>
<tr><ti>*<c>postinst</c></ti><ti>executes the post-installation stage of the package</ti><ti><c>pkg_postinst</c></ti></tr>
<tr><ti><c>config</c></ti><ti>sets up a default configuration once the package is merged</ti><ti><c>pkg_config</c></ti></tr>
<tr><ti>*<c>touch</c></ti><ti>updates the mtimes for each source archive in the package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>clean</c></ti><ti>cleans the work directory for the package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>fetch</c></ti><ti>fetches the package source tarballs</ti><ti>n/a</ti></tr>
<tr><ti>*<c>digest</c></ti><ti>creates a digest file for the package</ti><ti>n/a</ti></tr>
<tr><ti>*<c>install</c></ti><ti>installs the package into the image directory</ti><ti><c>src_install</c></ti></tr>
<tr><ti><c>unmerge</c></ti><ti>unmerges the package from your filesystem</ti><ti>n/a</ti></tr>
</table>
<p>Note: commands with an asterisk (*) are normally only used by the developer.</p>

<p><c>emerge</c> recursively merges a package and all of its dependencies into your filesystem.
This command has many options, try <c>emerge --help</c> for a list of them.</p>

<p><c>env-update</c> updates the configuration files (including, but not limited to <path>/etc/ld.so.conf</path> and <path>/etc/profile.env</path>) to include changes made by installed packages.</p>
</body>
</section>

<section>
<title>Private Scripts and Commands</title>
<body>

<p>These are scripts you can use in your ebuild files to perform common tasks.</p>

<p>For more detailed instructions, look at the scripts themselves in <path>/usr/lib/portage/bin</path>.</p>

<table>
<tr><ti>into</ti><ti>sets the target prefix (<path>DESTTREE</path>) for <c>dobin</c>, <c>dolib</c>, <c>dolib.a</c>, <c>dolib.so</c>, <c>domo</c>, <c>dosbin</c></ti></tr>
<tr><ti>dobin</ti><ti>installs the specified binaries into <path>DESTTREE/bin</path></ti></tr>
<tr><ti>dodoc</ti><ti>installs the specified files into the package's documentation directory (<path>/usr/share/doc/${PF}/DOCDESTTREE</path>) where <path>DOCDESTREE</path> is settable with <c>docinto</c></ti></tr>
<tr><ti>doexe</ti><ti>installs the specified files with mode <e>EXEOPTIONS</e> into <path>EXEDESTTREE</path>. <e>EXEOPTIONS</e> defaults to -m0755 and is settable via the <c>exeopts</c> command.  <path>EXEDESTTREE</path> is settable via the <c>exeinto</c> command.</ti></tr>
<tr><ti>dohard</ti><ti>creates a hardlink, handles ${D} transparently</ti></tr>
<tr><ti>dohtml</ti><ti>installs the specified files and directories into <path>/usr/share/doc/${PF}/html</path></ti></tr>
<tr><ti>doinfo</ti><ti>installs the specified files into /usr/share/info, then compresses them with gzip</ti></tr>
<tr><ti>doins</ti><ti>installs the specified files with mode <e>INSOPTIONS</e> into <path>INSDESTTREE</path>. <e>INSOPTIONS</e> defaults to -m0644 and is settable via the <c>insopts</c> command.  <path>INSDESTTREE</path> is settable via the <c>insinto</c> command.</ti></tr>
<tr><ti>dolib</ti><ti>installs the specified libraries with mode <e>LIBOPTIONS</e> into <path>DESTTREE/lib</path>. <e>LIBOPTIONS</e> defaults to -m0644 and is settable via the <c>libopts</c> command</ti></tr>
<tr><ti>dolib.a</ti><ti>installs the specified libraries into <path>DESTTREE/lib</path> with mode 0644</ti></tr>
<tr><ti>dolib.so</ti><ti>installs the specified libraries into <path>DESTTREE/lib</path> with mode 0755</ti></tr>
<tr><ti>doman</ti><ti>installs the specified files into <path>/usr/share/man/manX</path>, according to the suffix X</ti></tr>
<tr><ti>domo</ti><ti>used for manually installing .mo files, which are used for storing localized string data</ti></tr>
<tr><ti>donewins</ti><ti>same as <c>newins</c>; its actually a symlink to it.  this is deprecated and exists for compatibility with old ebuilds.  use <c>newins</c> instead</ti></tr>
<tr><ti>dosbin</ti><ti>installs a binary into <path>DESTTREE/sbin</path>, marking it as executable</ti></tr>
<tr><ti>dosed</ti><ti>removes all occurences of ${D} (the installation prefix path) in the specified files</ti></tr>
<tr><ti>dosym</ti><ti>creates a symlink, handles ${D} transparently</ti></tr>
<tr><ti>emake</ti><ti>runs a parallell make. some projects cannot be made in parallell; use make</ti></tr>
<tr><ti>fowners</ti><ti>applies the specified ownership (first argument) to the specified file (second argument) via the chown command, handles ${D} transparently</ti></tr>
<tr><ti>fperms</ti><ti>applies the specified permissions (first argument) to the specified file (second argument) via the chmod command, handles ${D} transparently</ti></tr>
<tr><ti>newbin</ti><ti>wrapper around <c>dobin</c> which installs the specified binary (first argument) in <path>DESTTREE/bin</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newdoc</ti><ti>wrapper around <c>dodoc</c> which installs the specified file (first argument) in <path>/usr/share/doc/${PF}/DOCDESTTREE</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newexe</ti><ti>wrapper around <c>doexe</c> which installs the specified file with mode <e>EXEOPTIONS</e> into <path>EXEDESTTREE</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newins</ti><ti>wrapper around <c>doins</c> which installs the specified file with mode <e>INSOPTIONS</e> into <path>INSDESTTREE</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newlib.a</ti><ti>wrapper around <c>dolib.a</c> which installs the specified library into <path>DESTTREE/lib</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newlib.so</ti><ti>wrapper around <c>dolib.so</c> which installs the specified library into <path>DESTTREE/lib</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newman</ti><ti>wrapper around <c>doman</c> which installs the specified file into <path>/usr/share/man/manX</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>newsbin</ti><ti>wrapper around <c>dosbin</c> which installs the specified file into <path>DESTTREE/sbin</path>, transparently renaming to the second argument</ti></tr>
<tr><ti>pmake</ti><ti>deprecated; use emake instead</ti></tr>
<tr><ti>prepalldocs</ti><ti>recursively gzips all doc files in <path>/usr/share/doc</path>, transparently fixing up any symlink paths</ti></tr>
<tr><ti>prepallinfo</ti><ti>recursively gzips all info files in <path>/usr/share/info</path></ti></tr>
<tr><ti>prepallman</ti><ti>recursively gzips all man pages in <path>/opt/*/man/*</path>, <path>/usr/share/man/*</path>, <path>/usr/local/man/*</path>, <path>/usr/X11R6/share/man/*</path> and transparently fixes up any symlink paths</ti></tr>
<tr><ti>prepall</ti><ti>wrapper around <c>prepallman</c>, <c>prepallinfo</c> and <c>prepallstrip</c>.  also ensures all libraries in <path>/opt/*/lib</path>, <path>/lib</path>, <path>/usr/lib</path> and <path>/usr/X11R6/lib</path> are executable.  also moves any stray aclocal macros into <path>/usr/share/aclocal</path></ti></tr>
<tr><ti>try</ti><ti>deprecated. Use the || die construct instead.</ti></tr>
</table>
</body>
</section>
</chapter>

<chapter>
<title>Package Dependencies</title>

<section>
<title>Why dependencies are important</title>
<body>
<p>Portage is more than just a convenience script that gives you a unified
way to build any one project (program, library) from source. It will also
fetch and install any necessary dependencies if you take care to specify
these in your ebuild.</p>

<p>In the official ebuilds, all dependencies have already been specified,
so when you issue <c>emerge net-www/mozilla/mozilla-1.0</c>, Portage will
insure that all libraries necessary for Mozilla to build and run are
properly installed before Mozilla itself is built.</p>

<p>Portage even distinguishes between build-time dependencies and run-time
dependencies. (Caveat: Currently, Portage installs all build-time and run-time
dependencies and leaves it at that. At a later stage, it will be possible to
trim your installation so that only the run-time dependencies are left installed).
</p>

</body>
</section>

<section>
<title>How to Specify Dependencies in Your ebuild Files</title>
<body>
<p>The <c>DEPEND</c> variable inside your <path>foo-x.y.z.ebuild</path> tells Portage
about which packages are needed to build <path>foo</path>. The <c>RDEPEND</c> variable
specifies which packages are needed for <path>foo</path> to run.
Example:</p>
<pre>
DEPEND="virtual/glibc
        sys-libs/zlib"
RDEPEND="virtual/glibc"
</pre>

<p>This tells Portage that to build <path>foo-x.y.z</path>, the packages
<path>virtual/glibc</path> (more on  virtuals in a bit) and <path>sys-libs/zlib</path>
are needed. It does not say anything about which version of glibc or zlib that are needed,
which means "anything goes".</p>

<p>The "anything goes" is of course a bit scary, and will not work in the general case.
But for central libraries like glibc, which strives very hard to be 100% binary compatible
all the time, it actually works. For other libraries, we can of course specify version
dependencies. There are numerous ways to do this:</p>
<pre>
&gt;=sys-apps/bar-1.2
=sys-apps/baz-1.0
</pre>

<p> &gt;= and = do what you would expect; sys-apps/bar version 1.2 or newer is okay (this means that
sys-apps/bar-2.0 is okay), while sys-apps/baz version 1.0 is the only version that is accepted.</p>

<p>Portage knows of four special suffixes to a version number: <c>-rX</c>, <c>-preX</c>,
<c>-alphaX</c> and <c>-betaX</c> where X is a number (as many digits as you like). Given the
specification <c>&gt;=sys-apps/foo-1.0</c> and the files:</p>
<pre>
sys-apps/frob-1.0-r1
sys-apps/frob-1.0
sys-apps/frob-1.0_pre1
sys-apps/frob-1.0_beta1
sys-apps/frob-1.0_alpha1
</pre>
<p>Portage will arrange them internally in the order listed, and pick the one on the top. This
means it will always pick <c>_beta</c> packages over <c>_alphaX</c>, <c>_preX</c> over <c>_betaX</c>,
non-suffixed over <c>_preX</c> and <c>-rX</c> suffixed over non-suffixed.</p>

<p>Other methods of specifying version dependencies are follow:</p>
<pre>
~sys-apps/qux-1.0
=sys-apps/foo-1.2*
</pre>

<p>~sys-apps/qux-1.0 will select the newest revision of qux-1.0</p>

<p>=sys-apps/foo-1.2* will select the newest member of the 1.2 series, but will ignore
1.3 and later series. That is, foo-1.2.3 and foo-1.2.0 are both valid, while foo-1.3.3
and foo-1.3.0 are not.</p>

</body>
</section>
</chapter>

</guide>

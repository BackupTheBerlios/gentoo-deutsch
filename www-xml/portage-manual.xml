<?xml version='1.0'?>
<!DOCTYPE guide SYSTEM "../www-xsl/guide.dtd">
<guide>
<title>Portage Handbuch</title>
<author title="Author and Editor">
<mail link="blocke@shivan.org">Bruce A. Locke</mail>
</author>
<author title="&#220;bersetzung">
<mail link="sebastian@beneke-it.de">Sebastian Beneke</mail>
</author>
<author title="&#220;bersetzung">
<mail link="jazz_rabbit@berlios.de">Erwin Hengl</mail>
</author>
<abstract>
Dieses Handbuch liefert einen generellen &#220;berblick &#252;ber Portage,
detaillierte Informationen sowie eine Anleitung zur Installation und
Pflege von Paketen des Portage Systems.
</abstract>

<version>0.9.6</version>
<date>18.Juli 2002</date>

<chapter>
<title>Portage: Ein &#220;berblick</title>

<section>
  <title>&#220;berblick</title>
  <body>
	<p>
        Portage ist ein sehr starkes und fortgeschrittenes Paketmanagement System.
        Seine Flexibilit&#228;t und F&#228;higkeit als einfaches Werkzeug zum Kompilieren
        von Software oder als Herzst&#252;ck einer brandaktuellen Linux Distribution 
        zu dienen ist beinahe einzigartig. Die Gentoo Linux Distribution wurde um 
        Portage entwickelt.
	</p>
	<p>
        Gentoo Linux wird oftmals als "Meta-Distribution" bezeichnet. Gentoo 
        besteht aus Portage und &#252;ber 2200 Anleitungen zum Kompilieren von Paketen,
        sogenannten <i>ebuilds</i>. Diese <i>ebuilds</i> geben Portage die 
        Anweisungen wie ein bestimmtes Softwarepaket kompiliert und installiert 
        werden soll. Durch die Benutzung von <i>Profilen</i> und dem Kommandozeilen 
        Programm <i>emerge</i> k&#246;nnen Benutzer und Entwickler Portage dazu nutzen 
        um die Pakete zu installieren und zu pflegen, die die Grundlage des Betriebssystems 
        und der darauf laufenden Anwendungen darstellen.
	</p>
	<p>
        Ein Gentoo Linux wird "on-the-fly" kompiliert, d.h. direkt auf dem entsprechenden 
        Rechner angepasst und erstellt. Der Installationsprozess umfasst das Erstellen eines 
        funktionierenden Compilers sowie einer minimalen Umgebung, in der Portage Sourcecode
        aus dem Internet laden kann, um den Rest des "Systemkerns" und etwaige Anwendungen zu
        installieren. Auch wenn Portage die Benutzung von vorkompilierten Anwendungen 
        unterst&#252;tzt, stellt diese nur einen Kompromiss dar und wird nur zur Installation 
        auf langsamen Maschinen, bzw. von Entwicklern die schnell ein bestimmtes Paket 
        wiederherstellen wollen oder von Benutzern, die Pakete auf einer schnellen Maschine 
        kompilieren um sie dann auf einem langsamen Rechner zu installieren, verwendet.
	</p>
	<p>
        Durch das Kompilieren "on-the-fly" und der Tatsache, dass Portage stark konfigurierbar 
        ist sind nur sehr wenige Gentoo Installationen gleich. Im Grunde wird bei der 
        Installation von Gentoo Linux eine angepasste Linux Distribution erstellt, die sich 
        an den Optionen, wie sie in der Portage Konfiguration und den ebuilds selber definiert 
        sind, orientiert.
	</p>	
	<p>
        Auf den ersten Blick mag die Idee hinter Portage &#228;hnlich dem BSD Ports System sein.
        Beide kompilieren Pakete aus dem Source und erlauben es dem Benutzer Software sicher 
        zu installieren bzw. zu deinstallieren. Beide l&#246;sen Abh&#228;ngigkeiten automatisch auf. 
        Viele Ideen von Portage wurden beim BSD Ports System ausgeliehen, jedoch handelt es 
        sich bei Portage definitiv nicht um eine weitere "Ports-Kopie".
	</p>
	<p>
        Das Portage System ist eine Verbindung aus einem auf Python basierenden Kern und 
        Bash Script basierten <i>ebuilds</i>. Anstatt mit Makefiles und dem <i>make</i> 
        Kommando zu hantieren, verbindet Portage die M&#246;glichkeiten von Python und das 
        einfach zu handhabende Shellscripting mit einigen objektbasierten Charakteren, um 
        ein einzigartig m&#228;chtiges System zu erstellen. Dieses setzt Portage an die Spitze aller 
        aktuellen Ports Systeme.
	</p>
	<p>
        Einige der von Portage angebotenen erweiterten Funktionen sind die M&#246;glichkeit 
        verschiedene Versionen und &#220;berarbeitungen des gleichen Pakets im Tree zu halten, 
        Aufl&#246;sung der entsprechenden Abh&#228;ngigkeiten, feinstrukturiertes Paketmanagement, 
        sichere Installation via Sandbox, Schutz von bestehenden Konfigurationsdateien, 
        Profile und vieles mehr. Viele dieser Funktionen werden noch im Laufe dieses 
        Handbuches genauer erl&#228;utert.
	</p>
  </body>
</section>

<section>
<title>Umgebungsabh&#228;ngige Aufl&#246;sung von Abh&#228;ngigkeiten und Funktions Unterst&#252;tzung</title>
<body>
	<p>
        Das Portage System ist im Hinblick der Flexibilit&#228;t welches es dem User bietet 
        einzigartig. Traditionelle BSD Ports Systeme tendieren dazu nur jeweils eine 
        Version eines jeden Paketes im Tree zu unterst&#252;tzen. Portage hat diese Begrenzungen
        nicht. Es k&#246;nnen mehrere Versionen eines Paketes zur Installation zur Verf&#252;gung 
        stehen.Paketabh&#228;ngigkeiten (Pakete, die zum Kompilieren andere Pakete n&#246;tig sind) 
        k&#246;nnen entweder mit ihrem Namen oder mittels Namen mit zus&#228;tzlich angeh&#228;ngter 
        Versionsnummer definiert werden. Das erm&#246;glicht es mehrere Versionen eines Paketes 
        zeitgleich im Tree zu pflegen.
	</p>
	<p>
        Das Abh&#228;ngigkeits-System unterst&#252;tzt ebenfalls umgebungsabh&#228;ngige Abh&#228;ngigkeiten. 
        Portage hat daf&#252;r ein leistungsstarkes Konzept, die sogenannten <i>USE Settings</i>. 
        Durch das &#228;ndern einer Konfigurations-Variablen in einer Portage Konfiguration, ist 
        es m&#246;glich bestimmte Unterst&#252;tzung f&#252;r Funktionen oder Bibliotheken w&#228;hrend des 
        Kompilierens zu aktivieren bzw. abzuschalten. Dies ist ein sehr flexibles und 
        leistungsstarkes System, welchem wir uns im n&#228;chsten Kapitel widmen werden.
	</p>
	<p>
        Zus&#228;tzlich unterst&#252;tzt Portage Konzept der <i>SLOTs</i>. W&#228;hrend der Entwicklung von 
        Gentoo Linux wurde klar, da&#223; wir &#246;fters mehrere Versionen bestimmter Pakete (wie 
        z.B. Bibliotheken) ben&#246;tigen, um die Anspr&#252;che andere Pakete zu erf&#252;llen. Der
        traditionelle Weg um dieses Problem zu l&#246;sen war es, verschiedene Versionen eines 
        Paketes als unterschiedliche Pakete mit leicht abweichenden Namen zu behandeln.
        </p>
	<p>
        Anstatt verschiedene Versionen als eigene Pakete zu behandeln, brachten die Entwickler 
        Portage bei, wie mehrere Versionen eines Paketes gleichzeitig durch Benutztung von 
        <i>SLOTs</i> zu handhaben sind. Als Beispiel sei hier die g&#228;ngige Freetype Bibliothek 
        genannt. Die 1.x Reihe von Freetype ist mit der 2.x Reihe inkompatibel, jedoch sind 
        oftmals beide Versionen n&#246;tig, um die Abh&#228;ngigkeiten verschiedener Pakete zu erf&#252;llen. 
        Die meisten Distributionen und Ports Systeme tendieren dazu, ein "freetype" Paket f&#252;r 
        Freetype 1.x und ein "freetype2" Paket f&#252;r Freetype 2.x zu f&#252;hren. Dies betrachten wir 
        als beinahe komplett besch&#228;digtes Paketmanagemant System. Wir erg&#228;nzen einfach die 
        <i>SLOT</i> Nummer 1 zur ersten und Nummer 2 zur zweiten Version. Mit dieser 
        Information ist Portage in der Lage beide Reihen zu pflegen und, falls n&#246;tig, beide auf 
        h&#246;here Versionen upzudaten.
	</p>
</body>
</section>

<section>
<title>Profile</title>
<body>

	<p>
        Portage unterst&#252;tzt ein weiteres Konzept, sogenannte <i>Profile</i>. Ein Profil enth&#228;lt 
        eine Liste von Paketnamen und Versionen mit Anweisungen und einigen Standardoptionen, 
        welche von Portage benutzt werden sollen. Ein Profil enth&#228;lt Informationen welche Pakete 
        und welche Versionen jeweils erlaubt bzw. verboten oder als zwingend behandelt werden 
        sollen. Der Benutzer kann zwischen verschiedenen Profilen wechseln in dem er einfach 
        einen Symlink &#228;ndert (<i>/etc/make.profile</i>).
	</p>
	<p>
        Der gesamte Aufwand, welcher bei der Entwicklung von Gentoo Linux betrieben wurde 
        resultiert in einer Sammlung von <i>ebuilds</i> und einem Profil. Dieses Profil 
        beschreibt welche Pakete als Kernpakete f&#252;r den Betrieb des Systems wichtig sind. 
        Das Profil erlaubt dar&#252;ber hinaus den Entwicklern bestimmte Pakete zu blockieren bzw.
        freizuschalten. Dies ist auch n&#252;tzlich um defekte Pakete zwischenzeitlich zu deaktivieren.
        Die <i>ebuild</i> Dateien definieren einfach nur wie bestimmte Pakete von Portage 
        kompiliert und installiert werden sollen, welche durch das Profil verlangt bzw. 
        erlaubt werden.
	</p>
	
</body>
</section>
</chapter>


<chapter>
<title>Portage konfigurieren</title>

<section>
<title>&#220;berblick</title>
<body>
	<p>
        Das folgende Kapitel soll verschiedene Aspekte von Portage abdecken, die jeweils f&#252;r 
        Benutzer wie Entwickler wichtig sind. Portage ist ein sehr flexibles System und Sie
        m&#252;ssen verstehen, wie man Portage richtig konfiguriert, um Ihr System genau auf Ihre
        Bed&#252;rfnisse abstimmen zu k&#246;nnen.
	</p>
	<p>
        Bitte beachten Sie, dass in diesem Dokument der Begriff "Benutzer" Personen mit
        administrativen Rechten definiert. Um die Portage Konfiguration zu &#228;ndern und neue
        Pakete zu installieren bzw. zu entfernen ben&#246;tigen Sie Root-Rechte.
	</p>
</body>
</section>

<section>
<title>Portage Konfigurations Dateien</title>
<body>
	<p>
	Fast alle Konfigurations-Optionen, die weiter unten erkl&#228;rt werden,
	befinden sich in den Dateien /etc/make.conf und /etc/make.global.
	Es ist wichtig zu wissen, das alle Einstellungen, die in /etc/make.conf
	definiert sind, von den Einstellungen, die in /etc/make.global gemacht
	wurden, fast immer &#252;berschrieben werden.
	
	Alle Einstellungen in /etc/make.conf und /etc/make.global k&#246;nnen als
	Global betrachtet werden, solang es Portage betrifft.
	</p>
	<p>

	Wenn Sie &#252;berpr&#252;fen wollen, ob eine Option bereits definiert
	wurde, ist es zu empfehlen, dass Sie zuerst /etc/make.conf &#252;berpr&#252;fen
	und erst dannach die /etc/make.global. Sofern nicht anders angegeben, werden
	Optionen, die in /etc/make.globals definiert wurden, von den Optionen in
	/etc/make.conf &#252;berschrieben.
	
	</p>
</body>
</section>

<section>
<title>USE Einstellungen</title>
  <body>
  	<p>
	Das USE-System ist eine flexible M&#246;glichkeit, um s&#228;mtliche
	Features, die von Anfang an beim Kompilierprozess von Gentoo Linux
	dabei oder erst hinzugekommen sind, ein- bzw. auszuschalten.
	Dies erlaubt eine Administrierbarkeit, wie die Pakete in Verbindung
	mit den angegebenen Features in der USE-Variable, kompiliert werden.
	Zum Beispiel, wenn ein Paket GNOME Support hat, k&#246;nnen Sie diesen
	Support abschalten, indem Sie in der USE-Variable <i>-gnome</i> an-
	geben. Wenn Sie jedoch den Support f&#252;r die Software, die GNOME
	unterst&#252;tzt, aktivieren wollen, dann setzen Sie in der USE-Variable
	ein <i>gnome</i> ein.
	</p>
	<p>Der Effekt der USE Einstellungen auf Pakete ist abh&#228;ngig davon,
	ob die Software und das ebuild Paket selbst, das jeweils gesetzte USE
	Feature optional unterst&#252;tzt. Wenn dem nicht so ist, so wirkt auch
	das jeweilige USE Feature nicht auf diese Software. Auch werden einige 
        Paketabh&#228;ngigkeiten bei mancher Software nicht als optional angesehen,  
        dadurch haben gesetzte USE Einstellungen keine Auswirkungen auf diese 
        vorgeschriebenen Abh&#228;ngigkeiten. Eine Liste der USE Einstellungen, die von 
        einem Paket benutzt werden, k&#246;nnen in der entsprechenden Ebuild Datei in 
        den Zeilen <i>DEPEND</i> und <i>RDEPEND</i> eingesehen werden.
	</p>
	<p>Eine Liste der USE Einstellungen, die von Gentoo Linux benutzt
	werden, k&#246;nnen Sie aus der Datei <i>/usr/portage/profiles/use.desc</i>
	beziehen. Jede USE Einstellung ist jeweils in einer Zeile mit einer
	zus&#228;tzlichen Beschreibung deklariert und erkl&#228;rt, was
	Sie f&#252;r ein Feature aktiviert.
	</p>

	<p>
	Portage bestimmt, welche USE Einstellung ein- bzw. ausgeschaltet ist,
	aufgrund einer &#252;berpr&#252;fung von bis zu vier verschiedenen Stellen,
	wo USE definiert sein kann. Diese Stellen bewirken, dass die USE
	Einstellungen, die an diesen Stellen definiert sind, "aufgestapelt" werden.
	Es durchforstet jede einzelne Stelle und merkt sich jedes USE Feature der
	fr&#252;heren Stellen, ob Sie ein- bzw. ausgeschaltet sind und f&#252;gt
	neu gefundene Features hinzu, so dass es eine lange USE Einstellung
	ergibt.
	Wird zum Beispiel ein Feature an einer fr&#252;heren Stelle abgeschaltet
	und am der aktuellen Stelle, die Portage durchforstet, eingeschaltet, so wird
	das Feature trotz Abschaltens an der fr&#252;heren Stelle wieder eingeschaltet.
	</p>

        <!-- Habe Ort mit Stelle ersetzt und einige Formulierungen angepasst, liesst sich afaik fluessiger [SB] --> 
 
	<p>
	Portage &#252;berpr&#252;ft die Stellen in denen USE Einstellungs definiert werden 
        in der Reihenfolge, wie sie in der Variable <i>USE_ORDER</i> in
	/etc/make.globals angegeben ist. M&#246;chten Sie eine Stelle ausschalten,
	dann entfernen Sie einfach jene in <i>USE_ORDER</i>.
	</p>
	<p>
	Die folgenden Abs&#228;tze beschreiben jeden Ort, der in <i>USE_ORDER</i>
	von der Portages Standard Konfiguration definiert wurde.
	</p>
	
	
	<p><b>Defaults</b></p>
	<p>Portage Profile k&#246;nnen einen Satz von standard USE Features
	beinhalten. Diese standard Features sind bei jedem Profil dabei und
	werden in der Datei make.defaults angegeben. Da /etc/make.profile
        als eine Verkn&#252;pfung zum aktuell benutzten Portage Profil fungiert,
	ist der Satz der standard USE Features des aktuellen Profils
	die Datei /etc/make.profile/make.defaults. Es ist nicht zu empfehlen,
	diese Datei zu bearbeiten aufgrund von zuk&#252;nftige Profil&#228;nderungen,
	die diese &#252;berschreiben w&#252;rde.
	</p>
	
	<p><b>Auto</b></p>
	<p>Diese Pakete sind in der Datei use.defaults im Portage Profil
	(/etc/make.profile/use.defaults) definiert. Jeder Eintrag beinhaltet
	eine USE Feature Bezeichnung und das dazugeh&#246;rende Paket.
	Wenn jenes Paket als USE Feature angegeben wurde, was bereits installiert
	ist, wird es als eingeschaltet betrachtet. Zum Beispiel Sie installierten
	das Paket <i>x11-base/xfree</i> und haben nicht explizit das USE Feature
	X abgeschaltet, dann wird es global eingeschaltet, solange das Paket
	installiert ist. Es ist nicht zu empfehlen, diese Datei zu bearbeiten
	aufgrund von zuk&#252;nftigen Profil&#228;nderungen, die diese &#252;berschreiben
	w&#252;rden.</p>

	<p><b>Conf</b></p>
	<p>Wenn eine <i>USE</i> Option in /etc/make.conf definiert ist, werden
	die USE Features, die in jener Option angegeben wurden, inkludiert.
	Wenn es keine <i>USE</i> Option in make.conf gibt, dann wird /etc/make.globals
	&#252;berpr&#252;ft. Solch ein Eintrag k&#246;nnte wie folgt aussehen:
	</p>

	<pre>
USE="slang readline gpm berkdb gdbm tcpd pam libwww ssl gb tk
     lm_sensors lvm ldap tex bonobo sdl gtk xfs evo pda ldap
     mmx mitshm perl python guile ruby postgres dvd 3dnow tcl
     lcms gif sdl vorbis ogg oss libg++ directfb decss snmp
     gnome X opengl mozilla pdflib gpg -nls gd xface jpilot
     -kde -qt -esd -motif -alsa oggvorbis"
	</pre>

	<p>
	USE Features werden eingeschaltet, indem Sie einfach in der USE-Variable
	angegeben werden. USE Features k&#246;nnen jedoch auch mittels einem davorsetzen 
        eines <i>-</i> Zeichens deaktiviert werden. Zum Beispiel, <i>gnome</i>
	schaltet GNOME Support ein w&#228;hrend <i>-motif</i> den MOTIF Support
	abschaltet.
	</p>
	<p>
	Die <i>USE</i> Option in /etc/make.conf ist der empfohlene Ort, wo man
	USE Features ein- bzw. ausschalten sollte. Diese Datei wird nicht
	automatisch von Portage &#252;berschrieben. Es wird empfohlen, dass Sie hier 
        die USE Einstellungen eintragen, die nicht von den vorangehenden Stellen ein bzw. 
        ausgeschaltet werden sollen. 
	</p>
	
	<p><b>Env</b></p>
	<p>Die USE Features kann man von Hand aus mit seiner eigenen Shell
	Umgebungseinstellung &#252;berschreiben.
	</p>

	<pre>
export USE="-gnome"
emerge net-im/gaim
	</pre>

	<p>Dies erlaubt &#252;ber kurz oder lang, das man spezifische
	Pakete ohne oder mit einem/mehrere USE Feature/s kompilieren kann.
	Diese von Ihnen per Hand &#252;berschriebenen USE Features bleiben
	bestehen, solange Sie in jener Shell Umgebung damit arbeiten.
	Verlassen Sie Ihre Umgebung ("exit"), ist auch das USE Feature weg,
	was Sie von Hand gesetzt haben. 
	</p>
	<note>
        Auch wenn Portage die aktuellen USE Einstellungen zum Zeitpunkt der 
        Installation des Pakets speichert, so sind diese Einstellungen nicht 
        dauerhaft gespeichert. Sollte dieses Paket in der Zukunft erneut installiert 
        bzw. upgedated werden, wird nur die aktuell im System definierte USE Einstellung 
        angewendet und keinesfalls die zum Zeitpunkt der Erstinstallation geltende.</note>

  </body>
</section>

<section>
<title>Compiler Optionen</title>
<body>
	<p>
        Die Compiler Optionen, welche von Portage zum kompilieren von Paketen genutzt 
        werden, k&#246;nnen in /etc/make.conf gesetzt werden indem <i>CHOST</i>, <i>CFLAGS</i> 
        und <i>CXXFLAGS</i> editiert werden. Die <i>CHOST</i> Einstellung gibt an, auf 
        welcher Plattform Sie kompilieren. <i>CFLAGS</i> und <i>CXXFLAGS</i> geben 
        Compiler Einstellungen an w&#228;hrend C bzw. C++ kompiliert wird.
	</p>
	<p>
        Es werden Ihnen einige kommentierte Standard Einstellungen f&#252;r unterschiedliche 
        Plattformen angeboten. Diese Einstellungen k&#246;nnen als getestet und stabil angesehen 
        werden. Diese zu &#228;ndern, k&#246;nnte zu Fehlern in der Software und dem Compiler 
        f&#252;hren. Bitte seien Sie beim &#228;ndern der Standard Einstellung vorsichtig, da Sie 
        ein unbenutzbares bzw. besch&#228;digtes System erhalten k&#246;nnten.
        </p>
	<p>
        Benutzer eines Multiprozessor Systems k&#246;nnten einige Vorteile erhalten, indem sie in 
        /etc/make.globals die Option <i>MAKEOPTS</i> editieren. Diese Option wird w&#228;hrend des 
        Kompilierungsvorganges an <i>make</i> &#252;bergeben um mehrere GCC Instanzen zu aktivieren.
	</p>
	
</body>
</section>

<section>
<title>Lage der Verzeichnisse</title>
<body>
	<p>
        Portage erlaubt es Ihnen zu bestimmen in welchen Verzeichnissen Pakete kompiliert 
        und verschiedene Dateien gespeichert werden sollen. Die meisten Benutzer werden 
        diese Optionen nicht ben&#246;tigen. Folgende Optionen k&#246;nnen genutzt werden:
        </p>

	<ul>
	<li><i>PORTDIR</i> - Position des Portage Trees</li>
	<li><i>DISTDIR</i> - Lokaler Cache der runtergeladenen Pakete</li>
	<li><i>PKGDIR</i> - Ort der lokal erzeugten tbz2 Pakete</li>
	<li><i>RPMDIR</i> - Ort der lokal erzeugten RPM Pakete</li>
	<li><i>CURRENTFILE</i> - ???</li>
	<li><i>PORTAGE_TMPDIR</i> - Kurzfristiger Platz zum Kompilieren der Pakete</li>
	<li><i>BUILD_PREFIX</i> - Geh&#246;rt zu PORTAGE_TMPDIR</li>
	<li><i>PKG_TMPDIR</i> - Geh&#246;rt zu PKG_TMPDIR</li>
	</ul>
</body>
</section>
	

<section>
<title>Schutz der Konfigurations Dateien</title>
<body>
	<p>
        Portage erlaubt den Schutz aller Konfigurations Dateien in bestimmten 
        Verzeichnissen. Portage wird in gesch&#252;tzten Verzeichnissen keine Dateien 
        &#252;berschreiben. Wenn ein Paket versucht, bereits existierende Dateien zu 
        &#252;berschreiben, wird die entsprechende Datei nach dem Muster
        <i>._cfg0000_name</i> umbenannt. Dies geschieht damit der Benutzer sp&#228;ter 
        die neue Datei einsehen kann, um die Unterschiede manuell einzuf&#252;gen.
        </p>
	<p>
        Gesch&#252;tzte Verzeichnisse k&#246;nnen &#252;ber <i>CONFIG_PROTECT</i> entweder in 
        /etc/make.conf oder /etc/make.globals definiert werden. Bestimmte Dateien 
        und Unterverzeichnisse unterhalb gesch&#252;tzter Verzeichnisse k&#246;nnen durch
        <i>CONFIG_PROTECT_MASK</i> vom Schutz ausgenommen werden.
	</p>
	<p>
        Das Folgende ist nur ein Beispiel und sollte nicht blind kopiert werden:
	</p>

<pre>
CONFIG_PROTECT="/etc /usr/share/config /usr/kde/2/share/config"
CONFIG_PROTECT_MASK="/etc/gconf /etc/init.d /etc/pam.d"
</pre>

	<p>
        Benutzer k&#246;nnen mehr Informationen &#252;ber den Schutz von Konfigurations 
        Dateien erfahren, indem sie folgendes in ihrer Shell eingeben:
	</p>

<pre>
emerge --help config
</pre>

</body>
</section>

<section>
<title>FUNKTIONEN</title>
<body>
	<p>
        Portage bietet eine ganze Menge Optionen, die auf Entwickler abzielen, 
        welche regeln wollen wie sich Portage verh&#228;lt und nach der Installation 
        verschiedener Paketstufen aufr&#228;umt. Diese Optionen sollten nur f&#252;r
        Entwickler interessant sein. Bei normalen Benutzern k&#246;nnten sie Probleme 
        verursachen.
	</p>
	<p>
        Eine Liste an Funktionen kann unter <i>FEATURES</i> entweder in 
        /etc/make.conf oder /etc/make.globals aktiviert werden. Hier eine Liste 
        der verf&#252;gbaren Funktionen:
        </p>
	<p>
	<ul>
	<li><i>digest</i> : Erstellt automatisch einen Digest f&#252;r neue Ebuilds.</li>
	<li><i>cvs</i> : Erg&#228;nzt neue Ebuild Digests automatisch ins CVS.</li>
	<li><i>sandbox</i> : Aktiviert das Sandboxverfahren.</li>
	<li><i>noclean</i> : Portage r&#228;umt nach dem kompilieren nicht auf.</li>
	<li><i>noauto</i> : F&#252;hrt keine wichtigen Ebuild Schritte automatisch aus.</li>
	</ul>
	</p>
</body>
</section>

<section>
<title>Portage SYNC Einstellungen</title>
<body>
	<p>Portage hat die M&#246;glichkeit, den Portage Tree zu erneuern mit
	zwei verschiedenen Methoden: rsync oder anonymous CVS. Sie k&#246;nnen
	angeben, welche Methode Portage ben&#252;tzen soll, um das update
	durchzuf&#252;hren. Jene Methode k&#246;nnen Sie &#252;ber die <i>SYNC</i>
	Option, die sich in der Datei /etc/make.conf befindet, angeben.
	</p>

	<p><b>RSYNC</b></p>

	<p>Es ist empfohlen, die rsync Methode zu benutzen, es sei denn Sie
	planen, Ihre eigenen Ebuilds zu entwickeln. Das w&#252;rde die Last unserer
	Server deutlich reduzieren als wenn Sie anonymous CVS verwenden w&#252;rden.
	In jenem Fall, rsync ist die standard Methode, welche in /etc/make.conf
	angegeben wurde.
	Sie k&#246;nnen sie folgenderma&#223;en angeben:
	</p>

<pre>
SYNC="rsync://cvs.gentoo.org/gentoo-x86-portage"
</pre>

	<note>
        Die Rsync Methode &#252;berschreibt blind alle Ver&#228;nderungen, die an Ihrem 
        lokalen Portage Tree vorgenommen wurden. Falls Sie lokale &#196;nderungen 
        behalten m&#246;chten, m&#252;ssen Sie die Anonymous CVS Methode w&#228;hlen.
        </note>

	<p><b>Anonymous CVS</b></p>

	<p>
        Portage kann den lokalen Portage Tree mit einem bestimmen anonymen CVS 
        Server abgleichen. Dies ist besonders f&#252;r Entwickler sinnvoll, die verhindern 
        wollen, dass Ihre Ver&#228;nderungen am Portage Tree beim Abgleichen &#252;berschrieben 
        werden. Diese Methode kann folgenderma&#223;en aktiviert werden:
        </p>

<pre>
SYNC="cvs://:pserver:anonymous@gentoo.org:/home/anoncvs"
</pre>

	<note>Anonymous CVS ist langsam und sehr Ressourcenintensiv f&#252;r
	den Server als auch f&#252;r den Client (lokal). Wir m&#246;chten
	Sie darum bitten, das Sie die rsync Methode verwenden, wenn Sie keine
	&#228;nderungen im lokalen Portage Tree vornehmen wollen.
	</note>

	<p>Bevor Sie beginnen Anonymous CVS zu benutzen, um Ihre lokale
	Kopie mit jenem offiziellen Portage Tree zu synchronisieren, m&#252;ssen
	Sie zuerst den neuesten	Tree mittels des
	cvs tools mit folgender Vorgangsweise herunterladen ("checkout"):
	</p>
<pre>
# Sichern des alten Portage Trees
cd /usr
mv portage portage.old

# Herunterladen ("checkout") des Trees
cvs -d :pserver:anonymous@gentoo.org:/home/anoncvs login
# Bet&#228;tigen Sie einfach Enter bei der Passwortabfrage
cvs -d :pserver:anonymous@gentoo.org:/home/anoncvs co gentoo-x86

# Verschieben Sie den neuen Tree zur gewohnten Stelle
mv gentoo-x86 portage
</pre>

	<p><b>Entwickler CVS</b></p>

	<p>
        Entwickler mit vollem Zugang zum CVS k&#246;nnen auch <i>emerge</i> den lokalen
        Tree mit dem CVS abgleichen lassen, welches sie mittels RSH oder SSH erreichen 
        k&#246;nnen.
	</p>
	<p>
	Laden Sie einfach den CVS Tree mittels Ihres Accounts herunter ("checkout"), 
        verschieben Sie jenen nach /usr/portage und benutzen
	Sie folgende <i>SYNC</i> Option:
	</p>
	
<pre>
SYNC="cvs://Ihr_account@cvs.gentoo.org:/home/cvsroot"
</pre>

</body>
</section>

<section>
<title>Spiegelungen (Mirrors)</title>
<body>
	<p>
        Das Gentoo Projekt beinhaltet eine lokale Spiegelung von allen
	Archivdateien, die als Ebuild im Portage Tree vorliegen. Meistens
	werden Source Tarballs usw. auf langsamen Servern gespeichert, die 
        ziemlich oft ausfallen k&#246;nnen. Auch Entwickler entfernen
	regelm&#228;ssig alte Versionen Ihrer Software von FTP-Seiten,
	wenn neue Releases gemacht wurden. Um das Leben von Benutzer, die
	die Gentoo Distribution nutzen, zu erleichtern, spiegeln wir diese
	Dateien. Das erlaubt ein schnelleres und sicheres Herunterladen
	der Archivdateien von Spiegelungsservern, die n&#228;her an Ihrem
	Standort liegen.
	</p>
	<p>
	Wann auch immer Sie vorhaben, ein Paket herunterzuladen, indem Sie es
	"mergen", versucht Portage zu aller erst unseren Spiegelungsserver
	f&#252;r die angeforderten Archive zu erreichen . Wenn sich auf jenem 
	Server die ben&#246;tigten Dateien nicht befinden, versucht Portage
	den jeweiligen HTTP oder FTP Server, der im Ebuild Paket
	angegeben ist.
	</p>
	<p>
	Die Angabe des Spiegelungsserver, welchen Portage benutzt, erfolgt
	in der <i>GENTOO_MIRRORS</i> Option, die sich in der Datei /etc/make.conf
	befindet. 

	Das Folgende ist die standard Einstellung:
	</p>
<pre>
GENTOO_MIRRORS="http://www.ibiblio.org/gentoo"
</pre>
	<p>F&#252;r einen Gentoo Spiegelungsserver in Ihrer N&#228;he,
	besuchen Sie die Gentoo Webseite oder fragen Sie in Ihrer Mailinglist
	nach einem f&#252;r Sie g&#252;nstigeren Server.
	</p>
</body>
</section>

<section>
<title>Download-Programm</title>
<body>
	<p>
        Das Programm, welches von Portage zum Download der ben&#246;tigten Dateien 
        genutzt wird, kann durch die Optionen <i>FETCHCOMMAND</i> und 
	<i>RESUMECOMMAND</i> angegeben werden. Einige Beispiele werden in 
        /etc/make.conf und /etc/make.globals gezeigt. Als Standard Toll verwendet 
        Portage wget, welches den meisten Anforderungen gen&#252;gen sollte.
	</p>

	<note>
        Portage gibt Informationen &#252;ber HTTP und FTP Proxies an das jeweilige 
        Download-Programm weiter, die in den HTTP_PROXY und FTP_PROXY Optionen 
        definiert sind.
        </note>
</body>
</section>

<section>
<title>Proxies</title>
<body>
	<p>
        Portage kann angewiesen werden, zum Download HTTP oder FTP Proxies zu nutzen 
        Die Proxies k&#246;nnen bei den Optionen <i>HTTP_PROXY</i> und <i>FTP_PROXY</i> 
        entweder in /etc/make.conf oder /etc/make.globals angegeben werden. Auch hier 
        sollten die Einstellungen vorzugsweise in /etc/make.conf erfolgen. Wenn HTTP 
        und FTP &#252;ber den gleichen Proxy erfolgen soll, k&#246;nnen Sie auch einfach die 
        Option <i>PROXY</i> nutzen.
        </p>
	
	<p>Im Folgenden ein Beispiel:</p>

<pre>
HTTP_PROXY="http://192.168.1.1:8080"
FTP_PROXY="http://192.168.1.1:8080"

or

PROXY="http://192.168.1.1:8080"
</pre>

	<p>
        Portage kann ebenfalls angewiesen werden einen HTTP Proxy zur Verwendung von 
        Rsync zu nutzen. Dies kann durch die Option <i>RSYNC_PROXY</i> in 
        /etc/make.conf oder als Umgebungsvariable aktiviert werden
        </p>
	<p>
	Im Folgenden ein Beispiel:
	</p>

<pre>
RSYNC_PROXY="192.168.1.1:8080"
</pre>

	<note>
        Sollten Sie hinter einer Firewall sitzen und Rsync scheint Ihren HTTP 
        Proxy nicht nutzen zu k&#246;nnen, k&#246;nnen Sie Ihren Portage Tree durch einen 
        Snapshot Tarball updaten. Diesen k&#246;nnen Sie von <uri>http://www.ibiblio.org/gentoo/snapshots/</uri> 
        herunterladen.
	</note>

</body>
</section>

<section>
<title>Verschiedene Optionen</title>
<body>
	<p>Die folgenden Optionen k&#246;nnen f&#252;r einige Nutzer sinnvoll sein:</p>

	<ul>
	<li><i>NOCOLOR</i> : Erlaubt es dem Benutzer, das Verwenden von Farben bei Ausgaben von emerge zu deaktivieren.</li>
	<li><i>CLEAN_DELAY</i> : Dadurch verz&#246;gert Portage das Entfernen von Paketen, um Nutzern die M&#246;glichkeit zum Abbruch zu geben. Diese Zeit kann hier angegeben werden. Um das Verz&#246;gern zu verhindern, sollte die Zeit auf "0" gestellt werden.</li>
	</ul>

</body>
</section>

</chapter>

<chapter>
<title>Paketmanagement</title>

<section>
<title>Updaten des Portage Trees</title>
<body>
	<p>
        Der Portage Tree, welcher in /usr/portage liegt, enth&#228;lt die Bibliothek der 
        "Bauanleitungen" f&#252;r verschiedene Pakete (sogenannte <i>ebuild</i>). Dar&#252;ber 
        hinaus enth&#228;lt der Tree auch noch Informationen aus dem Profil und der Datei 
        package.mask, welche wichtig sind, um das System aktuell zu halten. Um 
        immer die aktuellsten Versionen und neuesten Bugfixes zu haben, ist es wichtig 
        den Tree regelm&#228;&#223;ig mit dem offiziellen Tree abzugleichen. Sie k&#246;nnen den 
        Portage Tree mittels folgendem Kommando updaten:
	</p>
<pre>
emerge rsync
</pre>
	<p>
        Die Methode, welche von Portage genutzt wirds, kann ge&#228;ndert werden. Schauen Sie 
        unter <i>Portage SYNC Einstellungen</i> im <i>Portage konfigurieren</i> Kapitel 
        nach, um weitere Informationen zu erhalten.
	</p>
</body>
</section>

<section>
<title>Pakete installieren</title>
<body>
	<p>
        Der Vorgang des Kompilierens und Installierens eines Paketes durch Portage wird 
        als <i>mergen</i> bezeichnet. Portage kompiliert Pakete und installiert diese 
        kurzfristig in ein "Abbild-Verzeichnis", in dem es die zu installierenden Dateien 
        aufzeichnet. Diese Dateien werden dann aus dem "Abbild-Verzeichnis" ins Root (/) 
        Dateisystem integriert (gemerged).
	</p>
	<p>
        Das <i>emerge</i> Kommando dient als Front-End des Portage Systems. Das Installieren 
        und Entfernen von Paketen wird durch dieses Kommando und seine unz&#228;hligen Argumente 
        kontrolliert.
	</p>
	<p>
        Um die neueste, unmaskierte Version eines Paketes zu installieren, geben Sie einfach 
        den Paketnamen, wie folgt ein (Beispiel):
	</p>
<pre>
emerge galeon
</pre>
	<p>
        Dieses Kommando wird zun&#228;chst alle ben&#246;tigten Abh&#228;ngigkeiten (bereits alle USE 
        Einstellungen ber&#252;cksichtigt) und dann die neueste und unmaskierte Version von 
        Galeon kompilieren und installieren. Galeon k&#246;nnte auch mit vollem qualifizierten 
        Namen inklusive Kategorie angegeben werden: <i>net-www/galeon</i>
	</p>
	<p>
        Das <i>emerge</i> Kommando akzeptiert auch die Angabe von direkten Ebuild Dateien. 
        Dies erlaubt dem Nutzer auch &#228;ltere Versionen einers bestimmten Paketes oder
        Ebuilds einer dritten Partei zu installieren. Das Folgende ist ein Beispiel:
	</p>
<pre>
emerge /usr/portage/net-www/galeon/galeon-1.2.0-r3.ebuild
</pre>
	<p>

        Zus&#228;tzlich zum angeben eines Paketnamens oder einer Ebuild Datei, unterst&#252;tzt 
        <i>emerge</i> verschiedene weitere Argumente. Eines dieser Argumente ist 
        <i>--pretend</i>, vielleicht eines der n&#252;tzlichsten. Durch dieses Argument 
        wird das geplante Vorgehen nicht durchgef&#252;hrt. Stattdessen gibt Portage eine 
        Liste aller zu installierenden Pakete aus. Das Folgende zeigt eine Auflistung 
        der Pakete, die w&#228;hrend der Installation der neuesten Version des 
        Kdevelop Paketes installiert w&#252;rden:
	</p>

<pre>
root@kodiak blocke # emerge --pretend kdevelop             

These are the packages that I would merge, in order.

Calculating dependencies ...done!
[ebuild  N   ] kde-base/kdelibs-2.2.2-r4 to /
[ebuild  N   ] dev-util/kdbg-1.2.2 to /
[ebuild   U  ] app-text/psutils-1.17 to /
[ebuild   U  ] app-text/a2ps-4.13b-r3 to /
[ebuild   U  ] app-text/jadetex-2.20 to /
[ebuild  N   ] app-text/sgmltools-lite-3.0.3-r2 to /
[ebuild  N   ] kde-base/kdoc-2.2.2-r1 to /
[ebuild  N   ] net-www/htdig-3.1.5-r2 to /
[ebuild  N   ] app-text/enscript-1.6.3-r1 to /
[ebuild  N   ] kde-base/kdebase-2.2.2-r2 to /
[ebuild  N   ] app-doc/qt-docs-2.3.1 to /
[ebuild  N   ] dev-util/kdevelop-2.0.2 to /
</pre>
	<p>Pakete, die mit einem <i>N</i> gekennzeichnet sind, befinden
	sich noch nicht installiert auf Ihrem Rechner, wobei durch diese
	Aktion es installiert wird. Pakete, die mit einem <i>U</i>
	gekennzeichnet werden, befinden sich bereits installiert auf
	Ihrem System (wobei es sich h&#246;chstwahrscheinlich um veraltete
	Pakete handelt) und werden durch diese Aktion aktualisiert.
	</p>
	<p>
	Folgende Parameter sind ausserdem Verf&#252;gbar:	
	</p>
	<p>
	<i>--fetchonly</i> : Ladet alle ben&#246;tigten Dateien herunter, die
	f&#252;r das Kompilieren notwendig sind sowie alle Abh&#228;ngigkeiten,
	die dadurch entstehen.
	</p>
	<p>
	<i>--emptytree</i> : Diese Option l&#228;sst Portage vort&#228;uschen,
	das keines der Abh&#228;ngigkeiten von dem Paket oder 
	<!-- blablabla, sehr lang gegruebelt, bitte helfen! /:-) (EH)

	Originaltext:
	
	This option makes Portage pretend that none of the
	dependencies of this package or the packages it depends upon are 
	installed. 
	
	--> 

	Dies ist n&#252;tzlich mit der Option <i>--pretend</i>, um eine komplette
	Liste der Abh&#228;ngigkeiten f&#252;r jedes einzelne Paket anzeigen
	zu lassen.

	<!-- Gut so? heute hab ichs nicht so drauf mitm Uebersetzen :-)) (EH)

	Originaltext:
	
	This is useful with pretend to display a complete
	tree of dependencies for any particular package.  All dependencies
	except for glibc are displayed.

	-->
	
	</p>
	<p><i>--nodeps</i> : Portage attempts to merge only the specified
	packages and ignores any dependencies.  If you do not have the 
	appropriate dependencies already installed then compilation may
	fail.
	</p>
	<p><i>--onlydeps</i> : Only dependencies for a given package are
	merged.  The specified package is <u>not</u> merged.
        </p>
	<p><i>--noreplace</i> : Skips the merge of specified packages if they
	are already installed
	</p>
	<p><i>--usepkg</i> : Instead of compiling the specified packages
	Portage will attempt to use pre-compiled tbz2 packages from a specified
	location.  The location is specified by the <i>PKGDIR</i> shell
	environment variable.
	</p>
	<p><i>--debug</i> : The ebuild environment is instructed to become 
	much more verbal.  This is useful for developers trying to track 
	down syntax errors in bash script based ebuild files.
	</p>
	<p><i>--autoclean</i> : Forces <i>emerge</i> to clean out
	package-specific temporary build directories before it starts
	to build a package.  Portage does this by default so this option
	is only useful to developers who disabled this default behavior.
	</p>
	<p><i>--verbose</i> : Tells <i>emerge</i> to run in verbose mode.
	Currently, this only causes GNU info errors to be displayed.  These
	errors can be safely ignored by users.
	</p>
</body>
</section>

<section>
<title>Unmerging Packages</title>
<body>
	<p>The act of "unmerging" is to remove the files associated with
	an installed package from the filesystem.  The software in the package
	is removed from the system and can no longer be used until it is 
	remerged.
	</p>
	<p>Packages are removed by invoking the <i>emerge</i> command and
	specifying the <i>unmerge</i> argument followed by the name of the
	package to be removed.  The following example would unmerge all
	installed versions of the <i>ltrace</i> package:
	</p>

<pre>
emerge unmerge ltrace

or

emerge unmerge dev-util/ltrace
</pre>
	<p>Portage also allows for a specific versions of packages
	to be unmerged. Ranges are specified using <i>=</i> (exact version),
	<i>&lt;</i> (less then), <i>&gt;</i> (greater then), <i>&lt;=</i> 
	(less then or equal to), and <i>&gt;=</i> (greater then or equal to).
	The following would unmerge all versions of ltrace equal to 
	version 0.3.15 and older:
	</p>

<pre>
emerge unmerge \&lt;=dev-utils/ltrace-0.3.15
</pre>

	<p>When specifying package ranges it is important to escape <i>&gt;</i>
	and <i>&lt;</i> characters so your shell does not interpret them.
	Also you will need to specify the category in the package name as 
	shown in the example.  For another example of how package
	range specifications work see the <i>emerge --help</i> command.
	</p>

	<warn>Unmerging packages can be dangerous.  If you remove any
	core packages your system may cease to function and 
	the removal of various libraries may cause software to fail.
	<b>Portage does not warn you if you are removing core packages
	or dependencies for other packages.</b>
	</warn>

	<p>If the package to be removed is in fact installed the emerge
	program will display exactly what packages are to be removed and
	will wait a specified number of seconds to give the user time to
	cancel.  During this waiting period the user may press Control-C
	to cancel before the unmerge beings.
	</p>
	<p>
	Once the unmerge begins you will see a long list of filenames 
	belonging to the package displayed.  Some of these filenames
	will have a flag displayed to the left of the filename.
	The flags <i>!mtime</i>, <i>!empty</i>, and <i>cfg</i> specify
	reasons why certain files were not removed when this package
	was unmerged.  Files listed without any of these three flags
	were removed from the filesystem successfully.
	</p>
	<p>
	The <i>!mtime</i> flag means the file was modified after this specific 
	version of the package was installed.  This means that someone
	edited this file after the package was installed or some other package
	overwrote the file at a later time.  This allows for packages to be
	updated to newer versions without fear that unmerging the older
	installed version will remove vital files.  
	</p>
	<p>
	The <i>!empty</i> flag refers to directories which Portage refuses 
	to remove due to the directory not being empty (multiple packages 
	often claim ownership to the same directories).  Configuration File 
	protection kicks in when you see the <i>cfg</i> flag.  This means 
	a newer installed package is claiming ownership of this particular
	configuration file and Portage refuses to remove it.
	</p>
	<warn>Files are considered owned by the last package installed.
	This is dependent on the order of installation and is independent
	of the actual version number or revision number of the packages
	installed.  Removing the newest installed package that claims a certain
	file will always remove the file even if older packages installed
	versions of the same file in the past (assuming the user did not 
	manually modify the file).
	</warn>
	
</body>
</section>

<section>
<title>System Update</title>
<body>
	<p>Portage supports the ability to upgrade installed packages
	automatically with a single command.  The system update feature
	allows users to update the "core" packages to versions recommended
	by Gentoo core developers as being important to the operation
	of any Gentoo Linux system.  A system update does not update
	nonessential packages, only those packages defined in the Portage
	profile as being essential for the operation and maintaince of 
	a system.
	</p>
	<p>
	To perform a system update issue the following command:
	</p>
<pre>
emerge --update system
</pre>
	<p>Portage will then compile and install updates depending on
	what versions and packages you have installed and what is recommended
	by the current Portage profile.  Users can use the <i>--pretend</i>
	argument with the above example to get a list of what would be
	installed and upgraded during this action.
	</p>
	<note>You will notice in the install instructions that one of the
	first steps is to run <i>emerge system</i> to install the base
	(or "core") packages.  <i>emerge --update system</i> updates
	those base packages to the latest recommended versions.
	</note>
</body>
</section>

<section>
<title>World Update</title>
<body>
	<p>Portage also supports the ability to automatically upgrade
	selected non-essential packages with a single command.  The portage
	system has a degree of intelligence built into it to allow for the 
	safe upgrading of a system where multiple versions of conflicting 
	packages may be available.</p>

	<p>Portage's world update feature checks the system profile, the
	list of blocked packages (<i>package.mask</i>), the world profile and 
	the dependencies (including version ranges) of packages listed 
	in the world profile when determining which packages need upgrading.
	A package is only upgraded if a newer version exists and the package
	is listed in the world profile or is a dependency of a package in the 
	world profile.  In addition the package or specific version of the 
	package must not be blocked by the system profile or in 
	<i>package.mask</i>.
	</p>

	<p>When considering which packages to upgrade, Portage tries to 
	upgrade all packages mentioned in the world profile to the newest
	unblocked version available.  Portage also considers the dependencies
	of each package mentioned in the world profile and will try to
	upgrade the dependency to a newer version if one is available, matches
	the version ranges specified, and is not blocked by either the system
	profile or <i>package.mask</i>.  It also takes into consideration
	<i>SLOTS</i> as mentioned in a previous chapter.
	</p>

	<p>Users familiar with other distributions and packaging methods
	besides Portage may be confused by why Portage does not simply
	do a blind upgrade of packages based solely on version numbers (as it
	did before Gentoo 1.0).  Many of the packages included in Gentoo's
	Portage Tree have many versions available.  An older or newer
	version of a package may be incompatible with the software that relies
	on it.  Blindly upgrading libraries and tools without taking into
	consideration the needs of other packages can quickly result in
	many severe problems.  To avoid this Portage tries to take care when
	upgrading and takes the needs of all packages into consideration based
	on the needs declared in individual package ebuilds.
	</p>
	
	<p>
	The heart of Portage's world update is the world profile.  Unlike
	the system profile which is usually defined by developers and never
	touched by users, the world update profile is generated indirectly
	over time by actions performed by the user.
	The world profile operates much like a "favorites list".
	Packages that are manually installed by the user through use of the
	<i>emerge</i> command are recorded in the <i>world</i> file located at
	<i>/var/cache/edb/world</i>.  Portage assumes that because you took
	the effort to tell it to install the package then you must have some
	interest in keeping it up to date.
	</p>
	<p>
	The <i>world</i> file consists of one package name with category per
	line and may look something like the following:
	</p>
<pre>
net-im/gaim
net-www/skipstone
net-www/galeon
app-editors/vim
app-text/ispell
net-mail/evolution
dev-util/ltrace
sys-apps/xfsprogs
=net-www/mozilla-0.9.8-r3
sys-apps/attr
sys-apps/dmapi
sys-kernel/linux-sources
sys-apps/acl
app-office/gnucash
app-cdr/xcdroast
</pre>
	<p>
	Almost all of the entries in this example file were added 
	automatically by Portage when the user manually merged the specific 
	packages.  These packages will be upgrade if a newer version is 
	available.
	</p>
	
	<note>To save time and make sure your favorite packages are kept updated
	you may manually edit the <i>world</i> file and add entries for these
	packages.  Users upgrading from old versions of Portage may need
	to populate this file.  Recent installations of Gentoo and Portage
	should have a fairly populated world profile created during
	installation.</note>
	
	<p>An interesting entry to note is the entry for the mozilla package
	(<i>=net-www/mozilla-0.9.8-r3</i>).  This entry was added manually
	by a user to "pin" a specific version.  Package ranges (as discussed
	in the <i>Unmerge Packages</i> section of this manual) can be used
	to force Portage to only consider certain version ranges when 
	updating packages.  This entry in effect "pins" Portage into 
	considering mozilla-0.9.8-r3 to be the only available version and 
	thus it will never attempt to update the package during a world
	update for any reason.
	</p>
	
	<p>World updates are done using the following command:</p>
<pre>
emerge --update world
</pre>
	<p>Portage will then attempt to update all packages mentioned in
	the <i>world</i> file and will update any dependencies if needed.
	Dependencies are upgraded to the newest version available that
	satisfies the needs of the package being upgraded.  Packages
	that are not listed in <i>world</i> and are not dependencies of
	the aforementioned packages are not updated.
	</p>

	<warn>Portage will not overwrite files in directories protected
	by Configuration File Protection.  You will need to manually
	merge the differences between your current configuration files
	and the new versions Portage saved for you.  If you do not
	update your configuration files installed software may stop 
	functioning.  Please see <i>Configuration File Protection</i> 
	in the <i>Configuring Portage</i> chapter or use the command 
	<i>emerge --help config</i> for more information. </warn> 

	<p>To view a list of what would be updated or installed during 
	a world update, you can use the <i>--pretend</i> argument as 
	mentioned in previous sections of this chapter.
	</p>

	<note>A world update also performs a system update automatically.  
	Core packages cannot be pinned using the <i>world</i> file method as 
	the current Portage profile will always override it.</note>

	<p>
	An interesting side effect of how world update works can
	be exploited by users wishing to recompile all installed software
	on a system.  Since world update will try to update all packages
	mentioned in the <i>world</i> file and their dependencies, the use
	of the argument <i>--emptytree</i> is a way of forcing the recompile
	of these packages and every dependency except for glibc.
	This can be useful for users wishing to change their compiler options
	or USE keyword settings and want these changes to be used by all
	the software they use without manually remerging every package.
	Simply populate the <i>world</i> file with all your commonly used
	applications and issue the following command: 
	</p>
<pre>
emerge --update world --emptytree
</pre>
	<p>
	You can add the <i>--pretend</i> argument to this command to get a 
	list of packages that would be recompiled as a result of this action.
	</p>
	
</body>
</section>

<section>
<title>Cleaning System</title>
<body>
	<p>Portage supports the ability to install multiple versions
	of the same version on top of each other.  There are quite a few
	packages in Gentoo's Portage Tree that makes use of this
	functionality (for backwards compatibility as older applications may
	be incompatible with a newer version of another package)
	</p>
	<p>In most cases though when a newer version of a package is installed
	most of the older package is overwritten and all that remains is
	a few documentation files and other files unimportant to the operation
	of a system.  Overtime this "cruft" can build up and waste valuable
	disk-space.
	</p>
	<p>To combat this, Portage provides an easy way to remove traces
	of older versions from a user's system.  This functionality is referred
	to as the emerge <i>clean</i> option and be used by issuing the
	following command:
	</p>
<pre>
emerge clean
</pre>
	<p><i>emerge</i> will then display a list of package revisions and 
	versions to be removed, the versions that will remain, and give
	the user time to cancel out of the action by pressing Control-C.
	On a typical system a flurry of activity will occur as it displays
	long lists of files that were either deleted or kept.
	</p>

	<p>Unless specified, Portage assumes the clean action is to be
	performed for the <i>world</i> (all installed packages).  You can
	narrow the scope of the clean action by using options such as 
	<i>world</i>, <i>system</i>, a list of package names, and package 
	version ranges as mentioned in the unmerge section of this chapter.
	</p>

	<p>When considering which package versions should be removed the 
	Portage system considers the various profiles, the needs of other
	installed packages, and a packages SLOT.  Assuming dependencies
	are correctly defined for all packages, the clean action will
	safely remove old package system and should not remove any
	functionality or prevent the system from functioning.
	</p>	
</body>
</section>

<section>
<title>Pruning Packages</title>
<body>
	<p>
	Portage also supports a package <i>prune</i> action.   The prune
	action is an unsafe form of the clean.  It removes all versions
	of all packages except for the last installed version.  It does
	not perform many of the checks <i>clean</i> performs and can
	remove essential dependencies from your system.  Users of this 
	option can easily break their systems and its use is not recommended
	except in specific specialized circumstances.
	</p>

	<p>The <i>prune</i> action accepts the same list as options as the
	<i>clean</i> action and can be used like the following:
	</p>
<pre>
emerge prune
</pre>
</body>
</section>


<section>
<title>Searching The Portage Tree</title>
<body>
	<p>Portage Trees such as the one that forms the heart of the Gentoo
	Linux distribution can be quite large.  The <i>emerge</i> command
	provides a search feature which accepts a search string in the form
	of a regular expression contained in quotes.  Regular expressions
	are very complicated beasts so it is recommended you find a good book
	on the topic if you are interested in fully using regular expressions.
	</p>
	<p>
	Most simple searches can be done without knowing how to form
	regular expressions.  The following is an example of a simple search 
	for a package either named "gcc" or has "gcc" as part of its name:
	</p>
<pre>
emerge search gcc
</pre>
	<p>
	For each match the search action lists the package name, newest 
	available version, newest version installed, its home page, and
	a description of the software contained in the package.
	</p>
</body>
</section>

<section>
<title>Getting Help</title>
<body>
	<p>More information on the many options and actions <i>emerge</i>
	supports can be found by issuing the following command:</p>
<pre>
emerge --help
</pre>
</body>
</section>
	
		

<section>
<title>Useful Utilities</title>
<body>
	<p>Several utilities have been made available by Gentoo users
	to make life easier.  These utilities are available in the
	<i>app-admin/gentoolkit</i> in the Gentoo Portage tree.
	</p>
	<p>
	<ul>
	<li><i>etc-update</i> : shell script using vim to assist with the
	merging of /etc files (can be dangerous if used incorrectly)</li>
	<li><i>qpkg</i> : package database query tool</li>
	<li><i>epm</i> : another package database query tool with RPM like syntax</li>
	</ul>
	</p>
</body>
</section>


</chapter>

</guide>


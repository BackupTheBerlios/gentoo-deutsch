<?xml version='1.0'?>
<!DOCTYPE guide SYSTEM "../www-xsl/guide.dtd">

<guide link="/doc/desktop.html">
<title>Anleitung zur Gentoo Linux Desktop Konfiguration</title>
<author title="Editor"><mail link="g2boojum@gentoo.org">Grant 
Goodyear</mail></author>
<author title="&#252;bersetzter"><mail link="gentoo@naggelgames.de">Hendrik 
Richter</mail></author>

<abstract>
Mit Hilfe dieser Anleitung k&#246;nnen Sie Ihr Gentoo Linux zu einem vollwertigen 
Desktop-System einrichten. Sie erfahren, wie man X, KDE, OSS und alsa (Sound), 
postfix (E-Mail), cups (Drucken), und samba (Unix/Windows Dateiaustausch) 
installiert und konfiguriert.
</abstract>


<version>0.26</version>
<date>17 May 2002</date>

<chapter>
<title>Voraussetzungen</title>
<section>
<body>
<p>Eigentlich nicht n&#246;tig zu erw&#228;hnen: bevor Sie mit dieser Anleitung anfangen, 
m&#252;ssen Sie Gentoo Linux <uri link="build.html">installiert</uri> haben. Nach 
Abschluss dieser recht am&#252;santen Prozedur brauchen Sie noch zus&#228;tzlich den 
aktuellen <e>Portage</e> tree. Es ist wirklich empfehlenswert, den <uri 
link="portage-user.html">Portage User Guide</uri> zu lesen, aber falls Sie 
ungeduldig sind oder unter Zeitdruck stehen, schreiben Sie einfach:</p>

<pre># <i>emerge rsync</i></pre>

<p>
Noch ein kurzer Hinweis zu den Paketen die ich hierf&#252;r ausgew&#228;hlt habe. Gentoo 
Linux hat eine riesige Menge an Window Managern, E-Mail-Programme, etc, die 
einfach installiert werden k&#246;nnen. Die Pakete, die ich ausgew&#228;hlt habe sind 
nicht besonders f&#252;r Gentoo Linux gemacht, es sind einfach die Pakete, die der 
Autor kennt und zu konfigurieren wei&#223;. Mit anderen Worten, dies sind die Pakete 
des Desktops des Autors.
</p>

</body>
</section>
</chapter>

<chapter>
<title>X und KDE</title>

<section>
<title>Installation</title>
<body>
<p>
Nach der Installation von Gentoo Linux und dem updaten des Portage, ist mein 
erster weiterer Schritt die Installation von X und KDE. X braucht ewig lange zum 
kompilieren, und KDE sogar noch l&#228;nger; daher empfehle ich wirklich, mit dem 
Vorgang kurz vorm Zubettgehen zu beginnen.
</p>
<p>
Es ist immer n&#252;tzlich, die <c>--pretend</c> flag vor einem <c>emerge</c> zu 
benutzen, um eine Auflistung aller installierenden Abh&#228;ngigkeiten zu erhalten, 
was in unserem Fall eine recht lange Liste ist.</p>
<pre>
# <i>emerge --pretend kde-base/kde</i>

These are the packages that I would merge, in order.

Calculating dependencies............... done!
[ebuild N  ] x11-base/xfree-4.2.0-r5 to /
[ebuild N  ] media-libs/lcms-1.06 to /
[ebuild N  ] media-libs/jpeg-6b-r2 to /
[ebuild N  ] media-libs/libmng-1.0.1 to /
[ebuild N  ] media-libs/libpng-1.0.12 to /
[ebuild N  ] x11-libs/qt-2.3.1 to /
[ebuild N  ] dev-libs/libxml2-2.4.13 to /
[ebuild N  ] dev-libs/libxslt-1.0.10 to /
[ebuild N  ] dev-lang/tcl-8.3.3 to /
[ebuild N  ] dev-lang/tk-8.3.3 to /
[ebuild N  ] dev-lang/python-2.2-r4 to /
[ebuild N  ] media-libs/tiff-3.5.7 to /
[ebuild N  ] net-print/cups-1.1.13 to /
[ebuild N  ] app-text/sgml-common-0.6.1 to /
[ebuild N  ] net-nds/portmap-5b-r6 to /
[ebuild N  ] app-admin/fam-oss-2.6.4-r1 to /
[ebuild N  ] media-libs/audiofile-0.2.3 to /
[ebuild N  ] media-sound/alsa-driver-0.5.12a to /
[ebuild N  ] media-libs/alsa-lib-0.5.10b to /
[ebuild N  ] kde-base/kdelibs-2.2.2-r2 to /
[ebuild N  ] kde-base/kdegames-2.2.2 to /
[ebuild N  ] kde-base/kdenetwork-2.2.2 to /
[ebuild N  ] dev-libs/popt-1.5 to /
[ebuild N  ] app-arch/rpm-3.0.6-r1 to /
[ebuild N  ] kde-base/kdeadmin-2.2.2 to /
[ebuild N  ] kde-base/kdeartwork-2.2.2 to /
[ebuild N  ] dev-libs/pilot-link-0.9.6-r3 to /
[ebuild N  ] kde-base/kdepim-2.2.2 to /
[ebuild N  ] kde-base/kdetoys-2.2.2 to /
[ebuild N  ] kde-base/kdeutils-2.2.2 to /
[ebuild N  ] dev-lang/nasm-0.98-r3 to /
[ebuild N  ] media-sound/esound-0.2.23 to /
[ebuild N  ] media-libs/libsdl-1.2.3-r1 to /
[ebuild N  ] x11-libs/gtk+-1.2.10-r4 to /
[ebuild N  ] media-video/xanim-2.80.1-r1 to /
[ebuild N  ] x11-libs/openmotif-2.1.30-r1 to /
[ebuild N  ] media-libs/libogg-1.0_rc3 to /
[ebuild N  ] media-libs/libvorbis-1.0_rc3 to /
[ebuild N  ] media-sound/cdparanoia-3.9.8 to /
[ebuild N  ] kde-base/kdemultimedia-2.2.2 to /
[ebuild N  ] kde-base/kdebase-2.2.2-r2 to /
[ebuild N  ] kde-base/kdeaddons-2.2.2-r1 to /
[ebuild N  ] media-gfx/sane-backends-1.0.5-r1 to /
[ebuild N  ] dev-util/dialog-0.7 to /
[ebuild N  ] net-libs/libwww-5.3.2-r1 to /
[ebuild N  ] app-text/tetex-1.0.7-r7 to /
[ebuild N  ] kde-base/kdegraphics-2.2.2 to /
[ebuild N  ] kde-base/kde-2.2.2-r1 to /

<comment>Ihre Abh&#228;ngigkeiten sehen m&#246;glicherweise etwas anders aus.</comment>

# <i>emerge kde-base/kde</i>
</pre>
<note>
Seit portage-1.8.7 kann der Befehl <c>emerge</c> ohne Angabe der Kategorie 
benutzt werden. Dadurch kann KDE mit einem einfachen <c>emerge kde</c> 
installiert werden.
</note>
<note>
Falls Sie vorhaben, CUPS zum Drucken zu benutzen, dann sollten sie "cups" in 
Ihre USE-Variablen in <path>/etc/make.conf</path> eintragen, bevor Sie 
kde-base/kdebase emergen.
</note>
<note>
Sind Sie im Besitz eine Gentoo Linux Binary CD, so k&#246;nnen Sie die Pakete direkt 
von der CD installieren.
</note>
<pre caption="Die Bin&#228;rpakete direkt von CD installieren">
# <c>export PKGDIR=/mnt/cdrom/gentoo/packages</c>
<comment>Normalerweise erwartet Portage die Pakete in 
/usr/portage/packages</comment>
# <c>emerge --usepkg /mnt/cdrom/gentoo/packages/All/kdebase-x.y.z.tbz2</c>
<comment>Die <c>--usepkg</c> flag stellt sicher, dass Bin&#228;rpakete (falls 
vormakes handen) f&#252;r die Abh&#228;ngigkeiten benutzt werden.</comment>
</pre>
</body>
</section>

<section>
<title>Konfiguration</title>
<body>
<p>
Um X zu konfigurieren, benutze ich das Konsolen-Tool <c>xf86config</c>, obwohl 
die erstellte <path>/etc/X11/XF86Config</path> nicht sehr elegant ist - siehe
<uri
link="http://www-105.ibm.com/developerworks/education.nsf/linux-onlinecourse-bytitle/3100FF4795B3F31F86256AF70056FDB3?OpenDocument">
dieses Tutorial (englisch)</uri> f&#252;r eine alternative und sorgf&#228;ltigere 
Konfiguration.
Bevor Sie anfangen, ben&#246;tigen Sie die Horizontale und die Vertikale Frequenz 
(Refresh Rate) Ihres Monitors (mein Viewsonic G773 hat Horizontal: 30-69 KHz, 
Vertikal: 55-90 KHz), den Type und den RAM (in KB) Ihrer Grafikkarte (meine 
GeForce hat 32768 KB) sowie den Typ und Anschluss Ihrer Maus (bei mir eine 
Intellimaus im PS/2 Port <path>/dev/psaux</path>).
</p>
<pre># <c>/usr/X11R6/bin/xf86config</c></pre>
<p>Da ich eine Maus mit 3 Kn&#246;pfen habe, entscheide ich mich gegen die 
3-Button-Emulation. Auf die zus&#228;tzlichen XKB-Keyboard-Options verzichte ich 
ebenfalls, da ich nicht wei&#223;, was sie bewirken.
Sp&#228;ter m&#252;ssen Sie sich f&#252;r eine Bildschirmaufl&#246;sung und eine Farbtiefe 
entscheiden, die Ihnen liegt. Ich benutze 1280x1024 bei 24bpp auf meinem 
Viewsonic, da er eine h&#246;here Aufl&#246;sung leider nicht unterst&#252;tzt. Falls Sie noch 
nie etwas vergleichbares getan haben, wundern Sie sich nicht, wenn Sie 
<c>xf86config</c> noch mehrere Male aufrufen m&#252;ssen, bis Sie ein 
zufrieden stellendes Ergebnis haben.</p>

<note>Wenn Sie nicht wissen, welche Refresh Rate Ihr Monitor hat, versuchen Sie 
es mit einer <uri link="http://www.google.de">Google-Suche</uri> nach der 
Modelnummer und dem Hersteller Ihres Monitors. Die Refresh Raten sind 
normalerweise Teile der &#252;brigen Monitor-Spezifikationen.</note>

<p>Wenn Sie ein Veteran im Konfigurieren von X sind, sollte Ihnen die 
Einrichtung eines symbolischen Linkes Ihrer Maus auf 
<path>/dev/mouse</path> gel&#228;ufig sein. Solche 'symlinks' sind bekannt f&#252;r 
Probleme mit devfs (dem <b>Dev</b>ice <b>F</b>ile<b>S</b>ystem), da sie dazu 
neigten, nach einem Neustart zu verschwinden. Gentoo Linux behandelt symbolische 
Links in <path>/dev</path> nun korrekt. Erstellen Sie den 
<path>/dev/mouse</path> symlink mit <c>ln -s</c> und er <e>wird</e> auch nach 
einem Neustart noch vorhanden sein.</p>

<pre># <i>startx</i></pre>
<p>Wenn Sie X richtig konfiguriert haben, sollte <c>startx</c> einen 
&#252;berraschend h&#228;sslichen X Window Manager starten (twm, um genau zu sein). Wenn X 
hochf&#228;hrt, sind Sie gut dran. Dr&#252;cken Sie
<c>&lt;Strg&gt;&lt;Alt&gt;&lt;Backspace&gt;</c> um den X Server zu beenden.</p>

<p>Sollte Ihre Maus ein Mausrad haben, dann sollten Sie die XF86Config-Datei von 
hand editieren:</p>
<pre>
# <i>cp /etc/X11/XF86Config /etc/X11/XF86Config.working</i>
# <i>nano -w /etc/X11/XF86Config</i></pre>
<pre caption="Der Abschnitt Pointer in XF86Config">
Section "InputDevice"

# Identifier and driver

    Identifier	"Mouse1"
    Driver	"mouse"
    <i>Option "Protocol"    "IMPS/2" </i>
    Option "Device"      "/dev/psaux"
    <i>Option "ZAxisMapping"	"4 5"</i>

</pre>
<p>Da ich eine Intellimaus habe, &#228;nderte ich das "Protocol" von "PS/2" in 
"IMPS/2". Um das Rad zum scrollen zu benutzen, m&#252;ssen Sie die Zeile 'Option 
"ZAxisMapping" "4 5"' hinzuf&#252;gen. Hierbei steht '4' f&#252;r Mausrad auf und '5' f&#252;r 
Mausrad ab.</p>
<note>Netscape 4.x benutzt das Mausrad normalerweise nicht, Sie m&#252;ssen daf&#252;r 
eine .Xdefaults Datei erstellen; wie das geht, steht <uri 
link="http://www-sop.inria.fr/koala/colas/mouse-wheel-scroll/">hier 
(englisch)</uri>. Noch besser ist die Benutzung eines richtigen Browsers wie 
<c>konqueror</c>, <c>opera</c>, <c>mozilla</c> oder <c>galeon</c>.</note>
<p>F&#252;hren Sie <c>startx</c> noch einmal aus, um sicherzustellen, das X immernoch 
starten. Falls Sie eine nVidia-Grafikkarte haben, sollten Sie nun die nVidia 
beschleunigten Treiber installieren.</p>
<pre caption="Nur f&#252;r Besitezr von nVidia-Karten">
# <c>emerge media-video/nvidia-kernel media-video/nvidia-glx</c>
# <c>nano -w /etc/X11/XF86Config</c>
# <c>echo NVdriver >> /etc/modules.autoload</c>
</pre>
<pre caption="GLX in /etc/X11/XF86Config einschalten">
Section "Module"

# This loads the GLX module
#    Load       "glx" <comment>(Das # in dieser Zeile entfernen)</comment>
</pre>
<pre caption="Mithilfe der /etc/X11/XF86Config X anweisen, die nVidia-Treiber 
zu benutzen">
Section "Device"
    Identifier  "NVIDIA GeForce"
    #Driver      "nv"
    Driver      "nvidia"
    #VideoRam    32768
    # Insert Clocks lines here if appropriate
EndSection
</pre>
<p>Starten Sie nun nocheinmal <c>startx</c> um sicherzustellen, das X immernoch 
startet (falls Sie die nVidia-Treiber installiert haben, sehen Sie vorher den 
nVidia Splash Screen).
Davon ausgehen, dass es weiterhin funktioniert, beenden Sie X und wir starten 
einen richtigen Window Manager an seiner Stelle. Hierbei geht mein Dank Achim,
Danarmak and Verwilst, Gentoos Entwickler f&#252;r die KDE-Pakete, die sich 
automatisch und recht gut konfigurieren. Der KDM Display Manager sollte nach 
seinem Starten erscheinen.</p>
<pre># <i>kdm</i></pre>
<p>Sie sollten sich nun einloggen und KDE in voller Pracht bestaunen k&#246;nnen. 
Nat&#252;rlich arbeitet der Sound noch nicht, aber dies werden wir in wenigen 
Augenblicken beheben. &#246;ffnen Sie eine Konsole und tippen Sie <c>ls /usr/bin</c> 
(oder etwas anderes, dass mehr Platz beansprucht als das Fenster der Konsole 
bietet), und probieren Sie, ob Sie mit dem Mausrad hoch und runter scrollen 
k&#246;nnen. Es sollte problemlos funktionieren!</p>

<p>Das einzige was noch zu tun ist, ist f&#252;r einen automatischen Start von X beim 
Booten zu sorgen. &#196;ndern Sie die <path>/etc/rc.conf</path> so um,
dass <e>DISPLAYMANAGER="kdm"</e>.
</p>
<pre>
# <i>nano -w /etc/rc.conf</i>
</pre>
<pre caption="/etc/rc.conf -- Abschnitt DISPLAYMANAGER">
# What display manager do you use ?  [ xdm | gdm | kdm ]

DISPLAYMANAGER=kdm
</pre>
<p>
Nun m&#252;ssen wir nur noch sicherstellen, das <e>xdm</e> automatisch starten beim 
Booten.
</p>
<pre>
# <i>rc-update add xdm default</i>
</pre>
<p>Starten Sie den PC neu, und sehen Sie, ob X automatisch starten.</p>
<impo>Der Befehl <c>rc-update</c> ist Gentoo Linux' verbesserte Version des 
ehrw&#252;rdigen <c>chkconfig</c> Befehls zur Verwaltung der init-Scripte. Durch 
alleinigen Aufruf von <c>rc-update</c> erhalten Sie eine Liste seiner Optionen.
</impo>

</body>
</section>
</chapter>

<chapter>
<title>Sound</title>
<section>
<title>Alsa</title>
<body>

<p>Gentoo Linux supports Alsa for sound using the default kernel.  Alsa can
be run with or without <e>devfs</e>.  One note; if you've installed a new
<path>sys-kernel/linux-sources</path> package, make sure that your Linux kernel
has sound support enabled.</p>

<pre>
# <i>emerge media-sound/alsa-driver</i>
</pre>
<p>
I am going to assume
here that you have <e>devfs</e> enabled; if you don't then please
see the Gentoo FAQ:
<uri>http://www.gentoo.org/doc/faq.html</uri>.
</p>
<p>Now we set up the <e>kerneld</e> aliases.</p>
<pre>
# <i>nano -w /etc/modules.d/alsa</i>
# <i>update-modules</i>
</pre>
<pre caption="Near the top of /etc/modules.d/alsa">
##
## IMPORTANT:
## You need to customise this section for your specific sound card(s)
## and then run `update-modules' command.
## Read alsa-driver's INSTALL file in /usr/share/doc for more info.
##
##  ALSA portion
<i>alias snd-card-0 snd-emu10k1</i>
<i>alias snd-card-1 snd-emu10k1</i>
<i>alias snd-card-2 snd-emu10k1</i>
<i>alias snd-card-3 snd-emu10k1</i>
<i>alias snd-card-4 snd-emu10k1</i>
<i>alias snd-card-5 snd-emu10k1</i>
<i>alias snd-card-6 snd-emu10k1</i>
<i>alias snd-card-7 snd-emu10k1</i>
</pre>
<p>
You'll want to replace <e>snd-card-emu10k1</e> with
your sound card.
</p>
<p>You should also verify that <path>/etc/devfsd.conf</path>
has the alsa devices and permissions correctly registered.</p>
<pre>
# <i>nano -w /etc/devfsd.conf</i>
# <i>rc-update add alsasound boot</i>
</pre>
<pre caption="middle of devfsd.conf file with Alsa/oss stuff">
# ALSA/OSS stuff
# Comment/change these if you want to change the permissions on
# the audio devices
LOOKUP          snd          MODLOAD ACTION snd
LOOKUP          dsp          MODLOAD
LOOKUP          mixer        MODLOAD
LOOKUP          midi         MODLOAD
REGISTER        sound/.*     PERMISSIONS root.audio 660
REGISTER        snd/.*       PERMISSIONS root.audio 660
</pre>
<note>Notice that devfsd.conf sets <path>/dev/sound</path>
permissions to be <c>root.audio</c>.  Thus, for non-root users to
use audio they will have to be part of the <c>audio</c> group.
</note>
<warn>Note that the alsasound script should be added to the "boot" runlevel, not 


the "default" runlevel.
</warn>
<p>
At this point the simplest method is to reboot.  You still won't
be able to hear any sound, though, because alsa keeps all sound channels
muted by default.
</p>
<pre>
# <i>emerge media-sound/alsa-utils</i>
# <i>amixer</i>

Group 'Input Gain',0
  Capabilities: volume mute jointly-mute
  Channels: Front-Left Front-Right
  Limits: min = 0, max = 15
  Front-Left: 11 [73%] [mute] [---]
  Front-Right: 11 [73%] [mute] [---]
Group 'Master Mono',0
  Capabilities: volume mute capture exclusive-capture
  Capture exclusive group: 1
  Channels: Front-Left Front-Right
  Limits: min = 0, max = 31
  Front-Left: 23 [74%] [mute] [---]
  Front-Right: 23 [74%] [mute] [---]
Group 'Headphone',0
  Capabilities: volume mute jointly-mute
  Channels: Front-Left Front-Right
  Limits: min = 0, max = 31
  Front-Left: 0 [0%] [mute] [---]
  Front-Right: 0 [0%] [mute] [---]
Group 'Master',0
  Capabilities: volume mute jointly-mute capture exclusive-capture
  Capture exclusive group: 1
  Channels: Front-Left Front-Right
  Limits: min = 0, max = 63
  Front-Left: 50 [79%] [mute] [---]
  Front-Right: 50 [79%] [mute] [---]
<comment>[chopped for brevity]</comment>

# <i>amixer set Master 100 unmute</i>
# <i>amixer set PCM 100 unmute</i>
# <i>aplay /usr/kde/3/share/sounds/pop.wav</i> <comment>(pop.wav is part of 
KDE)</comment>
</pre>
<p>
After installing the alsa utilities we use <c>amixer</c> to 
unmute the Master and PCM sound channels and to set their volume
to 100%.  We check to see if sound is working by using the 
<c>aplay</c> (alsa play) command.  If you hear a pop, then sound
is indeed working.  Then, adjust the volume settings to your liking;
the ncurses-based <c>alsamixer</c> is a great way to get them "just so".
</p>
<p>
When you reboot your system, the <e>alsasound</e> init
script will properly save and restore your volume settings.
</p>
</body>
</section>
<section>
<title>Standard Kernel Sound Modules</title>
<body>
<p>For standard kernel sound, you will have to recompile the
kernel if you didn't compile your sound module when you installed
gentoo.
If you chose to compile the sound driver as a module (not
compile it directly into the kernel), they you need to add
the module name (without the .o extension) to 
<path>/etc/modules.autoload</path>.
Reboot the machine if you compiled the sound module into the kernel, 
or just <c>modprobe drivername</c> if you compiled the sound module as a module.
With any luck the appropriate sound driver 
should now be loaded.  To actually produce sound, a few more steps
are required.
</p>
<pre caption="non-devfs users only">
# <i>cd /dev</i>
# <i>/usr/sbin/MAKEDEV audio</i>
</pre>
<pre>
# <i>cat /usr/kde/2/share/sounds/pop.wav &gt; /dev/dsp</i>
# <i>emerge media-sound/sox</i>
# <i>play /usr/kde/2/share/sounds/pop.wav</i>
</pre>
<p>
If any sound at all results from cat'ing the .wav file to 
<path>/dev/dsp</path>, then sound is probably working.
By emerge'ing sox one can use the <c>play</c> command to 
play .wav files (and, unlike using <c>cat</c>, the .wav file
should actually sound good when using <c>play</c>).
</p>
<!-- 
found that when running <e>devfs</e> the /dev/MAKEDEV script
would be missing.  Help? Well, you shouldn't need to run MAKEDEV if you're
using devfs (maybe to get /dev/dsp created?), but if you need it, its real home 
is in /usr/sbin (/dev/MAKEDEV is
a symlink.  I changed the text to reflect this. [drobbins]
-->
</body>
</section>
<section>
<title>Sound and KDE</title>
<body>
<p>
KDE has some nice sound utilities, including the KDE sound mixer 
<c>kmix</c>.  
</p>
<pre>
# <i>emerge --search kdemultimedia</i>
[ Results for search key : kdemultimedia ]
[ Applications found : 1 ]

*   kde-base/kdemultimedia
      Latest version Available:  2.2.2
      Latest version Installed:  2.2.2
      Description:  ${DESCRIPTION}Multimedia
# <i>kmix</i>
</pre>
<note>If kmix cannot find a mixer, then it probably thinks you don't
have sound support.  Log out and remove <path>~/.kde/share/config/kmixrc</path>
and <path>~/.kde/share/config/kmix:*</path>
then log in again.  This time it should find 
the sound mixer properly.
</note>
</body>
</section>
</chapter>

<chapter>
<title>Mail</title>
<section>
<title>Postfix -- Install and Configure</title>
<body>
<p>
I happen to like the <c>postfix</c> mail system because it emulates
<c>sendmail</c> without the considerable nightmare of having to 
configure <c>sendmail</c>.  While we're at it we'll also install 
<c>mutt</c>, a mail reader, so that we can test out our 
<c>postfix</c> configuration.
</p>
<pre>
# <i>emerge --pretend net-mail/postfix net-mail/mutt</i>

These are the packages that I would merge, in order.
 
Calculating dependencies... done!
[ebuild N  ] dev-libs/libpcre-3.4-r1 to /
[ebuild N  ] net-mail/mailbase-0.00-r1 to /
[ebuild N  ] net-mail/postfix-20010228.2 to /
[ebuild N  ] net-mail/mutt-1.3.22.1 to /

# <i>emerge net-mail/postfix net-mail/mutt</i>
</pre>
<p>
If you only intend to use your mail server for sending mail,
then postfix is already set up for you.  Otherwise, you'll 
want to edit <path>/etc/postfix/main.cf</path>.  The 
<path>main.cf</path> file is reasonably well documented, and
the defaults are reasonable for a standalone machine.  If
your workstation is directly on the internet (i.e., having
its own non-private IP address and DNS name) then the only
change you will probably have to make is enabling postfix to receive
mail.
</p>
<pre caption="turning on mail reception in main.cf">
# RECEIVING MAIL

# The inet_interfaces parameter specifies the network interface
# addresses that this mail system receives mail on.  By default,
# the software claims all active interfaces on the machine. The
# parameter also controls delivery of mail to user@[ip.address].
#
#inet_interfaces = all
#inet_interfaces = $myhostname
#inet_interfaces = $myhostname, localhost
<i>inet_interfaces = $myhostname, localhost</i>
<i>mydestination = $myhostname, localhost.$mydomain</i>
</pre>


</body>
</section>
<section>
<title>Postfix Testing (with Mutt)</title>
<body>
<p>
Let's see if it works.
</p>
<pre>
# <i>postfix check</i>
<!--
postfix-script: warning: creating missing Postfix pid directory
postfix-script: warning: creating missing Postfix incoming directory
postfix-script: warning: creating missing Postfix active directory
postfix-script: warning: creating missing Postfix bounce directory
postfix-script: warning: creating missing Postfix defer directory
postfix-script: warning: creating missing Postfix deferred directory
postfix-script: warning: creating missing Postfix flush directory
postfix-script: warning: creating missing Postfix saved directory
postfix-script: warning: creating missing Postfix corrupt directory
postfix-script: warning: creating missing Postfix public directory
postfix-script: warning: creating missing Postfix private directory
-->
# <i>newaliases</i>
# <i>postfix start</i>
postfix-script: starting the Postfix mail system
# <i>mutt -x root</i>
/root/.maildir does not exist. Create it? ([y]/n): <comment>[answer y]</comment>
To:  &lt;root&gt;
Subject: test
(End message with a . on a line by itself)
test
.

# <i>mutt</i>
<comment>[You should see your message]</comment>
</pre>
<p>
By using <c>postfix check</c> we make sure that <path>main.cf</path>
parses properly and a number of important directories are created.
Running <c>newaliases</c> sets up the system mail aliases, and 
<c>postfix start</c> then starts the mailer.  I then used
<c>mutt</c> (in <c>mailx</c>, or old-fashioned <c>mail</c>, mode)
to send a message to myself on the local machine.  Along the way
<c>mutt</c> creates the user's (root's, in this case) mail spool
directory, <path>~/.maildir</path>.  Running <c>mutt</c> in
full interactive mode then showed me my message, so at least local
sending and delivery is working.  I then sent mail to one of my
non-local email addresses (not shown) and verified that the mail
did, indeed, get there.
</p>
<warn>If you send mail to an account using the default 
<path>main.cf</path> from a machine on a private network, then
it is possible you will never see it.  Many mail servers automatically
reject mail coming from a source that can't be reached by reverse-DNS.
</warn>
<p>
Assuming everything is working, then it's time to set up postfix
so that it starts at boot time.
</p>
<pre>
# <i>postfix stop</i>
postfix-script: starting the Postfix mail system
# <i>rc-update add postfix default</i>
 * postfix added to runlevel default...
 * Caching service dependencies...          [ ok ] 
 * rc-update complete.
# <i>/etc/init.d/postfix start</i>
Starting postfix......     [  ok  ]
</pre>
<impo>Veteran <c>sendmail</c> or <c>postfix</c> junkies may
be more used to storing mail in 
<path>/var/spool/mail</path> instead of in the user directories,
and that mail is then stored in <e>mbox</e> format instead of
in <e>maildir</e> format.  It is not all that hard to reconfigure
<c>postfix</c> and <c>mutt</c> to use the standard unix mailbox
system (<e>mbox</e>) format instead.  Edit <path>/etc/postfix/main.cf</path>
to comment out <i>home_mailbox</i> and uncomment
<i>mail_spool_directory = /var/spool/mail</i>.
Make the mail spool directory with 
<c>mkdir -p /var/spool/mail</c> and restart <c>postfix</c>.
That will take care of the mailer, for <c>mutt</c> you just
have to edit <path>/etc/mutt/Muttrc</path> to use <e>mbox</e>
with <i>set mbox_type = mbox</i> 
and the <path>/var/spool/mail</path> directory
with <i>set spoolfile=/var/spool/mail</i>.
</impo>
<p>
If you would prefer a GUI mail client, we install a web-based mail server,
Squirrelmail, later in this guide.  Alternatively, Daniel Robbins highly
recommends a combination of IMAP (which we install below as a prerequisite to
Squirrelmail) and KDE's <c>kmail</c> client.  The kmail program is part of 
<path>kde-base/kdenetwork</path>:
</p>
<pre>
 # <i>emerge --search kdenetwork</i>
[ Results for search key : kdenetwork ]
[ Applications found : 1 ]

*  kde-base/kdenetwork
      Latest version Available:  2.2.2
      Latest version Installed:  2.2.2
      Description:  ${DESCRIPTION}Network
</pre>
<p>
Also below we will install Ximian's <e>Evolution</e> as our Personal Information 

Management
software of choice, complete with Palm pilot support.  It, too, can serve as an
excellent mail client.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Printing</title>
<section>
<title>Simple printing -- PDQ</title>
<body>
<p>
For simple systems where you don't need <c>samba</c>
support the PDQ printing system is nice and simple.
</p>
<pre>
# <i>emerge net-print/pdq</i>
# <i>xpdq</i>
</pre>
<p>
Just click on <path>Printer/Add printer</path> and add your
printer.  If your type of printer isn't listed, see
<uri>http://www.linuxprinting.org</uri>, and you can
generate the required files from their web site.  You will
want to click on "Driver options" to further finish configuring
the printer in <c>xpdq</c>.  Any printers set up by running
<c>xpdq</c> as root will be available to all users.  That's all
it takes!
</p>
</body>
</section>
<section>
<title>Full-fledged printing -- CUPS</title>
<body>
<p>
CUPS is a much larger print spooler that is fully suitable for
use as a large-scale print server.  Fortunately it is pretty easy
to set up, since most of the configuration can be done using CUPS'
built-in web server.  Although CUPS is nominally a System V
print spooler (meaning that it uses the <c>lp</c> series of
commands) it emulates all of the <c>lpr</c> commands as
well.
</p>
<pre>
# emerge --pretend net-print/gimp-print-cups
These are the packages that I would merge, in order.
 
Calculating dependencies.. done!
[ebuild N  ] net-print/cups-1.1.10-r6 to /
[binary N  ] net-print/gimp-print-cups-4.1.1 to /
# emerge gimp-print-cups
# rc-update add cupsd default
 * cupsd added to runlevel default...
 * Caching service dependencies...         [ ok ] 
 * rc-update complete.
# /etc/init.d/cupsd start
Starting Common Unix Printing System...... [  ok  ]
# konqueror localhost:631
</pre>
<p>
The <c>gimp-print-cups</c> package is a set of printer drivers for cups,
which is useful because the cups package itself includes drivers only
for HP and Epson printers.
Building <c>gimp-print-cups</c>
builds cups as a dependency.  Once cups is built
we add its init scripts to the default runlevel using 
<c>rc-update</c>, and then we turn on the cups daemon by starting
the init script.
</p>
<p>
Configuring cups simply requires using a web browser to connect to the
web server that cups runs on the localhost network on port 631.
[Note that because the cups web server is configured
to accept requests only on localhost and <e>not</e>
on any of the ethx interfaces, it is reasonably secure.  Of course, that
also means that it is difficult to administer cups remotely in any
sort of nice fashion (the command-line <c>lpadmin</c> command
would be an option, but it is also a considerable nightmare).  Fortunately,
the cups web server renders quite well in <c>lynx</c>, so it can be 
administered from a terminal window.]  Once you connect to the web
interface, click (or its equivalent if using <c>lynx</c>) on "Do
Administrative Tasks".  You will be asked for the cups account name
and password; you can either use "root" (and the root password), or provide
a username and password for a user in the "lp" group.
Again, since the web server
exists only on localhost, you don't have to worry about that information 
being transmitted on the internet.  To add a printer click on "Add Printer",
and follow the directions.  Help may be obtained by clicking on "Help", and
then reading the Software Administrator's Manual.  If you find that you
lack the appropriate printer driver then you can create one by heading
to the rather impressive <uri>http://www.linuxprinting.org</uri> site.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Samba</title>
<section>
<body>
<p>
Samba is a remarkable package that lets your linux box share files
and printers with MS Windows machines.  For more detailed information read
the Samba articles by Daniel Robbins at 
<uri>http://www.ibm.com/developerworks</uri>.
</p>
<pre>
# <i>emerge net-fs/samba</i>
# <i>rc-update add samba default</i>
# <i>cd /etc/samba</i>
# <i>cp smb.conf.example smb.conf</i>
# <i>nano -w smb.conf</i>
</pre>
<pre caption="smb.conf -- workgroup">
# workgroup = NT-Domain-Name or Workgroup-Name, eg: REDHAT4
   workgroup = MYGROUP <comment>[change to match your workgroup]</comment>
</pre>
<pre caption="smb.conf -- printing with cups">
# It should not be necessary to specify the print system type unless
# it is non-standard. Currently supported print systems include:
# bsd, sysv, plp, lprng, aix, hpux, qnx
;   printing = bsd
    printing = cups
</pre>
<pre caption="smb.conf -- encryption">
# You may wish to use password encryption. Please read
# ENCRYPTION.txt, Win95.txt and WinNT.txt in the Samba documentation.
# Do not enable this option unless you have read those documents
  encrypt passwords = yes
</pre>
<p>
I have fairly minimal Samba needs.  I just want to be able to share
files between my linux and windows machines, and I want to use my
linux box as a print server (using <c>cups</c>).  After installing,
it suffices to make a few minor edits to the <path>/etc/samba/smb.conf</path>
file.  Specifically, the <e>workgroup</e> variable needs to match the
workgroup for the windows network (I usually use "OLYMPUS", but "WORKGROUP"
is the default on windows if I
remember correctly), <e>printing</e> needs to be <e>cups</e>
instead of <e>bsd</e>, and the <e>encrypt passwords = yes</e> line needs
to be uncommented.  Windows machines use encrypted passwords by default,
so that last change is essential unless you want to hack the Windows 
registry on all of your windows machines <comment>[not recommended]</comment>.
Unfortunately, Windows uses a different encryption method for passwords than
does Linux, so you have to maintain a separate password file for samba.
</p>
<pre>
# <i>smbpasswd -a grant</i> <comment>[Replace "grant" with your user name]</comment>
New SMB password:
Retype new SMB password:
Added user grant.
</pre>
<note>
Before adding a user to samba's password list that user must first be
listed in <path>/etc/passwd</path>.
</note>
<p>
For each user that you want to be able to use samba from a windows machine
you need to run the <c>smbpasswd</c> command.  Samba stores passwords in
<path>/etc/samba/private/smbpasswd</path>, which will be created for you 
the first time you run the <c>smbpasswd</c> command.
</p>
<pre>
# <i>/etc/init.d/samba start</i>
Starting samba...        [  ok  ]
</pre>
<p>
Start samba, and you should be able to connect to your Gentoo Linux
box from any of your windows machines and see the home directory for
whatever user you connect as and also whatever printers you have set up.
If you can't connect, take a look at 
<path>/usr/share/doc/samba-2.2.3a/full_docs/textdocs/DIAGNOSIS.txt.gz</path>
for additional help.
</p>
</body>
</section>
</chapter>

<chapter>
<title>Apache and Squirrelmail webmail</title>
<section>
<title>Apache with SSL and PHP</title>
<body>
<p>Assuming that you have a static IP address (or you use a service 
such as dyndns with your dynamic IP address), then you might want an
effective way to check your e-mail when you're out of town.  The
solution that I have chosen is to set up a webmail server,
Squirrelmail, that I can access remotely using any web browser.</p>
<p>The first step is to install a web server.  Most of the
rest of the world uses Apache; we will too.  We will also
install PHP (PHP4, actually) at the same time, since Squirrelmail
is a PHP program.  The version numbers shown in the code listing
below might be different by the time you read this.  Please
adjust them accordingly.  Don't just copy and paste the commands
into your terminal!</p>
<pre>
# <i>emerge net-www/apache dev-lang/php net-www/mod_ssl</i>
# <i>ebuild /var/db/pkg/dev-lang/php-4.1.2-r7/php-4.1.2-r7.ebuild config</i>
# <i>ebuild /var/db/pkg/net-www/mod_ssl-2.8.8/mod_ssl-2.8.8.ebuild config</i>
# <i>nano -w /etc/apache/conf/apache.conf</i>
</pre>
<impo>You want to make sure that you install mod_ssl if you want
Apache to have SSL support.  If  you want to check your e-mail
remotely without sending your password across the internet unencrypted,
then you <e>do</e> want SSL!.</impo>
<p>You should take a good look at <path>/etc/apache/conf/apache.conf</path>,
since Apache is very customizable.  By default the Apache document root
(where it first looks for html files when you connect to
http://www.servername.foo or http://localhost) is <path>/home/httpd/htdocs</path>;
feel free to relocate it if you wish.</p>
<pre caption="/etc/apache/conf/apache.conf">
# Do NOT add a slash at the end of the directory path.
#
DocumentRoot "/home/httpd/htdocs" <comment>(edit this line if desired)</comment>

</pre>
<pre>
# <i>rc-update add apache default</i>
 * apache added to runlevel default...
 * Caching service dependencies...               [ ok ]
 * rc-update complete.
# <i>nano -w /etc/conf.d/apache</i>
</pre>
<p>Use <c>rc-update</c> to add Apache to the default runlevel,  and then
edit <path>/etc/conf.d/apache</path> to add the following lines so that Apache
automatically loads the SSL and PHP modules at start-up.</p>
<pre caption="/etc/conf.d/apache">
APACHE_OPTS="-D SSL -D PHP4"
</pre>
<pre>
# <i>/etc/init.d/apache start</i>
 * Starting Apache...                            [ OK ]
# <i>lynx localhost</i>
</pre>
<p>You can check to make sure your Apache web server is working
by using any browser to connect to localhost.  To make sure that SSL support
is functional, use a browser to connect to <uri>http<comment>s</comment>://localhost</uri>.
The <c>https</c> prefix tells the browser to make a <e>secure</e> connection
to the server using SSL.  Graphical browsers will have a padlock icon somewhere
indicating the secure connection.</p>
<note>When making a secure connection to your server, you will most likely receive
a warning that the site's security certificate is not recognized.  The mod_ssl ebuild
installs a self-signed security certificate, which is intended to be used for
testing purposes only.  See the <c>mod_ssl</c> manual: 
<uri>http://localhost/doc/mod_ssl-2.8.8/html</uri>.  For personal use a self-signed
certificate is just fine.</note>
<p>Now we need to make sure that PHP is working correctly.  The first step
is to create a simple PHP file and put it in the Apache DocumentRoot directory.</p>
<pre>
# <i>echo "&lt;? phpinfo(); ?&gt;" > /home/httpd/htdocs/test.php</i>
# <i>lynx http://localhost/test.php</i>
</pre>
<pre caption="working Apache + PHP">
                                                           phpinfo() (p1 of 26)
                                  PHP Logo
 
                             PHP Version 4.0.6
 
     System Linux my.server.edu 2.4.10 #1 Tue Oct 9 16:33:50 Local
           time zone must be set--see zic manuali686 i686 unknown
                           Build Date Oct 16 2001
</pre>
<p>If you see something like the above, then Apache is successfully
processing PHP code.</p>
<warn>If you look at the full output of the above, you'll find out that
the <path>test.php</path> script gives out a <e>lot</e> of information 
about your system.  You should probably get rid of it once you know that
php is working.  (Or you can do what I do, and just <c>mv test.php test.phps</c>.
Apache will display <path>test.phps</path> as a PHP source file instead
of executing the script.)</warn>
</body>
</section>
<section>
<title>Courier IMAP</title>
<body>
<p>Squirrelmail is a PHP application, but it relies on an IMAP server
as the glue between the web server and e-mail.  Since Gentoo linux
uses Maildir mail folders by default, Courier IMAP is a good choice.</p>
<pre>
# <i>emerge net-mail/courier-imap</i>
# <i>rc-update add courier-imapd default</i>
 * courier-imapd added to runlevel default...
 * Caching service dependencies...                        [ ok ]
 * rc-update complete.
# <i>nano -w /etc/courier-imap/authdaemonrc</i>
# <i>/etc/init.d/courier-imapd start</i>
# <i>telnet localhost 143</i>
Trying 127.0.0.1...
Connected to localhost.localdomain.
Escape character is '^]'.
* OK Courier-IMAP ready. Copyright 1998-2001 Double Precision, Inc.  
See COPYING for distribution information.
1 LOGIN grant passwd <comment>(&lt;-- replace "grant" w/ your username 
                          and "passwd" w/ your password)</comment>
1 OK LOGIN OK
<comment>(Hit &lt;ctrl&gt;-"]" and type "quit" to exit)</comment>
</pre>
<pre caption="Correct authorization in /etc/courier-imap/authdaemonrc">
##NAME: authmodulelist:0
#
# The authentication modules that are linked into authdaemond.  The
# default list is installed.  You may selectively disable modules simply
# by removing them from the following list.  The available modules you
# can use are: authcustom authcram authuserdb authpam

#authmodulelist="authcustom authcram authuserdb authpam"
authmodulelist="authpam"
</pre>
<impo>Courier IMAP usually hardwires the name of the user's Maildir-type
inbox directory that is used in its rc start-up script,
<path>/usr/lib/courier-imap/imapd.rc</path>, to be <path>$HOME/Maildir</path>.  
Gentoo linux, however, uses $HOME/.maildir instead, so the courier-imap ebuild
modifies the <path>imapd.rc</path> script to use <e>$MAILDIR</e>, which it obtains
from the Gentoo init script <path>/etc/init.d/courier-imap</path>.  If you choose
to use a home user's mailbox other than <path>.maildir</path>, you'll need to modify
the <e>MAILDIR=.maildir</e> entry in courier-imap's init script.</impo>
<p>
If you want Courier IMAP to have SSL support you just need to make
the IMAP SSL certificate (and tell courier-imap where to find it),
</p>
<pre>
# <i>/usr/sbin/mkimapdcert</i> 
</pre>
<p>and then start up imap-ssl.</p>
<pre>
# <i>rc-update add courier-imapd-ssl default</i>
# <i>/etc/init.d/courier-imapd-ssl start</i>
</pre>
<p>You can verify that imap is working by using any
IMAP-enabled mail client, such as netscape, kmail,
or mutt.</p>
<pre>
# <i>mutt -f imap://localhost</i>
</pre>
</body>
</section>
<section>
<title>Squirrelmail</title>
<body>
<p>Fortunately, installing and configuring
Squirrelmail, once all of the components are in
place, is straightforward.</p>
<pre>
# <i>emerge net-mail/squirrelmail</i>
# <i>cd /home/httpd/htdocs</i>
# <i>cd squirrelmail</i>
# <i>./configure</i>
</pre>
<note>If your Apache DocumentRoot is not <path>/home/httpd/htdocs</path>,
you will want to edit the <path>net-mail/squirrelmail</path> ebuild
to point there.</note>
<p>For squirrelmail to work correctly, you need to make sure that
all of the files are owned by the user that Apache runs
as (the squirrelmail ebuild assumes that user is "apache").
Use <c>./configure</c> to select option <e>2</e>.</p>
<pre caption="Squirrelmail configuration -- Server settings">
SquirrelMail Configuration : Read: config.php
---------------------------------------------------------
Server Settings
1.  Domain               : my.server.edu
2.  IMAP Server          : localhost
3.  IMAP Port            : 143
4.  Use Sendmail/SMTP    : SMTP
6.    SMTP Server        : localhost
7.    SMTP Port          : 25
8.    Authenticated SMTP : false
9.  Server               : courier
10. Invert Time          : false
11. Delimiter            : detect
 
R   Return to Main Menu
C.  Turn color off
S   Save data
Q   Quit
 
Command >>
</pre>
<p>Make sure that <e>Server</e> is set to <e>courier</e>.
Return to the main menu and select option <e>4</e>, General
Options.</p>
<pre caption="Squirrelmail configuration -- General options">
SquirrelMail Configuration : Read: config.php
---------------------------------------------------------
General Options
1.  Default Charset        : iso-8859-1
2.  Data Directory         : ../data/
3.  Attachment Directory   : /tmp/
4.  Default Left Size      : 150
5.  Usernames in Lowercase : false
 
R   Return to Main Menu
C.  Turn color off
S   Save data
Q   Quit
 
Command >>
</pre>
<p>I use the data directory in the package, although it would be
better security to use one outside the Apache document tree.  I
also use <path>/tmp</path> as my directory to store attachments.</p>

<p>Before using squirrelmail, we first have to modify the PHP
configuration file, <path>/etc/php4/php.ini</path>, to turn on
register variables and then restart apache:</p>
<pre>
# <i>nano -w /etc/php4/php.ini</i>
# <i>/etc/init.d/apache restart</i>
</pre>
<pre caption="Editing /etc/php4/php.ini">
; You should do your best to write your scripts so that they do not require
; register_globals to be on;  Using form variables as globals can easily lead
; to possible security problems, if the code is not very well thought of.
;register_globals = Off
<comment>register_globals = On</comment>
</pre>

<p>Now you can browse to <uri>https://localhost/squirrelmail/</uri>, and it should work!</p>
<pre>
# <i>lynx https://localhost/squirrelmail/</i>
</pre>
<pre caption="Squirrelmail login page">
                                           SquirrelMail - Login
                               [sm_logo.jpg]
 
                      SquirrelMail version 1.2.0 [rc2]
                    By the SquirrelMail Development Team
 
                             SquirrelMail Login
 
       Name: ____________________
   Password: ____________________
 
                                   Login
</pre>
<p>(I don't really suggest using lynx with Squirrelmail, but you could!)</p>
</body>
</section>
</chapter>

<chapter>
<title>Personal Information Management</title>
<section>
<title>Evolution with Palm support</title>
<body>
<p>Evolution is an exceptionally nice Personal Information Management
tool that syncs with a Palm pilot quite well.  The first step is
to emerge evolution.  If you do intend to use evolution with a
Palm pilot, make sure "pda" is in your USE variables in 
<path>/etc/make.conf</path> before emerging evolution.
</p>
<pre>
# <i>emerge --pretend net-mail/evolution</i>

These are the packages that I would merge, in order.

Calculating dependencies................................ done!
[ebuild N  ] app-text/ghostscript-6.50-r2 to /
[ebuild N  ] app-text/tetex-1.0.7-r4 to /
[ebuild   U] media-libs/freetype-2.0.5-r1 to /
[ebuild N  ] gnome-base/ORBit-0.5.12-r1 to /
[ebuild N  ] media-libs/giflib-4.1.0-r3 to /
[ebuild N  ] media-libs/imlib-1.9.10-r1 to /
[ebuild N  ] gnome-base/gnome-libs-1.4.1.2-r2 to /
[ebuild N  ] dev-libs/libxml-1.8.16 to /
[ebuild N  ] gnome-base/libglade-0.17-r3 to /
[ebuild N  ] media-libs/gdk-pixbuf-0.14.0 to /
[ebuild N  ] gnome-base/gnome-print-0.34 to /
[ebuild N  ] dev-libs/popt-1.5 to /
[ebuild N  ] dev-util/intltool-0.12 to /
[ebuild N  ] gnome-base/oaf-0.6.7 to /
[ebuild N  ] gnome-base/bonobo-1.0.17 to /
[ebuild N  ] dev-libs/libunicode-0.4-r1 to /
[ebuild N  ] dev-util/guile-1.5.4 to /
[ebuild N  ] gnome-base/gconf-1.0.7-r2 to /
[ebuild N  ] gnome-base/gnome-vfs-1.0.3 to /
[ebuild N  ] gnome-extra/gal-0.18.1 to /
[ebuild N  ] gnome-base/control-center-1.4.0.1-r3 to /
[ebuild N  ] dev-libs/pilot-link-0.9.6-r3 to /
[ebuild N  ] app-text/scrollkeeper-0.2 to /
[ebuild N  ] gnome-base/gnome-core-1.4.0.4-r3 to /
[ebuild N  ] gnome-extra/gnome-pilot-0.1.64 to /
[ebuild N  ] gnome-base/libghttp-1.0.9-r1 to /
[ebuild N  ] gnome-extra/gtkhtml-1.0.0 to /
[ebuild N  ] gnome-extra/bonobo-conf-0.14 to /
[ebuild N  ] app-arch/zip-2.3-r1 to /
[ebuild N  ] app-arch/unzip-5.42 to /
[ebuild N  ] net-www/mozilla-0.9.6-r4 to /
[ebuild N  ] net-mail/evolution-1.0-r2 to /

# <i>emerge net-mail/evolution</i> 
</pre>
<p>
Unfortunately, the evolution build takes slightly longer than forever
(notice that <c>mozilla</c> is a dependency!); have several gallons of
coffee/tea while you wait.
</p>
<p>
While building <c>evolution</c> the necessary Palm pilot tools should have been
built as well.  To make sure that regular users can sync a pilot we need to make
a couple of changes to the serial port permissions.  I'll assume your Palm cradle
plugs into the first serial port (/dev/ttyS0, or /dev/tts/0 in "devfs" notation).
</p>
<pre>
# <i>groupadd serial</i>
# <i>chown root.serial /dev/tts/0</i>
# <i>chmod g+rw /dev/tts/0</i>
# <i>ls -l /dev/tts/0</i>
crw-rw----    1 root     serial     4,  64 Dec 31  1969 /dev/tts/0
# <i>ln -s /dev/tts/0 /dev/pilot</i>
# <i>nano -w /etc/group</i> <comment>(add appropriate users to the serial group)</comment>
</pre>
<p>
We've added a "serial" group to the system, and you should add any users who need
to use the serial port (any Palm pilot users) to the serial group.  We've given
the serial group "rw" permissions on <path>/dev/tts/0</path>, and for future 
reference we have made a <path>/dev/pilot</path> symbolic link to
<path>/dev/tts/0</path>.  Thanks to recent changes in how devfs is handled on
Gentoo these changes will persist after rebooting.
</p>
<note>
Users of pre-rc6-r13 can either upgrade <path>sys-apps/baselayout</path>
and <path>sys-apps/devfsd</path> (and merge in any "._cfg*" files in 
<path>/etc</path> that result), or simply add the appropriate permissions
and symlink in <path>/etc/devfsd.conf</path>.
</note>
<p>
Users will want to use the <path>tools/Pilot settings</path> menu option in evolution
to set up the Gnome pilot software.  Don't forget to set up the "Pilot Conduits" as
well as the "Pilot Link" in the Gnome Control Center.
</p>
</body>
</section>
</chapter>
</guide>
